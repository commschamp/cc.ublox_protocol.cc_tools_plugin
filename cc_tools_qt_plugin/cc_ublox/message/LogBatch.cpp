// Generated by commsdsl2tools_qt v6.3.3

#include "LogBatch.h"

#include "cc_tools_qt/ProtocolMessageBase.h"
#include "cc_tools_qt/property/field.h"
#include "cc_tools_qt_plugin/cc_ublox/field/Day.h"
#include "cc_tools_qt_plugin/cc_ublox/field/Dop.h"
#include "cc_tools_qt_plugin/cc_ublox/field/GpsFix.h"
#include "cc_tools_qt_plugin/cc_ublox/field/HAcc.h"
#include "cc_tools_qt_plugin/cc_ublox/field/HMSL.h"
#include "cc_tools_qt_plugin/cc_ublox/field/Heading.h"
#include "cc_tools_qt_plugin/cc_ublox/field/HeadingAcc.h"
#include "cc_tools_qt_plugin/cc_ublox/field/Height.h"
#include "cc_tools_qt_plugin/cc_ublox/field/Hour.h"
#include "cc_tools_qt_plugin/cc_ublox/field/Itow.h"
#include "cc_tools_qt_plugin/cc_ublox/field/Lat.h"
#include "cc_tools_qt_plugin/cc_ublox/field/Lon.h"
#include "cc_tools_qt_plugin/cc_ublox/field/Min.h"
#include "cc_tools_qt_plugin/cc_ublox/field/Month.h"
#include "cc_tools_qt_plugin/cc_ublox/field/PsmState.h"
#include "cc_tools_qt_plugin/cc_ublox/field/Res1.h"
#include "cc_tools_qt_plugin/cc_ublox/field/Res2.h"
#include "cc_tools_qt_plugin/cc_ublox/field/Res4.h"
#include "cc_tools_qt_plugin/cc_ublox/field/Sec.h"
#include "cc_tools_qt_plugin/cc_ublox/field/VAcc.h"
#include "cc_tools_qt_plugin/cc_ublox/field/Vel.h"
#include "cc_tools_qt_plugin/cc_ublox/field/Year.h"
#include "cc_tools_qt_plugin/cc_ublox/options/DefaultOptions.h"
#include "cc_ublox/message/LogBatch.h"

namespace cc_tools_qt_plugin
{

namespace cc_ublox
{

namespace message
{

namespace
{

static QVariantMap createProps_version(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::LogBatchFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::Version;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .asMap();
}

static QVariantMap createProps_contentValid(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::LogBatchFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::ContentValid;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .add(0U, "extraPvt")
            .add(1U, "extraOdo")
            .asMap();
}

static QVariantMap createProps_msgCount(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::LogBatchFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::MsgCount;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .asMap();
}

static QVariantMap createProps_iTOW(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::LogBatchFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::ITOW;
    auto props = cc_tools_qt_plugin::cc_ublox::field::createProps_itow(Field::name(), serHidden);
    return props;
}

static QVariantMap createProps_year(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::LogBatchFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::Year;
    auto props = cc_tools_qt_plugin::cc_ublox::field::createProps_year(Field::name(), serHidden);
    return props;
}

static QVariantMap createProps_month(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::LogBatchFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::Month;
    auto props = cc_tools_qt_plugin::cc_ublox::field::createProps_month(Field::name(), serHidden);
    return props;
}

static QVariantMap createProps_day(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::LogBatchFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::Day;
    auto props = cc_tools_qt_plugin::cc_ublox::field::createProps_day(Field::name(), serHidden);
    return props;
}

static QVariantMap createProps_hour(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::LogBatchFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::Hour;
    auto props = cc_tools_qt_plugin::cc_ublox::field::createProps_hour(Field::name(), serHidden);
    return props;
}

static QVariantMap createProps_min(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::LogBatchFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::Min;
    auto props = cc_tools_qt_plugin::cc_ublox::field::createProps_min(Field::name(), serHidden);
    return props;
}

static QVariantMap createProps_sec(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::LogBatchFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::Sec;
    auto props = cc_tools_qt_plugin::cc_ublox::field::createProps_sec(Field::name(), serHidden);
    return props;
}

static QVariantMap createProps_valid(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::LogBatchFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::Valid;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .add(0U, "validDate")
            .add(1U, "validTime")
            .asMap();
}

static QVariantMap createProps_tAcc(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::LogBatchFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::TAcc;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .asMap();
}

static QVariantMap createProps_fracSec(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::LogBatchFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::FracSec;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .asMap();
}

static QVariantMap createProps_fixType(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::LogBatchFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::FixType;
    auto props = cc_tools_qt_plugin::cc_ublox::field::createProps_gpsFix(Field::name(), serHidden);
    return props;
}

struct FlagsMembers
{
    static QVariantMap createProps_bitsLow(bool serHidden)
    {
        static_cast<void>(serHidden);
        using Field = ::cc_ublox::message::LogBatchFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::FlagsMembers::BitsLow;
        return
            cc_tools_qt::property::field::ForField<Field>()
                .name(Field::name())
                .serialisedHidden(serHidden)
                .add(0U, "gnssFixOK")
                .add(1U, "diffSoln")
                .asMap();
    }

    static QVariantMap createProps_psmState(bool serHidden)
    {
        static_cast<void>(serHidden);
        using Field = ::cc_ublox::message::LogBatchFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::FlagsMembers::PsmState;
        auto props = cc_tools_qt_plugin::cc_ublox::field::createProps_psmState(Field::name(), serHidden);
        return props;
    }

    static QVariantMap createProps_reserved(bool serHidden)
    {
        static_cast<void>(serHidden);
        using Field = ::cc_ublox::message::LogBatchFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::FlagsMembers::Reserved;
        auto props = cc_tools_qt_plugin::cc_ublox::field::createProps_res1(Field::name(), serHidden);
        auto extraProps =
            cc_tools_qt::property::field::Common()
                .hidden(true)
                ;
        extraProps.setTo(props);
        return props;
    }
}; // struct FlagsMembers

static QVariantMap createProps_flags(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::LogBatchFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::Flags;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .add(FlagsMembers::createProps_bitsLow(true))
            .add(FlagsMembers::createProps_psmState(true))
            .add(FlagsMembers::createProps_reserved(true))
            .asMap();
}

static QVariantMap createProps_flags2(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::LogBatchFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::Flags2;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .asMap();
}

static QVariantMap createProps_numSV(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::LogBatchFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::NumSV;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .asMap();
}

static QVariantMap createProps_lon(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::LogBatchFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::Lon;
    auto props = cc_tools_qt_plugin::cc_ublox::field::createProps_lon(Field::name(), serHidden);
    return props;
}

static QVariantMap createProps_lat(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::LogBatchFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::Lat;
    auto props = cc_tools_qt_plugin::cc_ublox::field::createProps_lat(Field::name(), serHidden);
    return props;
}

static QVariantMap createProps_height(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::LogBatchFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::Height;
    auto props = cc_tools_qt_plugin::cc_ublox::field::createProps_height(Field::name(), serHidden);
    return props;
}

static QVariantMap createProps_hMSL(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::LogBatchFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::HMSL;
    auto props = cc_tools_qt_plugin::cc_ublox::field::createProps_hMSL(Field::name(), serHidden);
    return props;
}

static QVariantMap createProps_hAcc(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::LogBatchFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::HAcc;
    auto props = cc_tools_qt_plugin::cc_ublox::field::createProps_hAcc(Field::name(), serHidden);
    return props;
}

static QVariantMap createProps_vAcc(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::LogBatchFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::VAcc;
    auto props = cc_tools_qt_plugin::cc_ublox::field::createProps_vAcc(Field::name(), serHidden);
    return props;
}

static QVariantMap createProps_velN(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::LogBatchFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::VelN;
    auto props = cc_tools_qt_plugin::cc_ublox::field::createProps_vel(Field::name(), serHidden);
    return props;
}

static QVariantMap createProps_velE(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::LogBatchFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::VelE;
    auto props = cc_tools_qt_plugin::cc_ublox::field::createProps_vel(Field::name(), serHidden);
    return props;
}

static QVariantMap createProps_velD(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::LogBatchFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::VelD;
    auto props = cc_tools_qt_plugin::cc_ublox::field::createProps_vel(Field::name(), serHidden);
    return props;
}

static QVariantMap createProps_gSpeed(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::LogBatchFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::GSpeed;
    auto props = cc_tools_qt_plugin::cc_ublox::field::createProps_vel(Field::name(), serHidden);
    return props;
}

static QVariantMap createProps_headMot(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::LogBatchFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::HeadMot;
    auto props = cc_tools_qt_plugin::cc_ublox::field::createProps_heading(Field::name(), serHidden);
    return props;
}

static QVariantMap createProps_sAcc(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::LogBatchFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::SAcc;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .asMap();
}

static QVariantMap createProps_headAcc(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::LogBatchFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::HeadAcc;
    auto props = cc_tools_qt_plugin::cc_ublox::field::createProps_headingAcc(Field::name(), serHidden);
    return props;
}

static QVariantMap createProps_pDOP(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::LogBatchFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::PDOP;
    auto props = cc_tools_qt_plugin::cc_ublox::field::createProps_dop(Field::name(), serHidden);
    return props;
}

static QVariantMap createProps_reserved0(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::LogBatchFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::Reserved0;
    auto props = cc_tools_qt_plugin::cc_ublox::field::createProps_res2(Field::name(), serHidden);
    return props;
}

static QVariantMap createProps_distance(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::LogBatchFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::Distance;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .asMap();
}

static QVariantMap createProps_totalDistance(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::LogBatchFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::TotalDistance;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .asMap();
}

static QVariantMap createProps_totalStd(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::LogBatchFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::TotalStd;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .asMap();
}

static QVariantMap createProps_reserved1(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::LogBatchFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::Reserved1;
    auto props = cc_tools_qt_plugin::cc_ublox::field::createProps_res4(Field::name(), serHidden);
    return props;
}

QVariantList createProps()
{
    QVariantList props;
    props.append(createProps_version(false));
    props.append(createProps_contentValid(false));
    props.append(createProps_msgCount(false));
    props.append(createProps_iTOW(false));
    props.append(createProps_year(false));
    props.append(createProps_month(false));
    props.append(createProps_day(false));
    props.append(createProps_hour(false));
    props.append(createProps_min(false));
    props.append(createProps_sec(false));
    props.append(createProps_valid(false));
    props.append(createProps_tAcc(false));
    props.append(createProps_fracSec(false));
    props.append(createProps_fixType(false));
    props.append(createProps_flags(false));
    props.append(createProps_flags2(false));
    props.append(createProps_numSV(false));
    props.append(createProps_lon(false));
    props.append(createProps_lat(false));
    props.append(createProps_height(false));
    props.append(createProps_hMSL(false));
    props.append(createProps_hAcc(false));
    props.append(createProps_vAcc(false));
    props.append(createProps_velN(false));
    props.append(createProps_velE(false));
    props.append(createProps_velD(false));
    props.append(createProps_gSpeed(false));
    props.append(createProps_headMot(false));
    props.append(createProps_sAcc(false));
    props.append(createProps_headAcc(false));
    props.append(createProps_pDOP(false));
    props.append(createProps_reserved0(false));
    props.append(createProps_distance(false));
    props.append(createProps_totalDistance(false));
    props.append(createProps_totalStd(false));
    props.append(createProps_reserved1(false));
    return props;
}

} // namespace

class LogBatchImpl : public
    cc_tools_qt::ProtocolMessageBase<
        ::cc_ublox::message::LogBatch<cc_tools_qt_plugin::cc_ublox::Message, cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>,
        LogBatchImpl
    >
{
public:
    LogBatchImpl() = default;
    LogBatchImpl(const LogBatchImpl&) = delete;
    LogBatchImpl(LogBatchImpl&&) = delete;
    virtual ~LogBatchImpl() = default;
    LogBatchImpl& operator=(const LogBatchImpl&) = default;
    LogBatchImpl& operator=(LogBatchImpl&&) = default;

protected:
    virtual const QVariantList& fieldsPropertiesImpl() const override
    {
        static const QVariantList Props = createProps();
        return Props;
    }
};

LogBatch::LogBatch() : m_pImpl(new LogBatchImpl) {}
LogBatch::~LogBatch() = default;

LogBatch& LogBatch::operator=(const LogBatch& other)
{
    *m_pImpl = *other.m_pImpl;
    return *this;
}

LogBatch& LogBatch::operator=(LogBatch&& other)
{
    *m_pImpl = std::move(*other.m_pImpl);
    return *this;
}

LogBatch::MsgIdParamType LogBatch::doGetId()
{
    return ::cc_ublox::message::LogBatch<cc_tools_qt_plugin::cc_ublox::Message, cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::doGetId();
}

const char* LogBatch::nameImpl() const
{
    return static_cast<const cc_tools_qt::Message*>(m_pImpl.get())->name();
}

const QVariantList& LogBatch::fieldsPropertiesImpl() const
{
    return m_pImpl->fieldsProperties();
}

void LogBatch::dispatchImpl(cc_tools_qt::MessageHandler& handler)
{
    static_cast<cc_tools_qt::Message*>(m_pImpl.get())->dispatch(handler);
}

void LogBatch::resetImpl()
{
    m_pImpl->reset();
}

bool LogBatch::assignImpl(const cc_tools_qt::Message& other)
{
    auto* castedOther = dynamic_cast<const LogBatch*>(&other);
    if (castedOther == nullptr) {
        return false;
    }
    return m_pImpl->assign(*castedOther->m_pImpl);
}

LogBatch::MsgIdParamType LogBatch::getIdImpl() const
{
    return m_pImpl->getId();
}

comms::ErrorStatus LogBatch::readImpl(ReadIterator& iter, std::size_t len)
{
    return m_pImpl->read(iter, len);
}

comms::ErrorStatus LogBatch::writeImpl(WriteIterator& iter, std::size_t len) const
{
    return m_pImpl->write(iter, len);
}

bool LogBatch::validImpl() const
{
    return m_pImpl->valid();
}

std::size_t LogBatch::lengthImpl() const
{
    return m_pImpl->length();
}

bool LogBatch::refreshImpl()
{
    return m_pImpl->refresh();
}

} // namespace message

} // namespace cc_ublox

} // namespace cc_tools_qt_plugin
