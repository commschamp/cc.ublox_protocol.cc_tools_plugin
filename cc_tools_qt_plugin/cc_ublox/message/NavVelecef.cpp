// Generated by commsdsl2tools_qt v6.3.2

#include "NavVelecef.h"

#include "cc_tools_qt/ProtocolMessageBase.h"
#include "cc_tools_qt/property/field.h"
#include "cc_tools_qt_plugin/cc_ublox/field/EcefVX.h"
#include "cc_tools_qt_plugin/cc_ublox/field/EcefVY.h"
#include "cc_tools_qt_plugin/cc_ublox/field/EcefVZ.h"
#include "cc_tools_qt_plugin/cc_ublox/field/Itow.h"
#include "cc_tools_qt_plugin/cc_ublox/field/SAcc.h"
#include "cc_tools_qt_plugin/cc_ublox/options/DefaultOptions.h"
#include "cc_ublox/message/NavVelecef.h"

namespace cc_tools_qt_plugin
{

namespace cc_ublox
{

namespace message
{

namespace
{

static QVariantMap createProps_itow(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::NavVelecefFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::Itow;
    auto props = cc_tools_qt_plugin::cc_ublox::field::createProps_itow(Field::name(), serHidden);
    return props;
}

static QVariantMap createProps_ecefVX(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::NavVelecefFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::EcefVX;
    auto props = cc_tools_qt_plugin::cc_ublox::field::createProps_ecefVX(Field::name(), serHidden);
    return props;
}

static QVariantMap createProps_ecefVY(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::NavVelecefFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::EcefVY;
    auto props = cc_tools_qt_plugin::cc_ublox::field::createProps_ecefVY(Field::name(), serHidden);
    return props;
}

static QVariantMap createProps_ecefVZ(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::NavVelecefFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::EcefVZ;
    auto props = cc_tools_qt_plugin::cc_ublox::field::createProps_ecefVZ(Field::name(), serHidden);
    return props;
}

static QVariantMap createProps_sAcc(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::NavVelecefFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::SAcc;
    auto props = cc_tools_qt_plugin::cc_ublox::field::createProps_sAcc(Field::name(), serHidden);
    return props;
}

QVariantList createProps()
{
    QVariantList props;
    props.append(createProps_itow(false));
    props.append(createProps_ecefVX(false));
    props.append(createProps_ecefVY(false));
    props.append(createProps_ecefVZ(false));
    props.append(createProps_sAcc(false));
    return props;
}

} // namespace

class NavVelecefImpl : public
    cc_tools_qt::ProtocolMessageBase<
        ::cc_ublox::message::NavVelecef<cc_tools_qt_plugin::cc_ublox::Message, cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>,
        NavVelecefImpl
    >
{
public:
    NavVelecefImpl() = default;
    NavVelecefImpl(const NavVelecefImpl&) = delete;
    NavVelecefImpl(NavVelecefImpl&&) = delete;
    virtual ~NavVelecefImpl() = default;
    NavVelecefImpl& operator=(const NavVelecefImpl&) = default;
    NavVelecefImpl& operator=(NavVelecefImpl&&) = default;

protected:
    virtual const QVariantList& fieldsPropertiesImpl() const override
    {
        static const QVariantList Props = createProps();
        return Props;
    }
};

NavVelecef::NavVelecef() : m_pImpl(new NavVelecefImpl) {}
NavVelecef::~NavVelecef() = default;

NavVelecef& NavVelecef::operator=(const NavVelecef& other)
{
    *m_pImpl = *other.m_pImpl;
    return *this;
}

NavVelecef& NavVelecef::operator=(NavVelecef&& other)
{
    *m_pImpl = std::move(*other.m_pImpl);
    return *this;
}

NavVelecef::MsgIdParamType NavVelecef::doGetId()
{
    return ::cc_ublox::message::NavVelecef<cc_tools_qt_plugin::cc_ublox::Message, cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::doGetId();
}

const char* NavVelecef::nameImpl() const
{
    return static_cast<const cc_tools_qt::Message*>(m_pImpl.get())->name();
}

const QVariantList& NavVelecef::fieldsPropertiesImpl() const
{
    return m_pImpl->fieldsProperties();
}

void NavVelecef::dispatchImpl(cc_tools_qt::MessageHandler& handler)
{
    static_cast<cc_tools_qt::Message*>(m_pImpl.get())->dispatch(handler);
}

void NavVelecef::resetImpl()
{
    m_pImpl->reset();
}

bool NavVelecef::assignImpl(const cc_tools_qt::Message& other)
{
    auto* castedOther = dynamic_cast<const NavVelecef*>(&other);
    if (castedOther == nullptr) {
        return false;
    }
    return m_pImpl->assign(*castedOther->m_pImpl);
}

NavVelecef::MsgIdParamType NavVelecef::getIdImpl() const
{
    return m_pImpl->getId();
}

comms::ErrorStatus NavVelecef::readImpl(ReadIterator& iter, std::size_t len)
{
    return m_pImpl->read(iter, len);
}

comms::ErrorStatus NavVelecef::writeImpl(WriteIterator& iter, std::size_t len) const
{
    return m_pImpl->write(iter, len);
}

bool NavVelecef::validImpl() const
{
    return m_pImpl->valid();
}

std::size_t NavVelecef::lengthImpl() const
{
    return m_pImpl->length();
}

bool NavVelecef::refreshImpl()
{
    return m_pImpl->refresh();
}

} // namespace message

} // namespace cc_ublox

} // namespace cc_tools_qt_plugin
