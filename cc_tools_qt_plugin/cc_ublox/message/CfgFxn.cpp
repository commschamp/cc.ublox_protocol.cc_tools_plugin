// Generated by commsdsl2tools_qt v6.3.2

#include "CfgFxn.h"

#include "cc_tools_qt/ProtocolMessageBase.h"
#include "cc_tools_qt/property/field.h"
#include "cc_tools_qt_plugin/cc_ublox/field/Res4.h"
#include "cc_tools_qt_plugin/cc_ublox/options/DefaultOptions.h"
#include "cc_ublox/message/CfgFxn.h"

namespace cc_tools_qt_plugin
{

namespace cc_ublox
{

namespace message
{

namespace
{

static QVariantMap createProps_flags(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::CfgFxnFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::Flags;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .add(1U, "sleep")
            .add(3U, "absAlign")
            .add(4U, "onOff")
            .asMap();
}

static QVariantMap createProps_tReacq(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::CfgFxnFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::TReacq;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .asMap();
}

static QVariantMap createProps_tAcq(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::CfgFxnFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::TAcq;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .asMap();
}

static QVariantMap createProps_tReacqOff(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::CfgFxnFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::TReacqOff;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .asMap();
}

static QVariantMap createProps_tAcqOff(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::CfgFxnFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::TAcqOff;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .asMap();
}

static QVariantMap createProps_tOn(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::CfgFxnFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::TOn;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .asMap();
}

static QVariantMap createProps_tOff(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::CfgFxnFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::TOff;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .asMap();
}

static QVariantMap createProps_res(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::CfgFxnFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::Res;
    auto props = cc_tools_qt_plugin::cc_ublox::field::createProps_res4(Field::name(), serHidden);
    return props;
}

static QVariantMap createProps_baseTow(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::CfgFxnFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::BaseTow;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .asMap();
}

QVariantList createProps()
{
    QVariantList props;
    props.append(createProps_flags(false));
    props.append(createProps_tReacq(false));
    props.append(createProps_tAcq(false));
    props.append(createProps_tReacqOff(false));
    props.append(createProps_tAcqOff(false));
    props.append(createProps_tOn(false));
    props.append(createProps_tOff(false));
    props.append(createProps_res(false));
    props.append(createProps_baseTow(false));
    return props;
}

} // namespace

class CfgFxnImpl : public
    cc_tools_qt::ProtocolMessageBase<
        ::cc_ublox::message::CfgFxn<cc_tools_qt_plugin::cc_ublox::Message, cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>,
        CfgFxnImpl
    >
{
public:
    CfgFxnImpl() = default;
    CfgFxnImpl(const CfgFxnImpl&) = delete;
    CfgFxnImpl(CfgFxnImpl&&) = delete;
    virtual ~CfgFxnImpl() = default;
    CfgFxnImpl& operator=(const CfgFxnImpl&) = default;
    CfgFxnImpl& operator=(CfgFxnImpl&&) = default;

protected:
    virtual const QVariantList& fieldsPropertiesImpl() const override
    {
        static const QVariantList Props = createProps();
        return Props;
    }
};

CfgFxn::CfgFxn() : m_pImpl(new CfgFxnImpl) {}
CfgFxn::~CfgFxn() = default;

CfgFxn& CfgFxn::operator=(const CfgFxn& other)
{
    *m_pImpl = *other.m_pImpl;
    return *this;
}

CfgFxn& CfgFxn::operator=(CfgFxn&& other)
{
    *m_pImpl = std::move(*other.m_pImpl);
    return *this;
}

CfgFxn::MsgIdParamType CfgFxn::doGetId()
{
    return ::cc_ublox::message::CfgFxn<cc_tools_qt_plugin::cc_ublox::Message, cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::doGetId();
}

const char* CfgFxn::nameImpl() const
{
    return static_cast<const cc_tools_qt::Message*>(m_pImpl.get())->name();
}

const QVariantList& CfgFxn::fieldsPropertiesImpl() const
{
    return m_pImpl->fieldsProperties();
}

void CfgFxn::dispatchImpl(cc_tools_qt::MessageHandler& handler)
{
    static_cast<cc_tools_qt::Message*>(m_pImpl.get())->dispatch(handler);
}

void CfgFxn::resetImpl()
{
    m_pImpl->reset();
}

bool CfgFxn::assignImpl(const cc_tools_qt::Message& other)
{
    auto* castedOther = dynamic_cast<const CfgFxn*>(&other);
    if (castedOther == nullptr) {
        return false;
    }
    return m_pImpl->assign(*castedOther->m_pImpl);
}

CfgFxn::MsgIdParamType CfgFxn::getIdImpl() const
{
    return m_pImpl->getId();
}

comms::ErrorStatus CfgFxn::readImpl(ReadIterator& iter, std::size_t len)
{
    return m_pImpl->read(iter, len);
}

comms::ErrorStatus CfgFxn::writeImpl(WriteIterator& iter, std::size_t len) const
{
    return m_pImpl->write(iter, len);
}

bool CfgFxn::validImpl() const
{
    return m_pImpl->valid();
}

std::size_t CfgFxn::lengthImpl() const
{
    return m_pImpl->length();
}

bool CfgFxn::refreshImpl()
{
    return m_pImpl->refresh();
}

} // namespace message

} // namespace cc_ublox

} // namespace cc_tools_qt_plugin
