// Generated by commsdsl2tools_qt v6.3.3

#include "CfgMsg.h"

#include "cc_tools_qt/ProtocolMessageBase.h"
#include "cc_tools_qt/property/field.h"
#include "cc_tools_qt_plugin/cc_ublox/field/MsgId.h"
#include "cc_tools_qt_plugin/cc_ublox/options/DefaultOptions.h"
#include "cc_ublox/message/CfgMsg.h"

namespace cc_tools_qt_plugin
{

namespace cc_ublox
{

namespace message
{

namespace
{

static QVariantMap createProps_msgId(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::CfgMsgFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::MsgId;
    auto props = cc_tools_qt_plugin::cc_ublox::field::createProps_msgId(Field::name(), serHidden);
    return props;
}

struct RatesMembers
{
    static QVariantMap createProps_element(bool serHidden)
    {
        static_cast<void>(serHidden);
        using Field = ::cc_ublox::message::CfgMsgFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::RatesMembers::Element;
        return
            cc_tools_qt::property::field::ForField<Field>()
                .name(Field::name())
                .serialisedHidden(serHidden)
                .asMap();
    }
}; // struct RatesMembers

static QVariantMap createProps_rates(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::CfgMsgFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::Rates;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .serialisedHidden()
            .add(RatesMembers::createProps_element(serHidden))
            .appendIndexToElementName()
            .asMap();
}

QVariantList createProps()
{
    QVariantList props;
    props.append(createProps_msgId(false));
    props.append(createProps_rates(false));
    return props;
}

} // namespace

class CfgMsgImpl : public
    cc_tools_qt::ProtocolMessageBase<
        ::cc_ublox::message::CfgMsg<cc_tools_qt_plugin::cc_ublox::Message, cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>,
        CfgMsgImpl
    >
{
public:
    CfgMsgImpl() = default;
    CfgMsgImpl(const CfgMsgImpl&) = delete;
    CfgMsgImpl(CfgMsgImpl&&) = delete;
    virtual ~CfgMsgImpl() = default;
    CfgMsgImpl& operator=(const CfgMsgImpl&) = default;
    CfgMsgImpl& operator=(CfgMsgImpl&&) = default;

protected:
    virtual const QVariantList& fieldsPropertiesImpl() const override
    {
        static const QVariantList Props = createProps();
        return Props;
    }
};

CfgMsg::CfgMsg() : m_pImpl(new CfgMsgImpl) {}
CfgMsg::~CfgMsg() = default;

CfgMsg& CfgMsg::operator=(const CfgMsg& other)
{
    *m_pImpl = *other.m_pImpl;
    return *this;
}

CfgMsg& CfgMsg::operator=(CfgMsg&& other)
{
    *m_pImpl = std::move(*other.m_pImpl);
    return *this;
}

CfgMsg::MsgIdParamType CfgMsg::doGetId()
{
    return ::cc_ublox::message::CfgMsg<cc_tools_qt_plugin::cc_ublox::Message, cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::doGetId();
}

const char* CfgMsg::nameImpl() const
{
    return static_cast<const cc_tools_qt::Message*>(m_pImpl.get())->name();
}

const QVariantList& CfgMsg::fieldsPropertiesImpl() const
{
    return m_pImpl->fieldsProperties();
}

void CfgMsg::dispatchImpl(cc_tools_qt::MessageHandler& handler)
{
    static_cast<cc_tools_qt::Message*>(m_pImpl.get())->dispatch(handler);
}

void CfgMsg::resetImpl()
{
    m_pImpl->reset();
}

bool CfgMsg::assignImpl(const cc_tools_qt::Message& other)
{
    auto* castedOther = dynamic_cast<const CfgMsg*>(&other);
    if (castedOther == nullptr) {
        return false;
    }
    return m_pImpl->assign(*castedOther->m_pImpl);
}

CfgMsg::MsgIdParamType CfgMsg::getIdImpl() const
{
    return m_pImpl->getId();
}

comms::ErrorStatus CfgMsg::readImpl(ReadIterator& iter, std::size_t len)
{
    return m_pImpl->read(iter, len);
}

comms::ErrorStatus CfgMsg::writeImpl(WriteIterator& iter, std::size_t len) const
{
    return m_pImpl->write(iter, len);
}

bool CfgMsg::validImpl() const
{
    return m_pImpl->valid();
}

std::size_t CfgMsg::lengthImpl() const
{
    return m_pImpl->length();
}

bool CfgMsg::refreshImpl()
{
    return m_pImpl->refresh();
}

} // namespace message

} // namespace cc_ublox

} // namespace cc_tools_qt_plugin
