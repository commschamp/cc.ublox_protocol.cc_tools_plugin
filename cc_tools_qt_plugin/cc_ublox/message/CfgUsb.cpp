// Generated by commsdsl2tools_qt v6.3.3

#include "CfgUsb.h"

#include "cc_tools_qt/ProtocolMessageBase.h"
#include "cc_tools_qt/property/field.h"
#include "cc_tools_qt_plugin/cc_ublox/field/Res2.h"
#include "cc_tools_qt_plugin/cc_ublox/options/DefaultOptions.h"
#include "cc_ublox/message/CfgUsb.h"

namespace cc_tools_qt_plugin
{

namespace cc_ublox
{

namespace message
{

namespace
{

static QVariantMap createProps_vendorId(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::CfgUsbFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::VendorId;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .asMap();
}

static QVariantMap createProps_productId(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::CfgUsbFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::ProductId;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .asMap();
}

static QVariantMap createProps_reserved1(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::CfgUsbFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::Reserved1;
    auto props = cc_tools_qt_plugin::cc_ublox::field::createProps_res2(Field::name(), serHidden);
    return props;
}

static QVariantMap createProps_reserved2(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::CfgUsbFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::Reserved2;
    auto props = cc_tools_qt_plugin::cc_ublox::field::createProps_res2(Field::name(), serHidden);
    return props;
}

static QVariantMap createProps_powerConsumption(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::CfgUsbFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::PowerConsumption;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .asMap();
}

static QVariantMap createProps_flags(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::CfgUsbFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::Flags;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .add(0U, "reEnum")
            .add(1U, "powerMode")
            .asMap();
}

static QVariantMap createProps_vendorString(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::CfgUsbFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::VendorString;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .asMap();
}

static QVariantMap createProps_productString(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::CfgUsbFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::ProductString;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .asMap();
}

static QVariantMap createProps_serialNumber(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::CfgUsbFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::SerialNumber;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .asMap();
}

QVariantList createProps()
{
    QVariantList props;
    props.append(createProps_vendorId(false));
    props.append(createProps_productId(false));
    props.append(createProps_reserved1(false));
    props.append(createProps_reserved2(false));
    props.append(createProps_powerConsumption(false));
    props.append(createProps_flags(false));
    props.append(createProps_vendorString(false));
    props.append(createProps_productString(false));
    props.append(createProps_serialNumber(false));
    return props;
}

} // namespace

class CfgUsbImpl : public
    cc_tools_qt::ProtocolMessageBase<
        ::cc_ublox::message::CfgUsb<cc_tools_qt_plugin::cc_ublox::Message, cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>,
        CfgUsbImpl
    >
{
public:
    CfgUsbImpl() = default;
    CfgUsbImpl(const CfgUsbImpl&) = delete;
    CfgUsbImpl(CfgUsbImpl&&) = delete;
    virtual ~CfgUsbImpl() = default;
    CfgUsbImpl& operator=(const CfgUsbImpl&) = default;
    CfgUsbImpl& operator=(CfgUsbImpl&&) = default;

protected:
    virtual const QVariantList& fieldsPropertiesImpl() const override
    {
        static const QVariantList Props = createProps();
        return Props;
    }
};

CfgUsb::CfgUsb() : m_pImpl(new CfgUsbImpl) {}
CfgUsb::~CfgUsb() = default;

CfgUsb& CfgUsb::operator=(const CfgUsb& other)
{
    *m_pImpl = *other.m_pImpl;
    return *this;
}

CfgUsb& CfgUsb::operator=(CfgUsb&& other)
{
    *m_pImpl = std::move(*other.m_pImpl);
    return *this;
}

CfgUsb::MsgIdParamType CfgUsb::doGetId()
{
    return ::cc_ublox::message::CfgUsb<cc_tools_qt_plugin::cc_ublox::Message, cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::doGetId();
}

const char* CfgUsb::nameImpl() const
{
    return static_cast<const cc_tools_qt::Message*>(m_pImpl.get())->name();
}

const QVariantList& CfgUsb::fieldsPropertiesImpl() const
{
    return m_pImpl->fieldsProperties();
}

void CfgUsb::dispatchImpl(cc_tools_qt::MessageHandler& handler)
{
    static_cast<cc_tools_qt::Message*>(m_pImpl.get())->dispatch(handler);
}

void CfgUsb::resetImpl()
{
    m_pImpl->reset();
}

bool CfgUsb::assignImpl(const cc_tools_qt::Message& other)
{
    auto* castedOther = dynamic_cast<const CfgUsb*>(&other);
    if (castedOther == nullptr) {
        return false;
    }
    return m_pImpl->assign(*castedOther->m_pImpl);
}

CfgUsb::MsgIdParamType CfgUsb::getIdImpl() const
{
    return m_pImpl->getId();
}

comms::ErrorStatus CfgUsb::readImpl(ReadIterator& iter, std::size_t len)
{
    return m_pImpl->read(iter, len);
}

comms::ErrorStatus CfgUsb::writeImpl(WriteIterator& iter, std::size_t len) const
{
    return m_pImpl->write(iter, len);
}

bool CfgUsb::validImpl() const
{
    return m_pImpl->valid();
}

std::size_t CfgUsb::lengthImpl() const
{
    return m_pImpl->length();
}

bool CfgUsb::refreshImpl()
{
    return m_pImpl->refresh();
}

} // namespace message

} // namespace cc_ublox

} // namespace cc_tools_qt_plugin
