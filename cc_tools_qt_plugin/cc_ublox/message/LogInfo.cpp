// Generated by commsdsl2tools_qt v6.3.4

#include "LogInfo.h"

#include "cc_tools_qt/ProtocolMessageBase.h"
#include "cc_tools_qt/property/field.h"
#include "cc_tools_qt_plugin/cc_ublox/field/Day.h"
#include "cc_tools_qt_plugin/cc_ublox/field/Hour.h"
#include "cc_tools_qt_plugin/cc_ublox/field/Min.h"
#include "cc_tools_qt_plugin/cc_ublox/field/Month.h"
#include "cc_tools_qt_plugin/cc_ublox/field/Res1.h"
#include "cc_tools_qt_plugin/cc_ublox/field/Res3.h"
#include "cc_tools_qt_plugin/cc_ublox/field/Res8.h"
#include "cc_tools_qt_plugin/cc_ublox/field/Sec.h"
#include "cc_tools_qt_plugin/cc_ublox/field/Year.h"
#include "cc_tools_qt_plugin/cc_ublox/options/DefaultOptions.h"
#include "cc_ublox/message/LogInfo.h"

namespace cc_tools_qt_plugin
{

namespace cc_ublox
{

namespace message
{

namespace
{

static QVariantMap createProps_version(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::LogInfoFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::Version;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .asMap();
}

static QVariantMap createProps_reserved1(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::LogInfoFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::Reserved1;
    auto props = cc_tools_qt_plugin::cc_ublox::field::createProps_res3(Field::name(), serHidden);
    return props;
}

static QVariantMap createProps_filestoreCapacity(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::LogInfoFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::FilestoreCapacity;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .asMap();
}

static QVariantMap createProps_reserved2(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::LogInfoFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::Reserved2;
    auto props = cc_tools_qt_plugin::cc_ublox::field::createProps_res8(Field::name(), serHidden);
    return props;
}

static QVariantMap createProps_currentMaxLogSize(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::LogInfoFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::CurrentMaxLogSize;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .asMap();
}

static QVariantMap createProps_currentLogSize(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::LogInfoFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::CurrentLogSize;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .asMap();
}

static QVariantMap createProps_entryCount(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::LogInfoFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::EntryCount;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .asMap();
}

static QVariantMap createProps_oldestYear(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::LogInfoFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::OldestYear;
    auto props = cc_tools_qt_plugin::cc_ublox::field::createProps_year(Field::name(), serHidden);
    return props;
}

static QVariantMap createProps_oldestMonth(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::LogInfoFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::OldestMonth;
    auto props = cc_tools_qt_plugin::cc_ublox::field::createProps_month(Field::name(), serHidden);
    return props;
}

static QVariantMap createProps_oldestDay(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::LogInfoFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::OldestDay;
    auto props = cc_tools_qt_plugin::cc_ublox::field::createProps_day(Field::name(), serHidden);
    return props;
}

static QVariantMap createProps_oldestHour(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::LogInfoFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::OldestHour;
    auto props = cc_tools_qt_plugin::cc_ublox::field::createProps_hour(Field::name(), serHidden);
    return props;
}

static QVariantMap createProps_oldestMinute(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::LogInfoFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::OldestMinute;
    auto props = cc_tools_qt_plugin::cc_ublox::field::createProps_min(Field::name(), serHidden);
    return props;
}

static QVariantMap createProps_oldestSecond(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::LogInfoFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::OldestSecond;
    auto props = cc_tools_qt_plugin::cc_ublox::field::createProps_sec(Field::name(), serHidden);
    return props;
}

static QVariantMap createProps_reserved3(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::LogInfoFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::Reserved3;
    auto props = cc_tools_qt_plugin::cc_ublox::field::createProps_res1(Field::name(), serHidden);
    return props;
}

static QVariantMap createProps_newestYear(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::LogInfoFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::NewestYear;
    auto props = cc_tools_qt_plugin::cc_ublox::field::createProps_year(Field::name(), serHidden);
    return props;
}

static QVariantMap createProps_newestMonth(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::LogInfoFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::NewestMonth;
    auto props = cc_tools_qt_plugin::cc_ublox::field::createProps_month(Field::name(), serHidden);
    return props;
}

static QVariantMap createProps_newestDay(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::LogInfoFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::NewestDay;
    auto props = cc_tools_qt_plugin::cc_ublox::field::createProps_day(Field::name(), serHidden);
    return props;
}

static QVariantMap createProps_newestHour(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::LogInfoFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::NewestHour;
    auto props = cc_tools_qt_plugin::cc_ublox::field::createProps_hour(Field::name(), serHidden);
    return props;
}

static QVariantMap createProps_newestMinute(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::LogInfoFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::NewestMinute;
    auto props = cc_tools_qt_plugin::cc_ublox::field::createProps_min(Field::name(), serHidden);
    return props;
}

static QVariantMap createProps_newestSecond(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::LogInfoFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::NewestSecond;
    auto props = cc_tools_qt_plugin::cc_ublox::field::createProps_sec(Field::name(), serHidden);
    return props;
}

static QVariantMap createProps_reserved4(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::LogInfoFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::Reserved4;
    auto props = cc_tools_qt_plugin::cc_ublox::field::createProps_res1(Field::name(), serHidden);
    return props;
}

static QVariantMap createProps_status(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::LogInfoFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::Status;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .add(3U, "recording")
            .add(4U, "inactive")
            .add(5U, "circular")
            .asMap();
}

static QVariantMap createProps_reserved5(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::LogInfoFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::Reserved5;
    auto props = cc_tools_qt_plugin::cc_ublox::field::createProps_res3(Field::name(), serHidden);
    return props;
}

QVariantList createProps()
{
    QVariantList props;
    props.append(createProps_version(false));
    props.append(createProps_reserved1(false));
    props.append(createProps_filestoreCapacity(false));
    props.append(createProps_reserved2(false));
    props.append(createProps_currentMaxLogSize(false));
    props.append(createProps_currentLogSize(false));
    props.append(createProps_entryCount(false));
    props.append(createProps_oldestYear(false));
    props.append(createProps_oldestMonth(false));
    props.append(createProps_oldestDay(false));
    props.append(createProps_oldestHour(false));
    props.append(createProps_oldestMinute(false));
    props.append(createProps_oldestSecond(false));
    props.append(createProps_reserved3(false));
    props.append(createProps_newestYear(false));
    props.append(createProps_newestMonth(false));
    props.append(createProps_newestDay(false));
    props.append(createProps_newestHour(false));
    props.append(createProps_newestMinute(false));
    props.append(createProps_newestSecond(false));
    props.append(createProps_reserved4(false));
    props.append(createProps_status(false));
    props.append(createProps_reserved5(false));
    return props;
}

} // namespace

class LogInfoImpl : public
    cc_tools_qt::ProtocolMessageBase<
        ::cc_ublox::message::LogInfo<cc_tools_qt_plugin::cc_ublox::Message, cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>,
        LogInfoImpl
    >
{
public:
    LogInfoImpl() = default;
    LogInfoImpl(const LogInfoImpl&) = delete;
    LogInfoImpl(LogInfoImpl&&) = delete;
    virtual ~LogInfoImpl() = default;
    LogInfoImpl& operator=(const LogInfoImpl&) = default;
    LogInfoImpl& operator=(LogInfoImpl&&) = default;

protected:
    virtual const QVariantList& fieldsPropertiesImpl() const override
    {
        static const QVariantList Props = createProps();
        return Props;
    }
};

LogInfo::LogInfo() : m_pImpl(new LogInfoImpl) {}
LogInfo::~LogInfo() = default;

LogInfo& LogInfo::operator=(const LogInfo& other)
{
    *m_pImpl = *other.m_pImpl;
    return *this;
}

LogInfo& LogInfo::operator=(LogInfo&& other)
{
    *m_pImpl = std::move(*other.m_pImpl);
    return *this;
}

LogInfo::MsgIdParamType LogInfo::doGetId()
{
    return ::cc_ublox::message::LogInfo<cc_tools_qt_plugin::cc_ublox::Message, cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::doGetId();
}

const char* LogInfo::nameImpl() const
{
    return static_cast<const cc_tools_qt::Message*>(m_pImpl.get())->name();
}

const QVariantList& LogInfo::fieldsPropertiesImpl() const
{
    return m_pImpl->fieldsProperties();
}

void LogInfo::dispatchImpl(cc_tools_qt::MessageHandler& handler)
{
    static_cast<cc_tools_qt::Message*>(m_pImpl.get())->dispatch(handler);
}

void LogInfo::resetImpl()
{
    m_pImpl->reset();
}

bool LogInfo::assignImpl(const cc_tools_qt::Message& other)
{
    auto* castedOther = dynamic_cast<const LogInfo*>(&other);
    if (castedOther == nullptr) {
        return false;
    }
    return m_pImpl->assign(*castedOther->m_pImpl);
}

LogInfo::MsgIdParamType LogInfo::getIdImpl() const
{
    return m_pImpl->getId();
}

comms::ErrorStatus LogInfo::readImpl(ReadIterator& iter, std::size_t len)
{
    return m_pImpl->read(iter, len);
}

comms::ErrorStatus LogInfo::writeImpl(WriteIterator& iter, std::size_t len) const
{
    return m_pImpl->write(iter, len);
}

bool LogInfo::validImpl() const
{
    return m_pImpl->valid();
}

std::size_t LogInfo::lengthImpl() const
{
    return m_pImpl->length();
}

bool LogInfo::refreshImpl()
{
    return m_pImpl->refresh();
}

} // namespace message

} // namespace cc_ublox

} // namespace cc_tools_qt_plugin
