// Generated by commsdsl2tools_qt v6.3.3

#include "NavPosecef.h"

#include "cc_tools_qt/ProtocolMessageBase.h"
#include "cc_tools_qt/property/field.h"
#include "cc_tools_qt_plugin/cc_ublox/field/EcefX.h"
#include "cc_tools_qt_plugin/cc_ublox/field/EcefY.h"
#include "cc_tools_qt_plugin/cc_ublox/field/EcefZ.h"
#include "cc_tools_qt_plugin/cc_ublox/field/Itow.h"
#include "cc_tools_qt_plugin/cc_ublox/field/PAcc.h"
#include "cc_tools_qt_plugin/cc_ublox/options/DefaultOptions.h"
#include "cc_ublox/message/NavPosecef.h"

namespace cc_tools_qt_plugin
{

namespace cc_ublox
{

namespace message
{

namespace
{

static QVariantMap createProps_itow(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::NavPosecefFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::Itow;
    auto props = cc_tools_qt_plugin::cc_ublox::field::createProps_itow(Field::name(), serHidden);
    return props;
}

static QVariantMap createProps_ecefX(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::NavPosecefFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::EcefX;
    auto props = cc_tools_qt_plugin::cc_ublox::field::createProps_ecefX(Field::name(), serHidden);
    return props;
}

static QVariantMap createProps_ecefY(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::NavPosecefFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::EcefY;
    auto props = cc_tools_qt_plugin::cc_ublox::field::createProps_ecefY(Field::name(), serHidden);
    return props;
}

static QVariantMap createProps_ecefZ(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::NavPosecefFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::EcefZ;
    auto props = cc_tools_qt_plugin::cc_ublox::field::createProps_ecefZ(Field::name(), serHidden);
    return props;
}

static QVariantMap createProps_pAcc(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::NavPosecefFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::PAcc;
    auto props = cc_tools_qt_plugin::cc_ublox::field::createProps_pAcc(Field::name(), serHidden);
    return props;
}

QVariantList createProps()
{
    QVariantList props;
    props.append(createProps_itow(false));
    props.append(createProps_ecefX(false));
    props.append(createProps_ecefY(false));
    props.append(createProps_ecefZ(false));
    props.append(createProps_pAcc(false));
    return props;
}

} // namespace

class NavPosecefImpl : public
    cc_tools_qt::ProtocolMessageBase<
        ::cc_ublox::message::NavPosecef<cc_tools_qt_plugin::cc_ublox::Message, cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>,
        NavPosecefImpl
    >
{
public:
    NavPosecefImpl() = default;
    NavPosecefImpl(const NavPosecefImpl&) = delete;
    NavPosecefImpl(NavPosecefImpl&&) = delete;
    virtual ~NavPosecefImpl() = default;
    NavPosecefImpl& operator=(const NavPosecefImpl&) = default;
    NavPosecefImpl& operator=(NavPosecefImpl&&) = default;

protected:
    virtual const QVariantList& fieldsPropertiesImpl() const override
    {
        static const QVariantList Props = createProps();
        return Props;
    }
};

NavPosecef::NavPosecef() : m_pImpl(new NavPosecefImpl) {}
NavPosecef::~NavPosecef() = default;

NavPosecef& NavPosecef::operator=(const NavPosecef& other)
{
    *m_pImpl = *other.m_pImpl;
    return *this;
}

NavPosecef& NavPosecef::operator=(NavPosecef&& other)
{
    *m_pImpl = std::move(*other.m_pImpl);
    return *this;
}

NavPosecef::MsgIdParamType NavPosecef::doGetId()
{
    return ::cc_ublox::message::NavPosecef<cc_tools_qt_plugin::cc_ublox::Message, cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::doGetId();
}

const char* NavPosecef::nameImpl() const
{
    return static_cast<const cc_tools_qt::Message*>(m_pImpl.get())->name();
}

const QVariantList& NavPosecef::fieldsPropertiesImpl() const
{
    return m_pImpl->fieldsProperties();
}

void NavPosecef::dispatchImpl(cc_tools_qt::MessageHandler& handler)
{
    static_cast<cc_tools_qt::Message*>(m_pImpl.get())->dispatch(handler);
}

void NavPosecef::resetImpl()
{
    m_pImpl->reset();
}

bool NavPosecef::assignImpl(const cc_tools_qt::Message& other)
{
    auto* castedOther = dynamic_cast<const NavPosecef*>(&other);
    if (castedOther == nullptr) {
        return false;
    }
    return m_pImpl->assign(*castedOther->m_pImpl);
}

NavPosecef::MsgIdParamType NavPosecef::getIdImpl() const
{
    return m_pImpl->getId();
}

comms::ErrorStatus NavPosecef::readImpl(ReadIterator& iter, std::size_t len)
{
    return m_pImpl->read(iter, len);
}

comms::ErrorStatus NavPosecef::writeImpl(WriteIterator& iter, std::size_t len) const
{
    return m_pImpl->write(iter, len);
}

bool NavPosecef::validImpl() const
{
    return m_pImpl->valid();
}

std::size_t NavPosecef::lengthImpl() const
{
    return m_pImpl->length();
}

bool NavPosecef::refreshImpl()
{
    return m_pImpl->refresh();
}

} // namespace message

} // namespace cc_ublox

} // namespace cc_tools_qt_plugin
