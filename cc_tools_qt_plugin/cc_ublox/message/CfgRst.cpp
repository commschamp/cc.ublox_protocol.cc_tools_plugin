// Generated by commsdsl2tools_qt v6.3.0

#include "CfgRst.h"

#include "cc_tools_qt/ProtocolMessageBase.h"
#include "cc_tools_qt/property/field.h"
#include "cc_tools_qt_plugin/cc_ublox/field/Res1.h"
#include "cc_tools_qt_plugin/cc_ublox/options/DefaultOptions.h"
#include "cc_ublox/message/CfgRst.h"

namespace cc_tools_qt_plugin
{

namespace cc_ublox
{

namespace message
{

namespace
{

static QVariantMap createProps_navBbrMask(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::CfgRstFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::NavBbrMask;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .add(0U, "eph")
            .add(1U, "alm")
            .add(2U, "health")
            .add(3U, "klob")
            .add(4U, "pos")
            .add(5U, "clkd")
            .add(6U, "osc")
            .add(7U, "utc")
            .add(8U, "rtc")
            .add(15U, "aop")
            .asMap();
}

static QVariantMap createProps_resetMode(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::CfgRstFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::ResetMode;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .add("Hardware", 0)
            .add("Software", 1)
            .add("Software (GNSS only)", 2)
            .add("Hardware (after shutdown)", 4)
            .add("GNSS stop", 8)
            .add("GNSS start", 9)
            .asMap();
}

static QVariantMap createProps_reserved1(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::CfgRstFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::Reserved1;
    auto props = cc_tools_qt_plugin::cc_ublox::field::createProps_res1(Field::name(), serHidden);
    return props;
}

QVariantList createProps()
{
    QVariantList props;
    props.append(createProps_navBbrMask(false));
    props.append(createProps_resetMode(false));
    props.append(createProps_reserved1(false));
    return props;
}

} // namespace

class CfgRstImpl : public
    cc_tools_qt::ProtocolMessageBase<
        ::cc_ublox::message::CfgRst<cc_tools_qt_plugin::cc_ublox::Message, cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>,
        CfgRstImpl
    >
{
public:
    CfgRstImpl() = default;
    CfgRstImpl(const CfgRstImpl&) = delete;
    CfgRstImpl(CfgRstImpl&&) = delete;
    virtual ~CfgRstImpl() = default;
    CfgRstImpl& operator=(const CfgRstImpl&) = default;
    CfgRstImpl& operator=(CfgRstImpl&&) = default;

protected:
    virtual const QVariantList& fieldsPropertiesImpl() const override
    {
        static const QVariantList Props = createProps();
        return Props;
    }
};

CfgRst::CfgRst() : m_pImpl(new CfgRstImpl) {}
CfgRst::~CfgRst() = default;

CfgRst& CfgRst::operator=(const CfgRst& other)
{
    *m_pImpl = *other.m_pImpl;
    return *this;
}

CfgRst& CfgRst::operator=(CfgRst&& other)
{
    *m_pImpl = std::move(*other.m_pImpl);
    return *this;
}

CfgRst::MsgIdParamType CfgRst::doGetId()
{
    return ::cc_ublox::message::CfgRst<cc_tools_qt_plugin::cc_ublox::Message, cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::doGetId();
}

const char* CfgRst::nameImpl() const
{
    return static_cast<const cc_tools_qt::Message*>(m_pImpl.get())->name();
}

const QVariantList& CfgRst::fieldsPropertiesImpl() const
{
    return m_pImpl->fieldsProperties();
}

void CfgRst::dispatchImpl(cc_tools_qt::MessageHandler& handler)
{
    static_cast<cc_tools_qt::Message*>(m_pImpl.get())->dispatch(handler);
}

void CfgRst::resetImpl()
{
    m_pImpl->reset();
}

bool CfgRst::assignImpl(const cc_tools_qt::Message& other)
{
    auto* castedOther = dynamic_cast<const CfgRst*>(&other);
    if (castedOther == nullptr) {
        return false;
    }
    return m_pImpl->assign(*castedOther->m_pImpl);
}

CfgRst::MsgIdParamType CfgRst::getIdImpl() const
{
    return m_pImpl->getId();
}

comms::ErrorStatus CfgRst::readImpl(ReadIterator& iter, std::size_t len)
{
    return m_pImpl->read(iter, len);
}

comms::ErrorStatus CfgRst::writeImpl(WriteIterator& iter, std::size_t len) const
{
    return m_pImpl->write(iter, len);
}

bool CfgRst::validImpl() const
{
    return m_pImpl->valid();
}

std::size_t CfgRst::lengthImpl() const
{
    return m_pImpl->length();
}

bool CfgRst::refreshImpl()
{
    return m_pImpl->refresh();
}

} // namespace message

} // namespace cc_ublox

} // namespace cc_tools_qt_plugin
