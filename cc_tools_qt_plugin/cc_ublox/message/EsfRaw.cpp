// Generated by commsdsl2tools_qt v6.3.2

#include "EsfRaw.h"

#include "cc_tools_qt/ProtocolMessageBase.h"
#include "cc_tools_qt/property/field.h"
#include "cc_tools_qt_plugin/cc_ublox/field/Res4.h"
#include "cc_tools_qt_plugin/cc_ublox/options/DefaultOptions.h"
#include "cc_ublox/message/EsfRaw.h"

namespace cc_tools_qt_plugin
{

namespace cc_ublox
{

namespace message
{

namespace
{

static QVariantMap createProps_reserved1(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::EsfRawFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::Reserved1;
    auto props = cc_tools_qt_plugin::cc_ublox::field::createProps_res4(Field::name(), serHidden);
    return props;
}

struct DataMembers
{
    struct ElementMembers
    {
        static QVariantMap createProps_dataField(bool serHidden)
        {
            static_cast<void>(serHidden);
            using Field = ::cc_ublox::message::EsfRawFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::DataMembers::ElementMembers::DataField;
            return
                cc_tools_qt::property::field::ForField<Field>()
                    .name(Field::name())
                    .serialisedHidden(serHidden)
                    .asMap();
        }

        static QVariantMap createProps_dataType(bool serHidden)
        {
            static_cast<void>(serHidden);
            using Field = ::cc_ublox::message::EsfRawFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::DataMembers::ElementMembers::DataType;
            return
                cc_tools_qt::property::field::ForField<Field>()
                    .name(Field::name())
                    .serialisedHidden(serHidden)
                    .asMap();
        }

        static QVariantMap createProps_sTtag(bool serHidden)
        {
            static_cast<void>(serHidden);
            using Field = ::cc_ublox::message::EsfRawFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::DataMembers::ElementMembers::STtag;
            return
                cc_tools_qt::property::field::ForField<Field>()
                    .name(Field::name())
                    .serialisedHidden(serHidden)
                    .asMap();
        }
    }; // struct ElementMembers

    static QVariantMap createProps_element(bool serHidden)
    {
        static_cast<void>(serHidden);
        using Field = ::cc_ublox::message::EsfRawFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::DataMembers::Element;
        return
            cc_tools_qt::property::field::ForField<Field>()
                .name(Field::name())
                .serialisedHidden(serHidden)
                .add(ElementMembers::createProps_dataField(serHidden))
                .add(ElementMembers::createProps_dataType(serHidden))
                .add(ElementMembers::createProps_sTtag(serHidden))
                .serialisedHidden()
                .asMap();
    }
}; // struct DataMembers

static QVariantMap createProps_data(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::EsfRawFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::Data;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .serialisedHidden()
            .add(DataMembers::createProps_element(serHidden))
            .appendIndexToElementName()
            .asMap();
}

QVariantList createProps()
{
    QVariantList props;
    props.append(createProps_reserved1(false));
    props.append(createProps_data(false));
    return props;
}

} // namespace

class EsfRawImpl : public
    cc_tools_qt::ProtocolMessageBase<
        ::cc_ublox::message::EsfRaw<cc_tools_qt_plugin::cc_ublox::Message, cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>,
        EsfRawImpl
    >
{
public:
    EsfRawImpl() = default;
    EsfRawImpl(const EsfRawImpl&) = delete;
    EsfRawImpl(EsfRawImpl&&) = delete;
    virtual ~EsfRawImpl() = default;
    EsfRawImpl& operator=(const EsfRawImpl&) = default;
    EsfRawImpl& operator=(EsfRawImpl&&) = default;

protected:
    virtual const QVariantList& fieldsPropertiesImpl() const override
    {
        static const QVariantList Props = createProps();
        return Props;
    }
};

EsfRaw::EsfRaw() : m_pImpl(new EsfRawImpl) {}
EsfRaw::~EsfRaw() = default;

EsfRaw& EsfRaw::operator=(const EsfRaw& other)
{
    *m_pImpl = *other.m_pImpl;
    return *this;
}

EsfRaw& EsfRaw::operator=(EsfRaw&& other)
{
    *m_pImpl = std::move(*other.m_pImpl);
    return *this;
}

EsfRaw::MsgIdParamType EsfRaw::doGetId()
{
    return ::cc_ublox::message::EsfRaw<cc_tools_qt_plugin::cc_ublox::Message, cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::doGetId();
}

const char* EsfRaw::nameImpl() const
{
    return static_cast<const cc_tools_qt::Message*>(m_pImpl.get())->name();
}

const QVariantList& EsfRaw::fieldsPropertiesImpl() const
{
    return m_pImpl->fieldsProperties();
}

void EsfRaw::dispatchImpl(cc_tools_qt::MessageHandler& handler)
{
    static_cast<cc_tools_qt::Message*>(m_pImpl.get())->dispatch(handler);
}

void EsfRaw::resetImpl()
{
    m_pImpl->reset();
}

bool EsfRaw::assignImpl(const cc_tools_qt::Message& other)
{
    auto* castedOther = dynamic_cast<const EsfRaw*>(&other);
    if (castedOther == nullptr) {
        return false;
    }
    return m_pImpl->assign(*castedOther->m_pImpl);
}

EsfRaw::MsgIdParamType EsfRaw::getIdImpl() const
{
    return m_pImpl->getId();
}

comms::ErrorStatus EsfRaw::readImpl(ReadIterator& iter, std::size_t len)
{
    return m_pImpl->read(iter, len);
}

comms::ErrorStatus EsfRaw::writeImpl(WriteIterator& iter, std::size_t len) const
{
    return m_pImpl->write(iter, len);
}

bool EsfRaw::validImpl() const
{
    return m_pImpl->valid();
}

std::size_t EsfRaw::lengthImpl() const
{
    return m_pImpl->length();
}

bool EsfRaw::refreshImpl()
{
    return m_pImpl->refresh();
}

} // namespace message

} // namespace cc_ublox

} // namespace cc_tools_qt_plugin
