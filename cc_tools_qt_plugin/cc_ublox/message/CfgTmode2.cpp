// Generated by commsdsl2tools_qt v6.3.4

#include "CfgTmode2.h"

#include "cc_tools_qt/ProtocolMessageBase.h"
#include "cc_tools_qt/property/field.h"
#include "cc_tools_qt_plugin/cc_ublox/field/Res1.h"
#include "cc_tools_qt_plugin/cc_ublox/options/DefaultOptions.h"
#include "cc_ublox/message/CfgTmode2.h"

namespace cc_tools_qt_plugin
{

namespace cc_ublox
{

namespace message
{

namespace
{

static QVariantMap createProps_timeMode(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::CfgTmode2Fields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::TimeMode;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .add("Disabled", 0)
            .add("Survey In", 1)
            .add("Fixed Mode", 2)
            .asMap();
}

static QVariantMap createProps_reserved1(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::CfgTmode2Fields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::Reserved1;
    auto props = cc_tools_qt_plugin::cc_ublox::field::createProps_res1(Field::name(), serHidden);
    return props;
}

static QVariantMap createProps_flags(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::CfgTmode2Fields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::Flags;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .add(0U, "lla")
            .add(1U, "altInv")
            .asMap();
}

struct EcefXMembers
{
    static QVariantMap createProps_ecefX(bool serHidden)
    {
        static_cast<void>(serHidden);
        using Field = ::cc_ublox::message::CfgTmode2Fields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::EcefXMembers::EcefX;
        return
            cc_tools_qt::property::field::ForField<Field>()
                .name(Field::name())
                .serialisedHidden(serHidden)
                .asMap();
    }
}; // struct EcefXMembers

static QVariantMap createProps_ecefX(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::CfgTmode2Fields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::EcefX;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .uncheckable()
            .field(EcefXMembers::createProps_ecefX(serHidden))
            .asMap();
}

struct LatMembers
{
    static QVariantMap createProps_lat(bool serHidden)
    {
        static_cast<void>(serHidden);
        using Field = ::cc_ublox::message::CfgTmode2Fields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::LatMembers::Lat;
        return
            cc_tools_qt::property::field::ForField<Field>()
                .name(Field::name())
                .serialisedHidden(serHidden)
                .scaledDecimals(7U)
                .asMap();
    }
}; // struct LatMembers

static QVariantMap createProps_lat(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::CfgTmode2Fields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::Lat;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .uncheckable()
            .field(LatMembers::createProps_lat(serHidden))
            .asMap();
}

struct EcefYMembers
{
    static QVariantMap createProps_ecefY(bool serHidden)
    {
        static_cast<void>(serHidden);
        using Field = ::cc_ublox::message::CfgTmode2Fields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::EcefYMembers::EcefY;
        return
            cc_tools_qt::property::field::ForField<Field>()
                .name(Field::name())
                .serialisedHidden(serHidden)
                .asMap();
    }
}; // struct EcefYMembers

static QVariantMap createProps_ecefY(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::CfgTmode2Fields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::EcefY;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .uncheckable()
            .field(EcefYMembers::createProps_ecefY(serHidden))
            .asMap();
}

struct LonMembers
{
    static QVariantMap createProps_lon(bool serHidden)
    {
        static_cast<void>(serHidden);
        using Field = ::cc_ublox::message::CfgTmode2Fields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::LonMembers::Lon;
        return
            cc_tools_qt::property::field::ForField<Field>()
                .name(Field::name())
                .serialisedHidden(serHidden)
                .scaledDecimals(7U)
                .asMap();
    }
}; // struct LonMembers

static QVariantMap createProps_lon(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::CfgTmode2Fields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::Lon;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .uncheckable()
            .field(LonMembers::createProps_lon(serHidden))
            .asMap();
}

struct EcefZMembers
{
    static QVariantMap createProps_ecefZ(bool serHidden)
    {
        static_cast<void>(serHidden);
        using Field = ::cc_ublox::message::CfgTmode2Fields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::EcefZMembers::EcefZ;
        return
            cc_tools_qt::property::field::ForField<Field>()
                .name(Field::name())
                .serialisedHidden(serHidden)
                .asMap();
    }
}; // struct EcefZMembers

static QVariantMap createProps_ecefZ(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::CfgTmode2Fields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::EcefZ;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .uncheckable()
            .field(EcefZMembers::createProps_ecefZ(serHidden))
            .asMap();
}

struct AltMembers
{
    static QVariantMap createProps_alt(bool serHidden)
    {
        static_cast<void>(serHidden);
        using Field = ::cc_ublox::message::CfgTmode2Fields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::AltMembers::Alt;
        return
            cc_tools_qt::property::field::ForField<Field>()
                .name(Field::name())
                .serialisedHidden(serHidden)
                .asMap();
    }
}; // struct AltMembers

static QVariantMap createProps_alt(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::CfgTmode2Fields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::Alt;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .uncheckable()
            .field(AltMembers::createProps_alt(serHidden))
            .asMap();
}

static QVariantMap createProps_fixedPosAcc(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::CfgTmode2Fields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::FixedPosAcc;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .asMap();
}

static QVariantMap createProps_svinMinDur(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::CfgTmode2Fields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::SvinMinDur;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .asMap();
}

static QVariantMap createProps_svinVarLimit(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::CfgTmode2Fields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::SvinVarLimit;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .asMap();
}

QVariantList createProps()
{
    QVariantList props;
    props.append(createProps_timeMode(false));
    props.append(createProps_reserved1(false));
    props.append(createProps_flags(false));
    props.append(createProps_ecefX(false));
    props.append(createProps_lat(false));
    props.append(createProps_ecefY(false));
    props.append(createProps_lon(false));
    props.append(createProps_ecefZ(false));
    props.append(createProps_alt(false));
    props.append(createProps_fixedPosAcc(false));
    props.append(createProps_svinMinDur(false));
    props.append(createProps_svinVarLimit(false));
    return props;
}

} // namespace

class CfgTmode2Impl : public
    cc_tools_qt::ProtocolMessageBase<
        ::cc_ublox::message::CfgTmode2<cc_tools_qt_plugin::cc_ublox::Message, cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>,
        CfgTmode2Impl
    >
{
public:
    CfgTmode2Impl() = default;
    CfgTmode2Impl(const CfgTmode2Impl&) = delete;
    CfgTmode2Impl(CfgTmode2Impl&&) = delete;
    virtual ~CfgTmode2Impl() = default;
    CfgTmode2Impl& operator=(const CfgTmode2Impl&) = default;
    CfgTmode2Impl& operator=(CfgTmode2Impl&&) = default;

protected:
    virtual const QVariantList& fieldsPropertiesImpl() const override
    {
        static const QVariantList Props = createProps();
        return Props;
    }
};

CfgTmode2::CfgTmode2() : m_pImpl(new CfgTmode2Impl) {}
CfgTmode2::~CfgTmode2() = default;

CfgTmode2& CfgTmode2::operator=(const CfgTmode2& other)
{
    *m_pImpl = *other.m_pImpl;
    return *this;
}

CfgTmode2& CfgTmode2::operator=(CfgTmode2&& other)
{
    *m_pImpl = std::move(*other.m_pImpl);
    return *this;
}

CfgTmode2::MsgIdParamType CfgTmode2::doGetId()
{
    return ::cc_ublox::message::CfgTmode2<cc_tools_qt_plugin::cc_ublox::Message, cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::doGetId();
}

const char* CfgTmode2::nameImpl() const
{
    return static_cast<const cc_tools_qt::Message*>(m_pImpl.get())->name();
}

const QVariantList& CfgTmode2::fieldsPropertiesImpl() const
{
    return m_pImpl->fieldsProperties();
}

void CfgTmode2::dispatchImpl(cc_tools_qt::MessageHandler& handler)
{
    static_cast<cc_tools_qt::Message*>(m_pImpl.get())->dispatch(handler);
}

void CfgTmode2::resetImpl()
{
    m_pImpl->reset();
}

bool CfgTmode2::assignImpl(const cc_tools_qt::Message& other)
{
    auto* castedOther = dynamic_cast<const CfgTmode2*>(&other);
    if (castedOther == nullptr) {
        return false;
    }
    return m_pImpl->assign(*castedOther->m_pImpl);
}

CfgTmode2::MsgIdParamType CfgTmode2::getIdImpl() const
{
    return m_pImpl->getId();
}

comms::ErrorStatus CfgTmode2::readImpl(ReadIterator& iter, std::size_t len)
{
    return m_pImpl->read(iter, len);
}

comms::ErrorStatus CfgTmode2::writeImpl(WriteIterator& iter, std::size_t len) const
{
    return m_pImpl->write(iter, len);
}

bool CfgTmode2::validImpl() const
{
    return m_pImpl->valid();
}

std::size_t CfgTmode2::lengthImpl() const
{
    return m_pImpl->length();
}

bool CfgTmode2::refreshImpl()
{
    return m_pImpl->refresh();
}

} // namespace message

} // namespace cc_ublox

} // namespace cc_tools_qt_plugin
