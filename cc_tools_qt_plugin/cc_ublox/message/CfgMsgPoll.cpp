// Generated by commsdsl2tools_qt v6.3.4

#include "CfgMsgPoll.h"

#include "cc_tools_qt/ProtocolMessageBase.h"
#include "cc_tools_qt/property/field.h"
#include "cc_tools_qt_plugin/cc_ublox/field/MsgId.h"
#include "cc_tools_qt_plugin/cc_ublox/options/DefaultOptions.h"
#include "cc_ublox/message/CfgMsgPoll.h"

namespace cc_tools_qt_plugin
{

namespace cc_ublox
{

namespace message
{

namespace
{

static QVariantMap createProps_msgId(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::CfgMsgPollFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::MsgId;
    auto props = cc_tools_qt_plugin::cc_ublox::field::createProps_msgId(Field::name(), serHidden);
    return props;
}

QVariantList createProps()
{
    QVariantList props;
    props.append(createProps_msgId(false));
    return props;
}

} // namespace

class CfgMsgPollImpl : public
    cc_tools_qt::ProtocolMessageBase<
        ::cc_ublox::message::CfgMsgPoll<cc_tools_qt_plugin::cc_ublox::Message, cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>,
        CfgMsgPollImpl
    >
{
public:
    CfgMsgPollImpl() = default;
    CfgMsgPollImpl(const CfgMsgPollImpl&) = delete;
    CfgMsgPollImpl(CfgMsgPollImpl&&) = delete;
    virtual ~CfgMsgPollImpl() = default;
    CfgMsgPollImpl& operator=(const CfgMsgPollImpl&) = default;
    CfgMsgPollImpl& operator=(CfgMsgPollImpl&&) = default;

protected:
    virtual const QVariantList& fieldsPropertiesImpl() const override
    {
        static const QVariantList Props = createProps();
        return Props;
    }
};

CfgMsgPoll::CfgMsgPoll() : m_pImpl(new CfgMsgPollImpl) {}
CfgMsgPoll::~CfgMsgPoll() = default;

CfgMsgPoll& CfgMsgPoll::operator=(const CfgMsgPoll& other)
{
    *m_pImpl = *other.m_pImpl;
    return *this;
}

CfgMsgPoll& CfgMsgPoll::operator=(CfgMsgPoll&& other)
{
    *m_pImpl = std::move(*other.m_pImpl);
    return *this;
}

CfgMsgPoll::MsgIdParamType CfgMsgPoll::doGetId()
{
    return ::cc_ublox::message::CfgMsgPoll<cc_tools_qt_plugin::cc_ublox::Message, cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::doGetId();
}

const char* CfgMsgPoll::nameImpl() const
{
    return static_cast<const cc_tools_qt::Message*>(m_pImpl.get())->name();
}

const QVariantList& CfgMsgPoll::fieldsPropertiesImpl() const
{
    return m_pImpl->fieldsProperties();
}

void CfgMsgPoll::dispatchImpl(cc_tools_qt::MessageHandler& handler)
{
    static_cast<cc_tools_qt::Message*>(m_pImpl.get())->dispatch(handler);
}

void CfgMsgPoll::resetImpl()
{
    m_pImpl->reset();
}

bool CfgMsgPoll::assignImpl(const cc_tools_qt::Message& other)
{
    auto* castedOther = dynamic_cast<const CfgMsgPoll*>(&other);
    if (castedOther == nullptr) {
        return false;
    }
    return m_pImpl->assign(*castedOther->m_pImpl);
}

CfgMsgPoll::MsgIdParamType CfgMsgPoll::getIdImpl() const
{
    return m_pImpl->getId();
}

comms::ErrorStatus CfgMsgPoll::readImpl(ReadIterator& iter, std::size_t len)
{
    return m_pImpl->read(iter, len);
}

comms::ErrorStatus CfgMsgPoll::writeImpl(WriteIterator& iter, std::size_t len) const
{
    return m_pImpl->write(iter, len);
}

bool CfgMsgPoll::validImpl() const
{
    return m_pImpl->valid();
}

std::size_t CfgMsgPoll::lengthImpl() const
{
    return m_pImpl->length();
}

bool CfgMsgPoll::refreshImpl()
{
    return m_pImpl->refresh();
}

} // namespace message

} // namespace cc_ublox

} // namespace cc_tools_qt_plugin
