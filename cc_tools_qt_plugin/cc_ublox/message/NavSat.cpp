// Generated by commsdsl2tools_qt v6.3.3

#include "NavSat.h"

#include "cc_tools_qt/ProtocolMessageBase.h"
#include "cc_tools_qt/property/field.h"
#include "cc_tools_qt_plugin/cc_ublox/field/GnssId.h"
#include "cc_tools_qt_plugin/cc_ublox/field/Itow.h"
#include "cc_tools_qt_plugin/cc_ublox/field/Res2.h"
#include "cc_tools_qt_plugin/cc_ublox/options/DefaultOptions.h"
#include "cc_ublox/message/NavSat.h"

namespace cc_tools_qt_plugin
{

namespace cc_ublox
{

namespace message
{

namespace
{

static QVariantMap createProps_itow(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::NavSatFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::Itow;
    auto props = cc_tools_qt_plugin::cc_ublox::field::createProps_itow(Field::name(), serHidden);
    return props;
}

static QVariantMap createProps_version(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::NavSatFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::Version;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .asMap();
}

static QVariantMap createProps_numSvs(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::NavSatFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::NumSvs;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .readOnly()
            .asMap();
}

static QVariantMap createProps_reserved1(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::NavSatFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::Reserved1;
    auto props = cc_tools_qt_plugin::cc_ublox::field::createProps_res2(Field::name(), serHidden);
    return props;
}

struct ListMembers
{
    struct ElementMembers
    {
        static QVariantMap createProps_gnssId(bool serHidden)
        {
            static_cast<void>(serHidden);
            using Field = ::cc_ublox::message::NavSatFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::ListMembers::ElementMembers::GnssId;
            auto props = cc_tools_qt_plugin::cc_ublox::field::createProps_gnssId(Field::name(), serHidden);
            return props;
        }

        static QVariantMap createProps_svid(bool serHidden)
        {
            static_cast<void>(serHidden);
            using Field = ::cc_ublox::message::NavSatFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::ListMembers::ElementMembers::Svid;
            return
                cc_tools_qt::property::field::ForField<Field>()
                    .name(Field::name())
                    .serialisedHidden(serHidden)
                    .asMap();
        }

        static QVariantMap createProps_cno(bool serHidden)
        {
            static_cast<void>(serHidden);
            using Field = ::cc_ublox::message::NavSatFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::ListMembers::ElementMembers::Cno;
            return
                cc_tools_qt::property::field::ForField<Field>()
                    .name(Field::name())
                    .serialisedHidden(serHidden)
                    .asMap();
        }

        static QVariantMap createProps_elev(bool serHidden)
        {
            static_cast<void>(serHidden);
            using Field = ::cc_ublox::message::NavSatFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::ListMembers::ElementMembers::Elev;
            return
                cc_tools_qt::property::field::ForField<Field>()
                    .name(Field::name())
                    .serialisedHidden(serHidden)
                    .asMap();
        }

        static QVariantMap createProps_azim(bool serHidden)
        {
            static_cast<void>(serHidden);
            using Field = ::cc_ublox::message::NavSatFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::ListMembers::ElementMembers::Azim;
            return
                cc_tools_qt::property::field::ForField<Field>()
                    .name(Field::name())
                    .serialisedHidden(serHidden)
                    .asMap();
        }

        static QVariantMap createProps_prRes(bool serHidden)
        {
            static_cast<void>(serHidden);
            using Field = ::cc_ublox::message::NavSatFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::ListMembers::ElementMembers::PrRes;
            return
                cc_tools_qt::property::field::ForField<Field>()
                    .name(Field::name())
                    .serialisedHidden(serHidden)
                    .scaledDecimals(1U)
                    .asMap();
        }

        struct FlagsMembers
        {
            static QVariantMap createProps_qualityInd(bool serHidden)
            {
                static_cast<void>(serHidden);
                using Field = ::cc_ublox::message::NavSatFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::ListMembers::ElementMembers::FlagsMembers::QualityInd;
                return
                    cc_tools_qt::property::field::ForField<Field>()
                        .name(Field::name())
                        .serialisedHidden(serHidden)
                        .add("no signal", 0)
                        .add("searching", 1)
                        .add("signal acquired", 2)
                        .add("detected but unsable", 3)
                        .add("code locked", 4)
                        .add("code and carrier locked", 5)
                        .add("code and carrier locked", 6)
                        .add("code and carrier locked", 7)
                        .asMap();
            }

            static QVariantMap createProps_bitsLow(bool serHidden)
            {
                static_cast<void>(serHidden);
                using Field = ::cc_ublox::message::NavSatFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::ListMembers::ElementMembers::FlagsMembers::BitsLow;
                return
                    cc_tools_qt::property::field::ForField<Field>()
                        .name(Field::name())
                        .serialisedHidden(serHidden)
                        .add(0U, "svUsed")
                        .asMap();
            }

            static QVariantMap createProps_health(bool serHidden)
            {
                static_cast<void>(serHidden);
                using Field = ::cc_ublox::message::NavSatFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::ListMembers::ElementMembers::FlagsMembers::Health;
                return
                    cc_tools_qt::property::field::ForField<Field>()
                        .name(Field::name())
                        .serialisedHidden(serHidden)
                        .add("Unknown", 0)
                        .add("Healthy", 1)
                        .add("Unhealthy", 2)
                        .asMap();
            }

            static QVariantMap createProps_bitsMid(bool serHidden)
            {
                static_cast<void>(serHidden);
                using Field = ::cc_ublox::message::NavSatFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::ListMembers::ElementMembers::FlagsMembers::BitsMid;
                return
                    cc_tools_qt::property::field::ForField<Field>()
                        .name(Field::name())
                        .serialisedHidden(serHidden)
                        .add(0U, "diffCorr")
                        .add(1U, "smoothed")
                        .asMap();
            }

            static QVariantMap createProps_orbitSource(bool serHidden)
            {
                static_cast<void>(serHidden);
                using Field = ::cc_ublox::message::NavSatFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::ListMembers::ElementMembers::FlagsMembers::OrbitSource;
                return
                    cc_tools_qt::property::field::ForField<Field>()
                        .name(Field::name())
                        .serialisedHidden(serHidden)
                        .add("No orbit", 0)
                        .add("Ephemeris", 1)
                        .add("Almanac", 2)
                        .add("AssistNow Offline", 3)
                        .add("AssistNow Autonomous", 4)
                        .asMap();
            }

            static QVariantMap createProps_bitsHigh(bool serHidden)
            {
                static_cast<void>(serHidden);
                using Field = ::cc_ublox::message::NavSatFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::ListMembers::ElementMembers::FlagsMembers::BitsHigh;
                return
                    cc_tools_qt::property::field::ForField<Field>()
                        .name(Field::name())
                        .serialisedHidden(serHidden)
                        .add(0U, "ephAvail")
                        .add(1U, "almAvail")
                        .add(2U, "anoAvail")
                        .add(3U, "aopAvail")
                        .add(5U, "sbasCorrUsed")
                        .add(6U, "rtcmCorrUsed")
                        .add(9U, "prCorrUsed")
                        .add(10U, "crCorrUsed")
                        .add(11U, "doCorrUsed")
                        .asMap();
            }
        }; // struct FlagsMembers

        static QVariantMap createProps_flags(bool serHidden)
        {
            static_cast<void>(serHidden);
            using Field = ::cc_ublox::message::NavSatFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::ListMembers::ElementMembers::Flags;
            return
                cc_tools_qt::property::field::ForField<Field>()
                    .name(Field::name())
                    .serialisedHidden(serHidden)
                    .add(FlagsMembers::createProps_qualityInd(true))
                    .add(FlagsMembers::createProps_bitsLow(true))
                    .add(FlagsMembers::createProps_health(true))
                    .add(FlagsMembers::createProps_bitsMid(true))
                    .add(FlagsMembers::createProps_orbitSource(true))
                    .add(FlagsMembers::createProps_bitsHigh(true))
                    .asMap();
        }
    }; // struct ElementMembers

    static QVariantMap createProps_element(bool serHidden)
    {
        static_cast<void>(serHidden);
        using Field = ::cc_ublox::message::NavSatFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::ListMembers::Element;
        return
            cc_tools_qt::property::field::ForField<Field>()
                .name(Field::name())
                .serialisedHidden(serHidden)
                .add(ElementMembers::createProps_gnssId(serHidden))
                .add(ElementMembers::createProps_svid(serHidden))
                .add(ElementMembers::createProps_cno(serHidden))
                .add(ElementMembers::createProps_elev(serHidden))
                .add(ElementMembers::createProps_azim(serHidden))
                .add(ElementMembers::createProps_prRes(serHidden))
                .add(ElementMembers::createProps_flags(serHidden))
                .serialisedHidden()
                .asMap();
    }
}; // struct ListMembers

static QVariantMap createProps_list(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::NavSatFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::List;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .serialisedHidden()
            .add(ListMembers::createProps_element(serHidden))
            .appendIndexToElementName()
            .asMap();
}

QVariantList createProps()
{
    QVariantList props;
    props.append(createProps_itow(false));
    props.append(createProps_version(false));
    props.append(createProps_numSvs(false));
    props.append(createProps_reserved1(false));
    props.append(createProps_list(false));
    return props;
}

} // namespace

class NavSatImpl : public
    cc_tools_qt::ProtocolMessageBase<
        ::cc_ublox::message::NavSat<cc_tools_qt_plugin::cc_ublox::Message, cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>,
        NavSatImpl
    >
{
public:
    NavSatImpl() = default;
    NavSatImpl(const NavSatImpl&) = delete;
    NavSatImpl(NavSatImpl&&) = delete;
    virtual ~NavSatImpl() = default;
    NavSatImpl& operator=(const NavSatImpl&) = default;
    NavSatImpl& operator=(NavSatImpl&&) = default;

protected:
    virtual const QVariantList& fieldsPropertiesImpl() const override
    {
        static const QVariantList Props = createProps();
        return Props;
    }
};

NavSat::NavSat() : m_pImpl(new NavSatImpl) {}
NavSat::~NavSat() = default;

NavSat& NavSat::operator=(const NavSat& other)
{
    *m_pImpl = *other.m_pImpl;
    return *this;
}

NavSat& NavSat::operator=(NavSat&& other)
{
    *m_pImpl = std::move(*other.m_pImpl);
    return *this;
}

NavSat::MsgIdParamType NavSat::doGetId()
{
    return ::cc_ublox::message::NavSat<cc_tools_qt_plugin::cc_ublox::Message, cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::doGetId();
}

const char* NavSat::nameImpl() const
{
    return static_cast<const cc_tools_qt::Message*>(m_pImpl.get())->name();
}

const QVariantList& NavSat::fieldsPropertiesImpl() const
{
    return m_pImpl->fieldsProperties();
}

void NavSat::dispatchImpl(cc_tools_qt::MessageHandler& handler)
{
    static_cast<cc_tools_qt::Message*>(m_pImpl.get())->dispatch(handler);
}

void NavSat::resetImpl()
{
    m_pImpl->reset();
}

bool NavSat::assignImpl(const cc_tools_qt::Message& other)
{
    auto* castedOther = dynamic_cast<const NavSat*>(&other);
    if (castedOther == nullptr) {
        return false;
    }
    return m_pImpl->assign(*castedOther->m_pImpl);
}

NavSat::MsgIdParamType NavSat::getIdImpl() const
{
    return m_pImpl->getId();
}

comms::ErrorStatus NavSat::readImpl(ReadIterator& iter, std::size_t len)
{
    return m_pImpl->read(iter, len);
}

comms::ErrorStatus NavSat::writeImpl(WriteIterator& iter, std::size_t len) const
{
    return m_pImpl->write(iter, len);
}

bool NavSat::validImpl() const
{
    return m_pImpl->valid();
}

std::size_t NavSat::lengthImpl() const
{
    return m_pImpl->length();
}

bool NavSat::refreshImpl()
{
    return m_pImpl->refresh();
}

} // namespace message

} // namespace cc_ublox

} // namespace cc_tools_qt_plugin
