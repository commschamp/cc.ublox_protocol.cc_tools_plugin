// Generated by commsdsl2tools_qt v6.3.3

#include "NavSbas.h"

#include "cc_tools_qt/ProtocolMessageBase.h"
#include "cc_tools_qt/property/field.h"
#include "cc_tools_qt_plugin/cc_ublox/field/Itow.h"
#include "cc_tools_qt_plugin/cc_ublox/field/Res1.h"
#include "cc_tools_qt_plugin/cc_ublox/field/Res2.h"
#include "cc_tools_qt_plugin/cc_ublox/field/Res3.h"
#include "cc_tools_qt_plugin/cc_ublox/field/SbasService.h"
#include "cc_tools_qt_plugin/cc_ublox/field/SbasSys.h"
#include "cc_tools_qt_plugin/cc_ublox/options/DefaultOptions.h"
#include "cc_ublox/message/NavSbas.h"

namespace cc_tools_qt_plugin
{

namespace cc_ublox
{

namespace message
{

namespace
{

static QVariantMap createProps_itow(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::NavSbasFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::Itow;
    auto props = cc_tools_qt_plugin::cc_ublox::field::createProps_itow(Field::name(), serHidden);
    return props;
}

static QVariantMap createProps_geo(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::NavSbasFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::Geo;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .asMap();
}

static QVariantMap createProps_mode(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::NavSbasFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::Mode;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .add("Disabled", 0)
            .add("Enabled Integrity", 1)
            .add("Enabled Testmode", 3)
            .asMap();
}

static QVariantMap createProps_sys(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::NavSbasFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::Sys;
    auto props = cc_tools_qt_plugin::cc_ublox::field::createProps_sbasSys(Field::name(), serHidden);
    return props;
}

static QVariantMap createProps_service(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::NavSbasFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::Service;
    auto props = cc_tools_qt_plugin::cc_ublox::field::createProps_sbasService(Field::name(), serHidden);
    return props;
}

static QVariantMap createProps_cnt(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::NavSbasFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::Cnt;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .readOnly()
            .asMap();
}

static QVariantMap createProps_reserved1(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::NavSbasFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::Reserved1;
    auto props = cc_tools_qt_plugin::cc_ublox::field::createProps_res3(Field::name(), serHidden);
    return props;
}

struct ListMembers
{
    struct ElementMembers
    {
        static QVariantMap createProps_svid(bool serHidden)
        {
            static_cast<void>(serHidden);
            using Field = ::cc_ublox::message::NavSbasFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::ListMembers::ElementMembers::Svid;
            return
                cc_tools_qt::property::field::ForField<Field>()
                    .name(Field::name())
                    .serialisedHidden(serHidden)
                    .asMap();
        }

        static QVariantMap createProps_flags(bool serHidden)
        {
            static_cast<void>(serHidden);
            using Field = ::cc_ublox::message::NavSbasFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::ListMembers::ElementMembers::Flags;
            return
                cc_tools_qt::property::field::ForField<Field>()
                    .name(Field::name())
                    .serialisedHidden(serHidden)
                    .asMap();
        }

        static QVariantMap createProps_udre(bool serHidden)
        {
            static_cast<void>(serHidden);
            using Field = ::cc_ublox::message::NavSbasFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::ListMembers::ElementMembers::Udre;
            return
                cc_tools_qt::property::field::ForField<Field>()
                    .name(Field::name())
                    .serialisedHidden(serHidden)
                    .asMap();
        }

        static QVariantMap createProps_svSys(bool serHidden)
        {
            static_cast<void>(serHidden);
            using Field = ::cc_ublox::message::NavSbasFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::ListMembers::ElementMembers::SvSys;
            auto props = cc_tools_qt_plugin::cc_ublox::field::createProps_sbasSys(Field::name(), serHidden);
            return props;
        }

        static QVariantMap createProps_svService(bool serHidden)
        {
            static_cast<void>(serHidden);
            using Field = ::cc_ublox::message::NavSbasFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::ListMembers::ElementMembers::SvService;
            auto props = cc_tools_qt_plugin::cc_ublox::field::createProps_sbasService(Field::name(), serHidden);
            return props;
        }

        static QVariantMap createProps_reserved2(bool serHidden)
        {
            static_cast<void>(serHidden);
            using Field = ::cc_ublox::message::NavSbasFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::ListMembers::ElementMembers::Reserved2;
            auto props = cc_tools_qt_plugin::cc_ublox::field::createProps_res1(Field::name(), serHidden);
            return props;
        }

        static QVariantMap createProps_prc(bool serHidden)
        {
            static_cast<void>(serHidden);
            using Field = ::cc_ublox::message::NavSbasFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::ListMembers::ElementMembers::Prc;
            return
                cc_tools_qt::property::field::ForField<Field>()
                    .name(Field::name())
                    .serialisedHidden(serHidden)
                    .asMap();
        }

        static QVariantMap createProps_reserved3(bool serHidden)
        {
            static_cast<void>(serHidden);
            using Field = ::cc_ublox::message::NavSbasFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::ListMembers::ElementMembers::Reserved3;
            auto props = cc_tools_qt_plugin::cc_ublox::field::createProps_res2(Field::name(), serHidden);
            return props;
        }

        static QVariantMap createProps_ic(bool serHidden)
        {
            static_cast<void>(serHidden);
            using Field = ::cc_ublox::message::NavSbasFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::ListMembers::ElementMembers::Ic;
            return
                cc_tools_qt::property::field::ForField<Field>()
                    .name(Field::name())
                    .serialisedHidden(serHidden)
                    .asMap();
        }
    }; // struct ElementMembers

    static QVariantMap createProps_element(bool serHidden)
    {
        static_cast<void>(serHidden);
        using Field = ::cc_ublox::message::NavSbasFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::ListMembers::Element;
        return
            cc_tools_qt::property::field::ForField<Field>()
                .name(Field::name())
                .serialisedHidden(serHidden)
                .add(ElementMembers::createProps_svid(serHidden))
                .add(ElementMembers::createProps_flags(serHidden))
                .add(ElementMembers::createProps_udre(serHidden))
                .add(ElementMembers::createProps_svSys(serHidden))
                .add(ElementMembers::createProps_svService(serHidden))
                .add(ElementMembers::createProps_reserved2(serHidden))
                .add(ElementMembers::createProps_prc(serHidden))
                .add(ElementMembers::createProps_reserved3(serHidden))
                .add(ElementMembers::createProps_ic(serHidden))
                .serialisedHidden()
                .asMap();
    }
}; // struct ListMembers

static QVariantMap createProps_list(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::NavSbasFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::List;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .serialisedHidden()
            .add(ListMembers::createProps_element(serHidden))
            .appendIndexToElementName()
            .asMap();
}

QVariantList createProps()
{
    QVariantList props;
    props.append(createProps_itow(false));
    props.append(createProps_geo(false));
    props.append(createProps_mode(false));
    props.append(createProps_sys(false));
    props.append(createProps_service(false));
    props.append(createProps_cnt(false));
    props.append(createProps_reserved1(false));
    props.append(createProps_list(false));
    return props;
}

} // namespace

class NavSbasImpl : public
    cc_tools_qt::ProtocolMessageBase<
        ::cc_ublox::message::NavSbas<cc_tools_qt_plugin::cc_ublox::Message, cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>,
        NavSbasImpl
    >
{
public:
    NavSbasImpl() = default;
    NavSbasImpl(const NavSbasImpl&) = delete;
    NavSbasImpl(NavSbasImpl&&) = delete;
    virtual ~NavSbasImpl() = default;
    NavSbasImpl& operator=(const NavSbasImpl&) = default;
    NavSbasImpl& operator=(NavSbasImpl&&) = default;

protected:
    virtual const QVariantList& fieldsPropertiesImpl() const override
    {
        static const QVariantList Props = createProps();
        return Props;
    }
};

NavSbas::NavSbas() : m_pImpl(new NavSbasImpl) {}
NavSbas::~NavSbas() = default;

NavSbas& NavSbas::operator=(const NavSbas& other)
{
    *m_pImpl = *other.m_pImpl;
    return *this;
}

NavSbas& NavSbas::operator=(NavSbas&& other)
{
    *m_pImpl = std::move(*other.m_pImpl);
    return *this;
}

NavSbas::MsgIdParamType NavSbas::doGetId()
{
    return ::cc_ublox::message::NavSbas<cc_tools_qt_plugin::cc_ublox::Message, cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::doGetId();
}

const char* NavSbas::nameImpl() const
{
    return static_cast<const cc_tools_qt::Message*>(m_pImpl.get())->name();
}

const QVariantList& NavSbas::fieldsPropertiesImpl() const
{
    return m_pImpl->fieldsProperties();
}

void NavSbas::dispatchImpl(cc_tools_qt::MessageHandler& handler)
{
    static_cast<cc_tools_qt::Message*>(m_pImpl.get())->dispatch(handler);
}

void NavSbas::resetImpl()
{
    m_pImpl->reset();
}

bool NavSbas::assignImpl(const cc_tools_qt::Message& other)
{
    auto* castedOther = dynamic_cast<const NavSbas*>(&other);
    if (castedOther == nullptr) {
        return false;
    }
    return m_pImpl->assign(*castedOther->m_pImpl);
}

NavSbas::MsgIdParamType NavSbas::getIdImpl() const
{
    return m_pImpl->getId();
}

comms::ErrorStatus NavSbas::readImpl(ReadIterator& iter, std::size_t len)
{
    return m_pImpl->read(iter, len);
}

comms::ErrorStatus NavSbas::writeImpl(WriteIterator& iter, std::size_t len) const
{
    return m_pImpl->write(iter, len);
}

bool NavSbas::validImpl() const
{
    return m_pImpl->valid();
}

std::size_t NavSbas::lengthImpl() const
{
    return m_pImpl->length();
}

bool NavSbas::refreshImpl()
{
    return m_pImpl->refresh();
}

} // namespace message

} // namespace cc_ublox

} // namespace cc_tools_qt_plugin
