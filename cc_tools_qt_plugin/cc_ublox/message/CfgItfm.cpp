// Generated by commsdsl2tools_qt v6.3.0

#include "CfgItfm.h"

#include "cc_tools_qt/ProtocolMessageBase.h"
#include "cc_tools_qt/property/field.h"
#include "cc_tools_qt_plugin/cc_ublox/options/DefaultOptions.h"
#include "cc_ublox/message/CfgItfm.h"

namespace cc_tools_qt_plugin
{

namespace cc_ublox
{

namespace message
{

namespace
{

struct ConfigMembers
{
    static QVariantMap createProps_bbThreshold(bool serHidden)
    {
        static_cast<void>(serHidden);
        using Field = ::cc_ublox::message::CfgItfmFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::ConfigMembers::BbThreshold;
        return
            cc_tools_qt::property::field::ForField<Field>()
                .name(Field::name())
                .serialisedHidden(serHidden)
                .asMap();
    }

    static QVariantMap createProps_cwThreshold(bool serHidden)
    {
        static_cast<void>(serHidden);
        using Field = ::cc_ublox::message::CfgItfmFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::ConfigMembers::CwThreshold;
        return
            cc_tools_qt::property::field::ForField<Field>()
                .name(Field::name())
                .serialisedHidden(serHidden)
                .asMap();
    }

    static QVariantMap createProps_algorithmBits(bool serHidden)
    {
        static_cast<void>(serHidden);
        using Field = ::cc_ublox::message::CfgItfmFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::ConfigMembers::AlgorithmBits;
        return
            cc_tools_qt::property::field::ForField<Field>()
                .name(Field::name())
                .serialisedHidden(serHidden)
                .asMap();
    }

    static QVariantMap createProps_bits(bool serHidden)
    {
        static_cast<void>(serHidden);
        using Field = ::cc_ublox::message::CfgItfmFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::ConfigMembers::Bits;
        return
            cc_tools_qt::property::field::ForField<Field>()
                .name(Field::name())
                .serialisedHidden(serHidden)
                .add(0U, "enable")
                .asMap();
    }
}; // struct ConfigMembers

static QVariantMap createProps_config(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::CfgItfmFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::Config;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .add(ConfigMembers::createProps_bbThreshold(true))
            .add(ConfigMembers::createProps_cwThreshold(true))
            .add(ConfigMembers::createProps_algorithmBits(true))
            .add(ConfigMembers::createProps_bits(true))
            .asMap();
}

struct Config2Members
{
    static QVariantMap createProps_generalBits(bool serHidden)
    {
        static_cast<void>(serHidden);
        using Field = ::cc_ublox::message::CfgItfmFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::Config2Members::GeneralBits;
        return
            cc_tools_qt::property::field::ForField<Field>()
                .name(Field::name())
                .serialisedHidden(serHidden)
                .asMap();
    }

    static QVariantMap createProps_antSetting(bool serHidden)
    {
        static_cast<void>(serHidden);
        using Field = ::cc_ublox::message::CfgItfmFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::Config2Members::AntSetting;
        return
            cc_tools_qt::property::field::ForField<Field>()
                .name(Field::name())
                .serialisedHidden(serHidden)
                .add("Unknown", 0)
                .add("Passive", 1)
                .add("Active", 2)
                .asMap();
    }

    static QVariantMap createProps_bitsHigh(bool serHidden)
    {
        static_cast<void>(serHidden);
        using Field = ::cc_ublox::message::CfgItfmFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::Config2Members::BitsHigh;
        return
            cc_tools_qt::property::field::ForField<Field>()
                .name(Field::name())
                .serialisedHidden(serHidden)
                .add(0U, "enable2")
                .asMap();
    }
}; // struct Config2Members

static QVariantMap createProps_config2(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::CfgItfmFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::Config2;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .add(Config2Members::createProps_generalBits(true))
            .add(Config2Members::createProps_antSetting(true))
            .add(Config2Members::createProps_bitsHigh(true))
            .asMap();
}

QVariantList createProps()
{
    QVariantList props;
    props.append(createProps_config(false));
    props.append(createProps_config2(false));
    return props;
}

} // namespace

class CfgItfmImpl : public
    cc_tools_qt::ProtocolMessageBase<
        ::cc_ublox::message::CfgItfm<cc_tools_qt_plugin::cc_ublox::Message, cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>,
        CfgItfmImpl
    >
{
public:
    CfgItfmImpl() = default;
    CfgItfmImpl(const CfgItfmImpl&) = delete;
    CfgItfmImpl(CfgItfmImpl&&) = delete;
    virtual ~CfgItfmImpl() = default;
    CfgItfmImpl& operator=(const CfgItfmImpl&) = default;
    CfgItfmImpl& operator=(CfgItfmImpl&&) = default;

protected:
    virtual const QVariantList& fieldsPropertiesImpl() const override
    {
        static const QVariantList Props = createProps();
        return Props;
    }
};

CfgItfm::CfgItfm() : m_pImpl(new CfgItfmImpl) {}
CfgItfm::~CfgItfm() = default;

CfgItfm& CfgItfm::operator=(const CfgItfm& other)
{
    *m_pImpl = *other.m_pImpl;
    return *this;
}

CfgItfm& CfgItfm::operator=(CfgItfm&& other)
{
    *m_pImpl = std::move(*other.m_pImpl);
    return *this;
}

CfgItfm::MsgIdParamType CfgItfm::doGetId()
{
    return ::cc_ublox::message::CfgItfm<cc_tools_qt_plugin::cc_ublox::Message, cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::doGetId();
}

const char* CfgItfm::nameImpl() const
{
    return static_cast<const cc_tools_qt::Message*>(m_pImpl.get())->name();
}

const QVariantList& CfgItfm::fieldsPropertiesImpl() const
{
    return m_pImpl->fieldsProperties();
}

void CfgItfm::dispatchImpl(cc_tools_qt::MessageHandler& handler)
{
    static_cast<cc_tools_qt::Message*>(m_pImpl.get())->dispatch(handler);
}

void CfgItfm::resetImpl()
{
    m_pImpl->reset();
}

bool CfgItfm::assignImpl(const cc_tools_qt::Message& other)
{
    auto* castedOther = dynamic_cast<const CfgItfm*>(&other);
    if (castedOther == nullptr) {
        return false;
    }
    return m_pImpl->assign(*castedOther->m_pImpl);
}

CfgItfm::MsgIdParamType CfgItfm::getIdImpl() const
{
    return m_pImpl->getId();
}

comms::ErrorStatus CfgItfm::readImpl(ReadIterator& iter, std::size_t len)
{
    return m_pImpl->read(iter, len);
}

comms::ErrorStatus CfgItfm::writeImpl(WriteIterator& iter, std::size_t len) const
{
    return m_pImpl->write(iter, len);
}

bool CfgItfm::validImpl() const
{
    return m_pImpl->valid();
}

std::size_t CfgItfm::lengthImpl() const
{
    return m_pImpl->length();
}

bool CfgItfm::refreshImpl()
{
    return m_pImpl->refresh();
}

} // namespace message

} // namespace cc_ublox

} // namespace cc_tools_qt_plugin
