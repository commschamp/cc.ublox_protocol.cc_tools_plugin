// Generated by commsdsl2tools_qt v6.3.0

#include "TimTos.h"

#include "cc_tools_qt/ProtocolMessageBase.h"
#include "cc_tools_qt/property/field.h"
#include "cc_tools_qt_plugin/cc_ublox/field/Day.h"
#include "cc_tools_qt_plugin/cc_ublox/field/GnssId.h"
#include "cc_tools_qt_plugin/cc_ublox/field/Hour.h"
#include "cc_tools_qt_plugin/cc_ublox/field/Min.h"
#include "cc_tools_qt_plugin/cc_ublox/field/Month.h"
#include "cc_tools_qt_plugin/cc_ublox/field/Res2.h"
#include "cc_tools_qt_plugin/cc_ublox/field/Sec.h"
#include "cc_tools_qt_plugin/cc_ublox/field/Year.h"
#include "cc_tools_qt_plugin/cc_ublox/options/DefaultOptions.h"
#include "cc_ublox/message/TimTos.h"

namespace cc_tools_qt_plugin
{

namespace cc_ublox
{

namespace message
{

namespace
{

static QVariantMap createProps_version(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::TimTosFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::Version;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .asMap();
}

static QVariantMap createProps_gnssId(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::TimTosFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::GnssId;
    auto props = cc_tools_qt_plugin::cc_ublox::field::createProps_gnssId(Field::name(), serHidden);
    return props;
}

static QVariantMap createProps_reserved1(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::TimTosFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::Reserved1;
    auto props = cc_tools_qt_plugin::cc_ublox::field::createProps_res2(Field::name(), serHidden);
    return props;
}

struct FlagsMembers
{
    static QVariantMap createProps_bitsLow(bool serHidden)
    {
        static_cast<void>(serHidden);
        using Field = ::cc_ublox::message::TimTosFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::FlagsMembers::BitsLow;
        return
            cc_tools_qt::property::field::ForField<Field>()
                .name(Field::name())
                .serialisedHidden(serHidden)
                .add(0U, "leapNow")
                .add(1U, "leapSoon")
                .add(2U, "leapPositive")
                .add(3U, "timeInLimit")
                .add(4U, "intOscInLimit")
                .add(5U, "extOscInLimit")
                .add(6U, "gnssTimeValid")
                .add(7U, "UTCTimeValid")
                .asMap();
    }

    static QVariantMap createProps_discSrc(bool serHidden)
    {
        static_cast<void>(serHidden);
        using Field = ::cc_ublox::message::TimTosFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::FlagsMembers::DiscSrc;
        return
            cc_tools_qt::property::field::ForField<Field>()
                .name(Field::name())
                .serialisedHidden(serHidden)
                .add("Internal", 0)
                .add("GNSS", 1)
                .add("EXTINT0", 2)
                .add("EXTINT1", 3)
                .add("HostInternal", 4)
                .add("HostExternal", 5)
                .asMap();
    }

    static QVariantMap createProps_bitsHigh(bool serHidden)
    {
        static_cast<void>(serHidden);
        using Field = ::cc_ublox::message::TimTosFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::FlagsMembers::BitsHigh;
        return
            cc_tools_qt::property::field::ForField<Field>()
                .name(Field::name())
                .serialisedHidden(serHidden)
                .add(0U, "raim")
                .add(1U, "cohPulse")
                .add(2U, "lockedPulse")
                .asMap();
    }
}; // struct FlagsMembers

static QVariantMap createProps_flags(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::TimTosFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::Flags;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .add(FlagsMembers::createProps_bitsLow(true))
            .add(FlagsMembers::createProps_discSrc(true))
            .add(FlagsMembers::createProps_bitsHigh(true))
            .asMap();
}

static QVariantMap createProps_year(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::TimTosFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::Year;
    auto props = cc_tools_qt_plugin::cc_ublox::field::createProps_year(Field::name(), serHidden);
    return props;
}

static QVariantMap createProps_month(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::TimTosFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::Month;
    auto props = cc_tools_qt_plugin::cc_ublox::field::createProps_month(Field::name(), serHidden);
    return props;
}

static QVariantMap createProps_day(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::TimTosFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::Day;
    auto props = cc_tools_qt_plugin::cc_ublox::field::createProps_day(Field::name(), serHidden);
    return props;
}

static QVariantMap createProps_hour(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::TimTosFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::Hour;
    auto props = cc_tools_qt_plugin::cc_ublox::field::createProps_hour(Field::name(), serHidden);
    return props;
}

static QVariantMap createProps_min(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::TimTosFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::Min;
    auto props = cc_tools_qt_plugin::cc_ublox::field::createProps_min(Field::name(), serHidden);
    return props;
}

static QVariantMap createProps_sec(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::TimTosFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::Sec;
    auto props = cc_tools_qt_plugin::cc_ublox::field::createProps_sec(Field::name(), serHidden);
    return props;
}

static QVariantMap createProps_utcStandard(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::TimTosFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::UtcStandard;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .add("Unknown", 0)
            .add("USNO", 3)
            .add("SU", 6)
            .add("NTSC", 7)
            .asMap();
}

static QVariantMap createProps_utcOffset(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::TimTosFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::UtcOffset;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .asMap();
}

static QVariantMap createProps_utcUncertainty(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::TimTosFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::UtcUncertainty;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .asMap();
}

static QVariantMap createProps_week(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::TimTosFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::Week;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .asMap();
}

static QVariantMap createProps_tOW(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::TimTosFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::TOW;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .asMap();
}

static QVariantMap createProps_gnssOffset(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::TimTosFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::GnssOffset;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .asMap();
}

static QVariantMap createProps_gnssUncertainy(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::TimTosFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::GnssUncertainy;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .asMap();
}

static QVariantMap createProps_intOscOffset(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::TimTosFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::IntOscOffset;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .scaledDecimals(8U)
            .asMap();
}

static QVariantMap createProps_intOscUncertainty(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::TimTosFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::IntOscUncertainty;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .scaledDecimals(8U)
            .asMap();
}

static QVariantMap createProps_extOscOffset(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::TimTosFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::ExtOscOffset;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .scaledDecimals(8U)
            .asMap();
}

static QVariantMap createProps_extOscUncertainty(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::TimTosFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::ExtOscUncertainty;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .scaledDecimals(8U)
            .asMap();
}

QVariantList createProps()
{
    QVariantList props;
    props.append(createProps_version(false));
    props.append(createProps_gnssId(false));
    props.append(createProps_reserved1(false));
    props.append(createProps_flags(false));
    props.append(createProps_year(false));
    props.append(createProps_month(false));
    props.append(createProps_day(false));
    props.append(createProps_hour(false));
    props.append(createProps_min(false));
    props.append(createProps_sec(false));
    props.append(createProps_utcStandard(false));
    props.append(createProps_utcOffset(false));
    props.append(createProps_utcUncertainty(false));
    props.append(createProps_week(false));
    props.append(createProps_tOW(false));
    props.append(createProps_gnssOffset(false));
    props.append(createProps_gnssUncertainy(false));
    props.append(createProps_intOscOffset(false));
    props.append(createProps_intOscUncertainty(false));
    props.append(createProps_extOscOffset(false));
    props.append(createProps_extOscUncertainty(false));
    return props;
}

} // namespace

class TimTosImpl : public
    cc_tools_qt::ProtocolMessageBase<
        ::cc_ublox::message::TimTos<cc_tools_qt_plugin::cc_ublox::Message, cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>,
        TimTosImpl
    >
{
public:
    TimTosImpl() = default;
    TimTosImpl(const TimTosImpl&) = delete;
    TimTosImpl(TimTosImpl&&) = delete;
    virtual ~TimTosImpl() = default;
    TimTosImpl& operator=(const TimTosImpl&) = default;
    TimTosImpl& operator=(TimTosImpl&&) = default;

protected:
    virtual const QVariantList& fieldsPropertiesImpl() const override
    {
        static const QVariantList Props = createProps();
        return Props;
    }
};

TimTos::TimTos() : m_pImpl(new TimTosImpl) {}
TimTos::~TimTos() = default;

TimTos& TimTos::operator=(const TimTos& other)
{
    *m_pImpl = *other.m_pImpl;
    return *this;
}

TimTos& TimTos::operator=(TimTos&& other)
{
    *m_pImpl = std::move(*other.m_pImpl);
    return *this;
}

TimTos::MsgIdParamType TimTos::doGetId()
{
    return ::cc_ublox::message::TimTos<cc_tools_qt_plugin::cc_ublox::Message, cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::doGetId();
}

const char* TimTos::nameImpl() const
{
    return static_cast<const cc_tools_qt::Message*>(m_pImpl.get())->name();
}

const QVariantList& TimTos::fieldsPropertiesImpl() const
{
    return m_pImpl->fieldsProperties();
}

void TimTos::dispatchImpl(cc_tools_qt::MessageHandler& handler)
{
    static_cast<cc_tools_qt::Message*>(m_pImpl.get())->dispatch(handler);
}

void TimTos::resetImpl()
{
    m_pImpl->reset();
}

bool TimTos::assignImpl(const cc_tools_qt::Message& other)
{
    auto* castedOther = dynamic_cast<const TimTos*>(&other);
    if (castedOther == nullptr) {
        return false;
    }
    return m_pImpl->assign(*castedOther->m_pImpl);
}

TimTos::MsgIdParamType TimTos::getIdImpl() const
{
    return m_pImpl->getId();
}

comms::ErrorStatus TimTos::readImpl(ReadIterator& iter, std::size_t len)
{
    return m_pImpl->read(iter, len);
}

comms::ErrorStatus TimTos::writeImpl(WriteIterator& iter, std::size_t len) const
{
    return m_pImpl->write(iter, len);
}

bool TimTos::validImpl() const
{
    return m_pImpl->valid();
}

std::size_t TimTos::lengthImpl() const
{
    return m_pImpl->length();
}

bool TimTos::refreshImpl()
{
    return m_pImpl->refresh();
}

} // namespace message

} // namespace cc_ublox

} // namespace cc_tools_qt_plugin
