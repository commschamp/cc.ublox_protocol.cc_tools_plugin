// Generated by commsdsl2tools_qt v6.3.0

#include "TimSvin.h"

#include "cc_tools_qt/ProtocolMessageBase.h"
#include "cc_tools_qt/property/field.h"
#include "cc_tools_qt_plugin/cc_ublox/field/Res2.h"
#include "cc_tools_qt_plugin/cc_ublox/options/DefaultOptions.h"
#include "cc_ublox/message/TimSvin.h"

namespace cc_tools_qt_plugin
{

namespace cc_ublox
{

namespace message
{

namespace
{

static QVariantMap createProps_dur(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::TimSvinFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::Dur;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .asMap();
}

static QVariantMap createProps_meanX(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::TimSvinFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::MeanX;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .asMap();
}

static QVariantMap createProps_meanY(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::TimSvinFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::MeanY;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .asMap();
}

static QVariantMap createProps_meanZ(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::TimSvinFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::MeanZ;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .asMap();
}

static QVariantMap createProps_meanV(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::TimSvinFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::MeanV;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .asMap();
}

static QVariantMap createProps_obs(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::TimSvinFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::Obs;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .asMap();
}

static QVariantMap createProps_valid(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::TimSvinFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::Valid;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .asMap();
}

static QVariantMap createProps_active(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::TimSvinFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::Active;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .asMap();
}

static QVariantMap createProps_reserved1(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::TimSvinFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::Reserved1;
    auto props = cc_tools_qt_plugin::cc_ublox::field::createProps_res2(Field::name(), serHidden);
    return props;
}

QVariantList createProps()
{
    QVariantList props;
    props.append(createProps_dur(false));
    props.append(createProps_meanX(false));
    props.append(createProps_meanY(false));
    props.append(createProps_meanZ(false));
    props.append(createProps_meanV(false));
    props.append(createProps_obs(false));
    props.append(createProps_valid(false));
    props.append(createProps_active(false));
    props.append(createProps_reserved1(false));
    return props;
}

} // namespace

class TimSvinImpl : public
    cc_tools_qt::ProtocolMessageBase<
        ::cc_ublox::message::TimSvin<cc_tools_qt_plugin::cc_ublox::Message, cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>,
        TimSvinImpl
    >
{
public:
    TimSvinImpl() = default;
    TimSvinImpl(const TimSvinImpl&) = delete;
    TimSvinImpl(TimSvinImpl&&) = delete;
    virtual ~TimSvinImpl() = default;
    TimSvinImpl& operator=(const TimSvinImpl&) = default;
    TimSvinImpl& operator=(TimSvinImpl&&) = default;

protected:
    virtual const QVariantList& fieldsPropertiesImpl() const override
    {
        static const QVariantList Props = createProps();
        return Props;
    }
};

TimSvin::TimSvin() : m_pImpl(new TimSvinImpl) {}
TimSvin::~TimSvin() = default;

TimSvin& TimSvin::operator=(const TimSvin& other)
{
    *m_pImpl = *other.m_pImpl;
    return *this;
}

TimSvin& TimSvin::operator=(TimSvin&& other)
{
    *m_pImpl = std::move(*other.m_pImpl);
    return *this;
}

TimSvin::MsgIdParamType TimSvin::doGetId()
{
    return ::cc_ublox::message::TimSvin<cc_tools_qt_plugin::cc_ublox::Message, cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::doGetId();
}

const char* TimSvin::nameImpl() const
{
    return static_cast<const cc_tools_qt::Message*>(m_pImpl.get())->name();
}

const QVariantList& TimSvin::fieldsPropertiesImpl() const
{
    return m_pImpl->fieldsProperties();
}

void TimSvin::dispatchImpl(cc_tools_qt::MessageHandler& handler)
{
    static_cast<cc_tools_qt::Message*>(m_pImpl.get())->dispatch(handler);
}

void TimSvin::resetImpl()
{
    m_pImpl->reset();
}

bool TimSvin::assignImpl(const cc_tools_qt::Message& other)
{
    auto* castedOther = dynamic_cast<const TimSvin*>(&other);
    if (castedOther == nullptr) {
        return false;
    }
    return m_pImpl->assign(*castedOther->m_pImpl);
}

TimSvin::MsgIdParamType TimSvin::getIdImpl() const
{
    return m_pImpl->getId();
}

comms::ErrorStatus TimSvin::readImpl(ReadIterator& iter, std::size_t len)
{
    return m_pImpl->read(iter, len);
}

comms::ErrorStatus TimSvin::writeImpl(WriteIterator& iter, std::size_t len) const
{
    return m_pImpl->write(iter, len);
}

bool TimSvin::validImpl() const
{
    return m_pImpl->valid();
}

std::size_t TimSvin::lengthImpl() const
{
    return m_pImpl->length();
}

bool TimSvin::refreshImpl()
{
    return m_pImpl->refresh();
}

} // namespace message

} // namespace cc_ublox

} // namespace cc_tools_qt_plugin
