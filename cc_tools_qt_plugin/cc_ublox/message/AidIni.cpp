// Generated by commsdsl2tools_qt v6.3.0

#include "AidIni.h"

#include "cc_tools_qt/ProtocolMessageBase.h"
#include "cc_tools_qt/property/field.h"
#include "cc_tools_qt_plugin/cc_ublox/options/DefaultOptions.h"
#include "cc_ublox/message/AidIni.h"

namespace cc_tools_qt_plugin
{

namespace cc_ublox
{

namespace message
{

namespace
{

struct EcefXMembers
{
    static QVariantMap createProps_ecefX(bool serHidden)
    {
        static_cast<void>(serHidden);
        using Field = ::cc_ublox::message::AidIniFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::EcefXMembers::EcefX;
        return
            cc_tools_qt::property::field::ForField<Field>()
                .name(Field::name())
                .serialisedHidden(serHidden)
                .asMap();
    }
}; // struct EcefXMembers

static QVariantMap createProps_ecefX(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::AidIniFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::EcefX;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .uncheckable()
            .field(EcefXMembers::createProps_ecefX(serHidden))
            .asMap();
}

struct LatMembers
{
    static QVariantMap createProps_lat(bool serHidden)
    {
        static_cast<void>(serHidden);
        using Field = ::cc_ublox::message::AidIniFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::LatMembers::Lat;
        return
            cc_tools_qt::property::field::ForField<Field>()
                .name(Field::name())
                .serialisedHidden(serHidden)
                .scaledDecimals(7U)
                .asMap();
    }
}; // struct LatMembers

static QVariantMap createProps_lat(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::AidIniFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::Lat;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .uncheckable()
            .field(LatMembers::createProps_lat(serHidden))
            .asMap();
}

struct EcefYMembers
{
    static QVariantMap createProps_ecefY(bool serHidden)
    {
        static_cast<void>(serHidden);
        using Field = ::cc_ublox::message::AidIniFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::EcefYMembers::EcefY;
        return
            cc_tools_qt::property::field::ForField<Field>()
                .name(Field::name())
                .serialisedHidden(serHidden)
                .asMap();
    }
}; // struct EcefYMembers

static QVariantMap createProps_ecefY(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::AidIniFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::EcefY;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .uncheckable()
            .field(EcefYMembers::createProps_ecefY(serHidden))
            .asMap();
}

struct LonMembers
{
    static QVariantMap createProps_lon(bool serHidden)
    {
        static_cast<void>(serHidden);
        using Field = ::cc_ublox::message::AidIniFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::LonMembers::Lon;
        return
            cc_tools_qt::property::field::ForField<Field>()
                .name(Field::name())
                .serialisedHidden(serHidden)
                .scaledDecimals(7U)
                .asMap();
    }
}; // struct LonMembers

static QVariantMap createProps_lon(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::AidIniFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::Lon;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .uncheckable()
            .field(LonMembers::createProps_lon(serHidden))
            .asMap();
}

struct EcefZMembers
{
    static QVariantMap createProps_ecefZ(bool serHidden)
    {
        static_cast<void>(serHidden);
        using Field = ::cc_ublox::message::AidIniFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::EcefZMembers::EcefZ;
        return
            cc_tools_qt::property::field::ForField<Field>()
                .name(Field::name())
                .serialisedHidden(serHidden)
                .asMap();
    }
}; // struct EcefZMembers

static QVariantMap createProps_ecefZ(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::AidIniFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::EcefZ;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .uncheckable()
            .field(EcefZMembers::createProps_ecefZ(serHidden))
            .asMap();
}

struct AltMembers
{
    static QVariantMap createProps_alt(bool serHidden)
    {
        static_cast<void>(serHidden);
        using Field = ::cc_ublox::message::AidIniFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::AltMembers::Alt;
        return
            cc_tools_qt::property::field::ForField<Field>()
                .name(Field::name())
                .serialisedHidden(serHidden)
                .asMap();
    }
}; // struct AltMembers

static QVariantMap createProps_alt(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::AidIniFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::Alt;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .uncheckable()
            .field(AltMembers::createProps_alt(serHidden))
            .asMap();
}

static QVariantMap createProps_posAcc(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::AidIniFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::PosAcc;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .asMap();
}

static QVariantMap createProps_tmCfg(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::AidIniFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::TmCfg;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .add(1U, "fEdge")
            .add(4U, "tm1")
            .add(6U, "f1")
            .asMap();
}

struct WnoMembers
{
    static QVariantMap createProps_wno(bool serHidden)
    {
        static_cast<void>(serHidden);
        using Field = ::cc_ublox::message::AidIniFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::WnoMembers::Wno;
        return
            cc_tools_qt::property::field::ForField<Field>()
                .name(Field::name())
                .serialisedHidden(serHidden)
                .asMap();
    }
}; // struct WnoMembers

static QVariantMap createProps_wno(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::AidIniFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::Wno;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .uncheckable()
            .field(WnoMembers::createProps_wno(serHidden))
            .asMap();
}

struct DateMembers
{
    struct DateBundleMembers
    {
        static QVariantMap createProps_year(bool serHidden)
        {
            static_cast<void>(serHidden);
            using Field = ::cc_ublox::message::AidIniFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::DateMembers::DateBundleMembers::Year;
            return
                cc_tools_qt::property::field::ForField<Field>()
                    .name(Field::name())
                    .serialisedHidden(serHidden)
                    .asMap();
        }

        static QVariantMap createProps_month(bool serHidden)
        {
            static_cast<void>(serHidden);
            using Field = ::cc_ublox::message::AidIniFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::DateMembers::DateBundleMembers::Month;
            return
                cc_tools_qt::property::field::ForField<Field>()
                    .name(Field::name())
                    .serialisedHidden(serHidden)
                    .asMap();
        }
    }; // struct DateBundleMembers

    static QVariantMap createProps_dateBundle(bool serHidden)
    {
        static_cast<void>(serHidden);
        using Field = ::cc_ublox::message::AidIniFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::DateMembers::DateBundle;
        return
            cc_tools_qt::property::field::ForField<Field>()
                .name(Field::name())
                .serialisedHidden(serHidden)
                .add(DateBundleMembers::createProps_year(serHidden))
                .add(DateBundleMembers::createProps_month(serHidden))
                .serialisedHidden()
                .asMap();
    }
}; // struct DateMembers

static QVariantMap createProps_date(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::AidIniFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::Date;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .uncheckable()
            .field(DateMembers::createProps_dateBundle(serHidden))
            .asMap();
}

struct TowMembers
{
    static QVariantMap createProps_tow(bool serHidden)
    {
        static_cast<void>(serHidden);
        using Field = ::cc_ublox::message::AidIniFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::TowMembers::Tow;
        return
            cc_tools_qt::property::field::ForField<Field>()
                .name(Field::name())
                .serialisedHidden(serHidden)
                .asMap();
    }
}; // struct TowMembers

static QVariantMap createProps_tow(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::AidIniFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::Tow;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .uncheckable()
            .field(TowMembers::createProps_tow(serHidden))
            .asMap();
}

struct TimeMembers
{
    struct TimeBundleMembers
    {
        static QVariantMap createProps_day(bool serHidden)
        {
            static_cast<void>(serHidden);
            using Field = ::cc_ublox::message::AidIniFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::TimeMembers::TimeBundleMembers::Day;
            return
                cc_tools_qt::property::field::ForField<Field>()
                    .name(Field::name())
                    .serialisedHidden(serHidden)
                    .asMap();
        }

        static QVariantMap createProps_hour(bool serHidden)
        {
            static_cast<void>(serHidden);
            using Field = ::cc_ublox::message::AidIniFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::TimeMembers::TimeBundleMembers::Hour;
            return
                cc_tools_qt::property::field::ForField<Field>()
                    .name(Field::name())
                    .serialisedHidden(serHidden)
                    .asMap();
        }

        static QVariantMap createProps_min(bool serHidden)
        {
            static_cast<void>(serHidden);
            using Field = ::cc_ublox::message::AidIniFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::TimeMembers::TimeBundleMembers::Min;
            return
                cc_tools_qt::property::field::ForField<Field>()
                    .name(Field::name())
                    .serialisedHidden(serHidden)
                    .asMap();
        }

        static QVariantMap createProps_sec(bool serHidden)
        {
            static_cast<void>(serHidden);
            using Field = ::cc_ublox::message::AidIniFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::TimeMembers::TimeBundleMembers::Sec;
            return
                cc_tools_qt::property::field::ForField<Field>()
                    .name(Field::name())
                    .serialisedHidden(serHidden)
                    .asMap();
        }
    }; // struct TimeBundleMembers

    static QVariantMap createProps_timeBundle(bool serHidden)
    {
        static_cast<void>(serHidden);
        using Field = ::cc_ublox::message::AidIniFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::TimeMembers::TimeBundle;
        return
            cc_tools_qt::property::field::ForField<Field>()
                .name(Field::name())
                .serialisedHidden(serHidden)
                .add(TimeBundleMembers::createProps_day(serHidden))
                .add(TimeBundleMembers::createProps_hour(serHidden))
                .add(TimeBundleMembers::createProps_min(serHidden))
                .add(TimeBundleMembers::createProps_sec(serHidden))
                .serialisedHidden()
                .asMap();
    }
}; // struct TimeMembers

static QVariantMap createProps_time(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::AidIniFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::Time;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .uncheckable()
            .field(TimeMembers::createProps_timeBundle(serHidden))
            .asMap();
}

static QVariantMap createProps_towNs(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::AidIniFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::TowNs;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .asMap();
}

static QVariantMap createProps_tAccMs(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::AidIniFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::TAccMs;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .asMap();
}

static QVariantMap createProps_tAccNs(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::AidIniFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::TAccNs;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .asMap();
}

struct ClkDMembers
{
    static QVariantMap createProps_clkD(bool serHidden)
    {
        static_cast<void>(serHidden);
        using Field = ::cc_ublox::message::AidIniFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::ClkDMembers::ClkD;
        return
            cc_tools_qt::property::field::ForField<Field>()
                .name(Field::name())
                .serialisedHidden(serHidden)
                .asMap();
    }
}; // struct ClkDMembers

static QVariantMap createProps_clkD(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::AidIniFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::ClkD;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .uncheckable()
            .field(ClkDMembers::createProps_clkD(serHidden))
            .asMap();
}

struct FreqMembers
{
    static QVariantMap createProps_freq(bool serHidden)
    {
        static_cast<void>(serHidden);
        using Field = ::cc_ublox::message::AidIniFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::FreqMembers::Freq;
        return
            cc_tools_qt::property::field::ForField<Field>()
                .name(Field::name())
                .serialisedHidden(serHidden)
                .scaledDecimals(2U)
                .asMap();
    }
}; // struct FreqMembers

static QVariantMap createProps_freq(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::AidIniFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::Freq;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .uncheckable()
            .field(FreqMembers::createProps_freq(serHidden))
            .asMap();
}

struct ClkDAccMembers
{
    static QVariantMap createProps_clkDAcc(bool serHidden)
    {
        static_cast<void>(serHidden);
        using Field = ::cc_ublox::message::AidIniFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::ClkDAccMembers::ClkDAcc;
        return
            cc_tools_qt::property::field::ForField<Field>()
                .name(Field::name())
                .serialisedHidden(serHidden)
                .asMap();
    }
}; // struct ClkDAccMembers

static QVariantMap createProps_clkDAcc(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::AidIniFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::ClkDAcc;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .uncheckable()
            .field(ClkDAccMembers::createProps_clkDAcc(serHidden))
            .asMap();
}

struct FreqAccMembers
{
    static QVariantMap createProps_freqAcc(bool serHidden)
    {
        static_cast<void>(serHidden);
        using Field = ::cc_ublox::message::AidIniFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::FreqAccMembers::FreqAcc;
        return
            cc_tools_qt::property::field::ForField<Field>()
                .name(Field::name())
                .serialisedHidden(serHidden)
                .asMap();
    }
}; // struct FreqAccMembers

static QVariantMap createProps_freqAcc(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::AidIniFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::FreqAcc;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .uncheckable()
            .field(FreqAccMembers::createProps_freqAcc(serHidden))
            .asMap();
}

static QVariantMap createProps_flags(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::AidIniFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::Flags;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .add(0U, "pos")
            .add(1U, "time")
            .add(2U, "clockD")
            .add(3U, "tp")
            .add(4U, "clockF")
            .add(5U, "lla")
            .add(6U, "altInv")
            .add(7U, "prevTm")
            .add(10U, "utc")
            .asMap();
}

QVariantList createProps()
{
    QVariantList props;
    props.append(createProps_ecefX(false));
    props.append(createProps_lat(false));
    props.append(createProps_ecefY(false));
    props.append(createProps_lon(false));
    props.append(createProps_ecefZ(false));
    props.append(createProps_alt(false));
    props.append(createProps_posAcc(false));
    props.append(createProps_tmCfg(false));
    props.append(createProps_wno(false));
    props.append(createProps_date(false));
    props.append(createProps_tow(false));
    props.append(createProps_time(false));
    props.append(createProps_towNs(false));
    props.append(createProps_tAccMs(false));
    props.append(createProps_tAccNs(false));
    props.append(createProps_clkD(false));
    props.append(createProps_freq(false));
    props.append(createProps_clkDAcc(false));
    props.append(createProps_freqAcc(false));
    props.append(createProps_flags(false));
    return props;
}

} // namespace

class AidIniImpl : public
    cc_tools_qt::ProtocolMessageBase<
        ::cc_ublox::message::AidIni<cc_tools_qt_plugin::cc_ublox::Message, cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>,
        AidIniImpl
    >
{
public:
    AidIniImpl() = default;
    AidIniImpl(const AidIniImpl&) = delete;
    AidIniImpl(AidIniImpl&&) = delete;
    virtual ~AidIniImpl() = default;
    AidIniImpl& operator=(const AidIniImpl&) = default;
    AidIniImpl& operator=(AidIniImpl&&) = default;

protected:
    virtual const QVariantList& fieldsPropertiesImpl() const override
    {
        static const QVariantList Props = createProps();
        return Props;
    }
};

AidIni::AidIni() : m_pImpl(new AidIniImpl) {}
AidIni::~AidIni() = default;

AidIni& AidIni::operator=(const AidIni& other)
{
    *m_pImpl = *other.m_pImpl;
    return *this;
}

AidIni& AidIni::operator=(AidIni&& other)
{
    *m_pImpl = std::move(*other.m_pImpl);
    return *this;
}

AidIni::MsgIdParamType AidIni::doGetId()
{
    return ::cc_ublox::message::AidIni<cc_tools_qt_plugin::cc_ublox::Message, cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::doGetId();
}

const char* AidIni::nameImpl() const
{
    return static_cast<const cc_tools_qt::Message*>(m_pImpl.get())->name();
}

const QVariantList& AidIni::fieldsPropertiesImpl() const
{
    return m_pImpl->fieldsProperties();
}

void AidIni::dispatchImpl(cc_tools_qt::MessageHandler& handler)
{
    static_cast<cc_tools_qt::Message*>(m_pImpl.get())->dispatch(handler);
}

void AidIni::resetImpl()
{
    m_pImpl->reset();
}

bool AidIni::assignImpl(const cc_tools_qt::Message& other)
{
    auto* castedOther = dynamic_cast<const AidIni*>(&other);
    if (castedOther == nullptr) {
        return false;
    }
    return m_pImpl->assign(*castedOther->m_pImpl);
}

AidIni::MsgIdParamType AidIni::getIdImpl() const
{
    return m_pImpl->getId();
}

comms::ErrorStatus AidIni::readImpl(ReadIterator& iter, std::size_t len)
{
    return m_pImpl->read(iter, len);
}

comms::ErrorStatus AidIni::writeImpl(WriteIterator& iter, std::size_t len) const
{
    return m_pImpl->write(iter, len);
}

bool AidIni::validImpl() const
{
    return m_pImpl->valid();
}

std::size_t AidIni::lengthImpl() const
{
    return m_pImpl->length();
}

bool AidIni::refreshImpl()
{
    return m_pImpl->refresh();
}

} // namespace message

} // namespace cc_ublox

} // namespace cc_tools_qt_plugin
