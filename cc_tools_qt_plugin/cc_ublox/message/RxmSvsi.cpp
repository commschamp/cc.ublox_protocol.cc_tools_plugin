// Generated by commsdsl2tools_qt v6.3.0

#include "RxmSvsi.h"

#include "cc_tools_qt/ProtocolMessageBase.h"
#include "cc_tools_qt/property/field.h"
#include "cc_tools_qt_plugin/cc_ublox/field/Itow.h"
#include "cc_tools_qt_plugin/cc_ublox/options/DefaultOptions.h"
#include "cc_ublox/message/RxmSvsi.h"

namespace cc_tools_qt_plugin
{

namespace cc_ublox
{

namespace message
{

namespace
{

static QVariantMap createProps_itow(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::RxmSvsiFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::Itow;
    auto props = cc_tools_qt_plugin::cc_ublox::field::createProps_itow(Field::name(), serHidden);
    return props;
}

static QVariantMap createProps_week(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::RxmSvsiFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::Week;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .asMap();
}

static QVariantMap createProps_numVis(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::RxmSvsiFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::NumVis;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .asMap();
}

static QVariantMap createProps_numSV(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::RxmSvsiFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::NumSV;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .readOnly()
            .asMap();
}

struct ListMembers
{
    struct ElementMembers
    {
        static QVariantMap createProps_svid(bool serHidden)
        {
            static_cast<void>(serHidden);
            using Field = ::cc_ublox::message::RxmSvsiFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::ListMembers::ElementMembers::Svid;
            return
                cc_tools_qt::property::field::ForField<Field>()
                    .name(Field::name())
                    .serialisedHidden(serHidden)
                    .asMap();
        }

        struct SvFlagMembers
        {
            static QVariantMap createProps_ura(bool serHidden)
            {
                static_cast<void>(serHidden);
                using Field = ::cc_ublox::message::RxmSvsiFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::ListMembers::ElementMembers::SvFlagMembers::Ura;
                return
                    cc_tools_qt::property::field::ForField<Field>()
                        .name(Field::name())
                        .serialisedHidden(serHidden)
                        .asMap();
            }

            static QVariantMap createProps_bits(bool serHidden)
            {
                static_cast<void>(serHidden);
                using Field = ::cc_ublox::message::RxmSvsiFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::ListMembers::ElementMembers::SvFlagMembers::Bits;
                return
                    cc_tools_qt::property::field::ForField<Field>()
                        .name(Field::name())
                        .serialisedHidden(serHidden)
                        .add(0U, "healthy")
                        .add(1U, "ephVal")
                        .add(2U, "almVal")
                        .add(3U, "notAvail")
                        .asMap();
            }
        }; // struct SvFlagMembers

        static QVariantMap createProps_svFlag(bool serHidden)
        {
            static_cast<void>(serHidden);
            using Field = ::cc_ublox::message::RxmSvsiFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::ListMembers::ElementMembers::SvFlag;
            return
                cc_tools_qt::property::field::ForField<Field>()
                    .name(Field::name())
                    .serialisedHidden(serHidden)
                    .add(SvFlagMembers::createProps_ura(true))
                    .add(SvFlagMembers::createProps_bits(true))
                    .asMap();
        }

        static QVariantMap createProps_azim(bool serHidden)
        {
            static_cast<void>(serHidden);
            using Field = ::cc_ublox::message::RxmSvsiFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::ListMembers::ElementMembers::Azim;
            return
                cc_tools_qt::property::field::ForField<Field>()
                    .name(Field::name())
                    .serialisedHidden(serHidden)
                    .asMap();
        }

        static QVariantMap createProps_elev(bool serHidden)
        {
            static_cast<void>(serHidden);
            using Field = ::cc_ublox::message::RxmSvsiFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::ListMembers::ElementMembers::Elev;
            return
                cc_tools_qt::property::field::ForField<Field>()
                    .name(Field::name())
                    .serialisedHidden(serHidden)
                    .asMap();
        }

        struct AgeMembers
        {
            static QVariantMap createProps_almAge(bool serHidden)
            {
                static_cast<void>(serHidden);
                using Field = ::cc_ublox::message::RxmSvsiFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::ListMembers::ElementMembers::AgeMembers::AlmAge;
                return
                    cc_tools_qt::property::field::ForField<Field>()
                        .name(Field::name())
                        .serialisedHidden(serHidden)
                        .asMap();
            }

            static QVariantMap createProps_ephAge(bool serHidden)
            {
                static_cast<void>(serHidden);
                using Field = ::cc_ublox::message::RxmSvsiFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::ListMembers::ElementMembers::AgeMembers::EphAge;
                return
                    cc_tools_qt::property::field::ForField<Field>()
                        .name(Field::name())
                        .serialisedHidden(serHidden)
                        .asMap();
            }
        }; // struct AgeMembers

        static QVariantMap createProps_age(bool serHidden)
        {
            static_cast<void>(serHidden);
            using Field = ::cc_ublox::message::RxmSvsiFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::ListMembers::ElementMembers::Age;
            return
                cc_tools_qt::property::field::ForField<Field>()
                    .name(Field::name())
                    .serialisedHidden(serHidden)
                    .add(AgeMembers::createProps_almAge(true))
                    .add(AgeMembers::createProps_ephAge(true))
                    .asMap();
        }
    }; // struct ElementMembers

    static QVariantMap createProps_element(bool serHidden)
    {
        static_cast<void>(serHidden);
        using Field = ::cc_ublox::message::RxmSvsiFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::ListMembers::Element;
        return
            cc_tools_qt::property::field::ForField<Field>()
                .name(Field::name())
                .serialisedHidden(serHidden)
                .add(ElementMembers::createProps_svid(serHidden))
                .add(ElementMembers::createProps_svFlag(serHidden))
                .add(ElementMembers::createProps_azim(serHidden))
                .add(ElementMembers::createProps_elev(serHidden))
                .add(ElementMembers::createProps_age(serHidden))
                .serialisedHidden()
                .asMap();
    }
}; // struct ListMembers

static QVariantMap createProps_list(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::RxmSvsiFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::List;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .serialisedHidden()
            .add(ListMembers::createProps_element(serHidden))
            .appendIndexToElementName()
            .asMap();
}

QVariantList createProps()
{
    QVariantList props;
    props.append(createProps_itow(false));
    props.append(createProps_week(false));
    props.append(createProps_numVis(false));
    props.append(createProps_numSV(false));
    props.append(createProps_list(false));
    return props;
}

} // namespace

class RxmSvsiImpl : public
    cc_tools_qt::ProtocolMessageBase<
        ::cc_ublox::message::RxmSvsi<cc_tools_qt_plugin::cc_ublox::Message, cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>,
        RxmSvsiImpl
    >
{
public:
    RxmSvsiImpl() = default;
    RxmSvsiImpl(const RxmSvsiImpl&) = delete;
    RxmSvsiImpl(RxmSvsiImpl&&) = delete;
    virtual ~RxmSvsiImpl() = default;
    RxmSvsiImpl& operator=(const RxmSvsiImpl&) = default;
    RxmSvsiImpl& operator=(RxmSvsiImpl&&) = default;

protected:
    virtual const QVariantList& fieldsPropertiesImpl() const override
    {
        static const QVariantList Props = createProps();
        return Props;
    }
};

RxmSvsi::RxmSvsi() : m_pImpl(new RxmSvsiImpl) {}
RxmSvsi::~RxmSvsi() = default;

RxmSvsi& RxmSvsi::operator=(const RxmSvsi& other)
{
    *m_pImpl = *other.m_pImpl;
    return *this;
}

RxmSvsi& RxmSvsi::operator=(RxmSvsi&& other)
{
    *m_pImpl = std::move(*other.m_pImpl);
    return *this;
}

RxmSvsi::MsgIdParamType RxmSvsi::doGetId()
{
    return ::cc_ublox::message::RxmSvsi<cc_tools_qt_plugin::cc_ublox::Message, cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::doGetId();
}

const char* RxmSvsi::nameImpl() const
{
    return static_cast<const cc_tools_qt::Message*>(m_pImpl.get())->name();
}

const QVariantList& RxmSvsi::fieldsPropertiesImpl() const
{
    return m_pImpl->fieldsProperties();
}

void RxmSvsi::dispatchImpl(cc_tools_qt::MessageHandler& handler)
{
    static_cast<cc_tools_qt::Message*>(m_pImpl.get())->dispatch(handler);
}

void RxmSvsi::resetImpl()
{
    m_pImpl->reset();
}

bool RxmSvsi::assignImpl(const cc_tools_qt::Message& other)
{
    auto* castedOther = dynamic_cast<const RxmSvsi*>(&other);
    if (castedOther == nullptr) {
        return false;
    }
    return m_pImpl->assign(*castedOther->m_pImpl);
}

RxmSvsi::MsgIdParamType RxmSvsi::getIdImpl() const
{
    return m_pImpl->getId();
}

comms::ErrorStatus RxmSvsi::readImpl(ReadIterator& iter, std::size_t len)
{
    return m_pImpl->read(iter, len);
}

comms::ErrorStatus RxmSvsi::writeImpl(WriteIterator& iter, std::size_t len) const
{
    return m_pImpl->write(iter, len);
}

bool RxmSvsi::validImpl() const
{
    return m_pImpl->valid();
}

std::size_t RxmSvsi::lengthImpl() const
{
    return m_pImpl->length();
}

bool RxmSvsi::refreshImpl()
{
    return m_pImpl->refresh();
}

} // namespace message

} // namespace cc_ublox

} // namespace cc_tools_qt_plugin
