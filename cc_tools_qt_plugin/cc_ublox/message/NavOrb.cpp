// Generated by commsdsl2tools_qt v6.3.4

#include "NavOrb.h"

#include "cc_tools_qt/ProtocolMessageBase.h"
#include "cc_tools_qt/property/field.h"
#include "cc_tools_qt_plugin/cc_ublox/field/GnssId.h"
#include "cc_tools_qt_plugin/cc_ublox/field/Itow.h"
#include "cc_tools_qt_plugin/cc_ublox/field/Res2.h"
#include "cc_tools_qt_plugin/cc_ublox/options/DefaultOptions.h"
#include "cc_ublox/message/NavOrb.h"

namespace cc_tools_qt_plugin
{

namespace cc_ublox
{

namespace message
{

namespace
{

static QVariantMap createProps_itow(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::NavOrbFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::Itow;
    auto props = cc_tools_qt_plugin::cc_ublox::field::createProps_itow(Field::name(), serHidden);
    return props;
}

static QVariantMap createProps_version(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::NavOrbFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::Version;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .asMap();
}

static QVariantMap createProps_numSv(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::NavOrbFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::NumSv;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .readOnly()
            .asMap();
}

static QVariantMap createProps_reserved1(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::NavOrbFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::Reserved1;
    auto props = cc_tools_qt_plugin::cc_ublox::field::createProps_res2(Field::name(), serHidden);
    return props;
}

struct ListMembers
{
    struct ElementMembers
    {
        static QVariantMap createProps_gnssId(bool serHidden)
        {
            static_cast<void>(serHidden);
            using Field = ::cc_ublox::message::NavOrbFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::ListMembers::ElementMembers::GnssId;
            auto props = cc_tools_qt_plugin::cc_ublox::field::createProps_gnssId(Field::name(), serHidden);
            return props;
        }

        static QVariantMap createProps_svid(bool serHidden)
        {
            static_cast<void>(serHidden);
            using Field = ::cc_ublox::message::NavOrbFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::ListMembers::ElementMembers::Svid;
            return
                cc_tools_qt::property::field::ForField<Field>()
                    .name(Field::name())
                    .serialisedHidden(serHidden)
                    .asMap();
        }

        struct SvFlagMembers
        {
            static QVariantMap createProps_health(bool serHidden)
            {
                static_cast<void>(serHidden);
                using Field = ::cc_ublox::message::NavOrbFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::ListMembers::ElementMembers::SvFlagMembers::Health;
                return
                    cc_tools_qt::property::field::ForField<Field>()
                        .name(Field::name())
                        .serialisedHidden(serHidden)
                        .add("Unknown", 0)
                        .add("Healthy", 1)
                        .add("Not healty", 2)
                        .asMap();
            }

            static QVariantMap createProps_visibility(bool serHidden)
            {
                static_cast<void>(serHidden);
                using Field = ::cc_ublox::message::NavOrbFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::ListMembers::ElementMembers::SvFlagMembers::Visibility;
                return
                    cc_tools_qt::property::field::ForField<Field>()
                        .name(Field::name())
                        .serialisedHidden(serHidden)
                        .add("Unknown", 0)
                        .add("Below horizon", 1)
                        .add("Above horizon", 2)
                        .add("Above elevation mask", 3)
                        .asMap();
            }

            static QVariantMap createProps_reserved(bool serHidden)
            {
                static_cast<void>(serHidden);
                using Field = ::cc_ublox::message::NavOrbFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::ListMembers::ElementMembers::SvFlagMembers::Reserved;
                return
                    cc_tools_qt::property::field::ForField<Field>()
                        .name(Field::name())
                        .serialisedHidden(serHidden)
                        .hidden()
                        .asMap();
            }
        }; // struct SvFlagMembers

        static QVariantMap createProps_svFlag(bool serHidden)
        {
            static_cast<void>(serHidden);
            using Field = ::cc_ublox::message::NavOrbFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::ListMembers::ElementMembers::SvFlag;
            return
                cc_tools_qt::property::field::ForField<Field>()
                    .name(Field::name())
                    .serialisedHidden(serHidden)
                    .add(SvFlagMembers::createProps_health(true))
                    .add(SvFlagMembers::createProps_visibility(true))
                    .add(SvFlagMembers::createProps_reserved(true))
                    .asMap();
        }

        struct EphMembers
        {
            static QVariantMap createProps_ephUsability(bool serHidden)
            {
                static_cast<void>(serHidden);
                using Field = ::cc_ublox::message::NavOrbFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::ListMembers::ElementMembers::EphMembers::EphUsability;
                return
                    cc_tools_qt::property::field::ForField<Field>()
                        .name(Field::name())
                        .serialisedHidden(serHidden)
                        .asMap();
            }

            static QVariantMap createProps_ephSource(bool serHidden)
            {
                static_cast<void>(serHidden);
                using Field = ::cc_ublox::message::NavOrbFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::ListMembers::ElementMembers::EphMembers::EphSource;
                return
                    cc_tools_qt::property::field::ForField<Field>()
                        .name(Field::name())
                        .serialisedHidden(serHidden)
                        .add("Not available", 0)
                        .add("GNSS transmission", 1)
                        .add("External aiding", 2)
                        .asMap();
            }
        }; // struct EphMembers

        static QVariantMap createProps_eph(bool serHidden)
        {
            static_cast<void>(serHidden);
            using Field = ::cc_ublox::message::NavOrbFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::ListMembers::ElementMembers::Eph;
            return
                cc_tools_qt::property::field::ForField<Field>()
                    .name(Field::name())
                    .serialisedHidden(serHidden)
                    .add(EphMembers::createProps_ephUsability(true))
                    .add(EphMembers::createProps_ephSource(true))
                    .asMap();
        }

        struct AlmMembers
        {
            static QVariantMap createProps_almUsability(bool serHidden)
            {
                static_cast<void>(serHidden);
                using Field = ::cc_ublox::message::NavOrbFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::ListMembers::ElementMembers::AlmMembers::AlmUsability;
                return
                    cc_tools_qt::property::field::ForField<Field>()
                        .name(Field::name())
                        .serialisedHidden(serHidden)
                        .asMap();
            }

            static QVariantMap createProps_almSource(bool serHidden)
            {
                static_cast<void>(serHidden);
                using Field = ::cc_ublox::message::NavOrbFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::ListMembers::ElementMembers::AlmMembers::AlmSource;
                return
                    cc_tools_qt::property::field::ForField<Field>()
                        .name(Field::name())
                        .serialisedHidden(serHidden)
                        .add("Not available", 0)
                        .add("GNSS transmission", 1)
                        .add("External aiding", 2)
                        .asMap();
            }
        }; // struct AlmMembers

        static QVariantMap createProps_alm(bool serHidden)
        {
            static_cast<void>(serHidden);
            using Field = ::cc_ublox::message::NavOrbFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::ListMembers::ElementMembers::Alm;
            return
                cc_tools_qt::property::field::ForField<Field>()
                    .name(Field::name())
                    .serialisedHidden(serHidden)
                    .add(AlmMembers::createProps_almUsability(true))
                    .add(AlmMembers::createProps_almSource(true))
                    .asMap();
        }

        struct OtherOrbMembers
        {
            static QVariantMap createProps_anoAopUsability(bool serHidden)
            {
                static_cast<void>(serHidden);
                using Field = ::cc_ublox::message::NavOrbFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::ListMembers::ElementMembers::OtherOrbMembers::AnoAopUsability;
                return
                    cc_tools_qt::property::field::ForField<Field>()
                        .name(Field::name())
                        .serialisedHidden(serHidden)
                        .asMap();
            }

            static QVariantMap createProps_type(bool serHidden)
            {
                static_cast<void>(serHidden);
                using Field = ::cc_ublox::message::NavOrbFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::ListMembers::ElementMembers::OtherOrbMembers::Type;
                return
                    cc_tools_qt::property::field::ForField<Field>()
                        .name(Field::name())
                        .serialisedHidden(serHidden)
                        .add("Not available", 0)
                        .add("Offline data", 1)
                        .add("Autonomous data", 2)
                        .asMap();
            }
        }; // struct OtherOrbMembers

        static QVariantMap createProps_otherOrb(bool serHidden)
        {
            static_cast<void>(serHidden);
            using Field = ::cc_ublox::message::NavOrbFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::ListMembers::ElementMembers::OtherOrb;
            return
                cc_tools_qt::property::field::ForField<Field>()
                    .name(Field::name())
                    .serialisedHidden(serHidden)
                    .add(OtherOrbMembers::createProps_anoAopUsability(true))
                    .add(OtherOrbMembers::createProps_type(true))
                    .asMap();
        }
    }; // struct ElementMembers

    static QVariantMap createProps_element(bool serHidden)
    {
        static_cast<void>(serHidden);
        using Field = ::cc_ublox::message::NavOrbFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::ListMembers::Element;
        return
            cc_tools_qt::property::field::ForField<Field>()
                .name(Field::name())
                .serialisedHidden(serHidden)
                .add(ElementMembers::createProps_gnssId(serHidden))
                .add(ElementMembers::createProps_svid(serHidden))
                .add(ElementMembers::createProps_svFlag(serHidden))
                .add(ElementMembers::createProps_eph(serHidden))
                .add(ElementMembers::createProps_alm(serHidden))
                .add(ElementMembers::createProps_otherOrb(serHidden))
                .serialisedHidden()
                .asMap();
    }
}; // struct ListMembers

static QVariantMap createProps_list(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::NavOrbFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::List;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .serialisedHidden()
            .add(ListMembers::createProps_element(serHidden))
            .appendIndexToElementName()
            .asMap();
}

QVariantList createProps()
{
    QVariantList props;
    props.append(createProps_itow(false));
    props.append(createProps_version(false));
    props.append(createProps_numSv(false));
    props.append(createProps_reserved1(false));
    props.append(createProps_list(false));
    return props;
}

} // namespace

class NavOrbImpl : public
    cc_tools_qt::ProtocolMessageBase<
        ::cc_ublox::message::NavOrb<cc_tools_qt_plugin::cc_ublox::Message, cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>,
        NavOrbImpl
    >
{
public:
    NavOrbImpl() = default;
    NavOrbImpl(const NavOrbImpl&) = delete;
    NavOrbImpl(NavOrbImpl&&) = delete;
    virtual ~NavOrbImpl() = default;
    NavOrbImpl& operator=(const NavOrbImpl&) = default;
    NavOrbImpl& operator=(NavOrbImpl&&) = default;

protected:
    virtual const QVariantList& fieldsPropertiesImpl() const override
    {
        static const QVariantList Props = createProps();
        return Props;
    }
};

NavOrb::NavOrb() : m_pImpl(new NavOrbImpl) {}
NavOrb::~NavOrb() = default;

NavOrb& NavOrb::operator=(const NavOrb& other)
{
    *m_pImpl = *other.m_pImpl;
    return *this;
}

NavOrb& NavOrb::operator=(NavOrb&& other)
{
    *m_pImpl = std::move(*other.m_pImpl);
    return *this;
}

NavOrb::MsgIdParamType NavOrb::doGetId()
{
    return ::cc_ublox::message::NavOrb<cc_tools_qt_plugin::cc_ublox::Message, cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::doGetId();
}

const char* NavOrb::nameImpl() const
{
    return static_cast<const cc_tools_qt::Message*>(m_pImpl.get())->name();
}

const QVariantList& NavOrb::fieldsPropertiesImpl() const
{
    return m_pImpl->fieldsProperties();
}

void NavOrb::dispatchImpl(cc_tools_qt::MessageHandler& handler)
{
    static_cast<cc_tools_qt::Message*>(m_pImpl.get())->dispatch(handler);
}

void NavOrb::resetImpl()
{
    m_pImpl->reset();
}

bool NavOrb::assignImpl(const cc_tools_qt::Message& other)
{
    auto* castedOther = dynamic_cast<const NavOrb*>(&other);
    if (castedOther == nullptr) {
        return false;
    }
    return m_pImpl->assign(*castedOther->m_pImpl);
}

NavOrb::MsgIdParamType NavOrb::getIdImpl() const
{
    return m_pImpl->getId();
}

comms::ErrorStatus NavOrb::readImpl(ReadIterator& iter, std::size_t len)
{
    return m_pImpl->read(iter, len);
}

comms::ErrorStatus NavOrb::writeImpl(WriteIterator& iter, std::size_t len) const
{
    return m_pImpl->write(iter, len);
}

bool NavOrb::validImpl() const
{
    return m_pImpl->valid();
}

std::size_t NavOrb::lengthImpl() const
{
    return m_pImpl->length();
}

bool NavOrb::refreshImpl()
{
    return m_pImpl->refresh();
}

} // namespace message

} // namespace cc_ublox

} // namespace cc_tools_qt_plugin
