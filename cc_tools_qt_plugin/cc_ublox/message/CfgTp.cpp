// Generated by commsdsl2tools_qt v6.3.2

#include "CfgTp.h"

#include "cc_tools_qt/ProtocolMessageBase.h"
#include "cc_tools_qt/property/field.h"
#include "cc_tools_qt_plugin/cc_ublox/field/Res1.h"
#include "cc_tools_qt_plugin/cc_ublox/options/DefaultOptions.h"
#include "cc_ublox/message/CfgTp.h"

namespace cc_tools_qt_plugin
{

namespace cc_ublox
{

namespace message
{

namespace
{

static QVariantMap createProps_interval(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::CfgTpFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::Interval;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .asMap();
}

static QVariantMap createProps_length(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::CfgTpFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::Length;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .asMap();
}

static QVariantMap createProps_status(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::CfgTpFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::Status;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .add("Negative", -1)
            .add("Off", 0)
            .add("Positive", 1)
            .asMap();
}

static QVariantMap createProps_timeRef(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::CfgTpFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::TimeRef;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .add("UTC", 0)
            .add("GPS", 1)
            .add("Local", 2)
            .asMap();
}

static QVariantMap createProps_flags(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::CfgTpFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::Flags;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .add(0U, "syncMode")
            .asMap();
}

static QVariantMap createProps_res(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::CfgTpFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::Res;
    auto props = cc_tools_qt_plugin::cc_ublox::field::createProps_res1(Field::name(), serHidden);
    return props;
}

static QVariantMap createProps_antennaCableDelay(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::CfgTpFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::AntennaCableDelay;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .asMap();
}

static QVariantMap createProps_rfGroupDelay(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::CfgTpFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::RfGroupDelay;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .asMap();
}

static QVariantMap createProps_userDelay(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::CfgTpFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::UserDelay;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .asMap();
}

QVariantList createProps()
{
    QVariantList props;
    props.append(createProps_interval(false));
    props.append(createProps_length(false));
    props.append(createProps_status(false));
    props.append(createProps_timeRef(false));
    props.append(createProps_flags(false));
    props.append(createProps_res(false));
    props.append(createProps_antennaCableDelay(false));
    props.append(createProps_rfGroupDelay(false));
    props.append(createProps_userDelay(false));
    return props;
}

} // namespace

class CfgTpImpl : public
    cc_tools_qt::ProtocolMessageBase<
        ::cc_ublox::message::CfgTp<cc_tools_qt_plugin::cc_ublox::Message, cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>,
        CfgTpImpl
    >
{
public:
    CfgTpImpl() = default;
    CfgTpImpl(const CfgTpImpl&) = delete;
    CfgTpImpl(CfgTpImpl&&) = delete;
    virtual ~CfgTpImpl() = default;
    CfgTpImpl& operator=(const CfgTpImpl&) = default;
    CfgTpImpl& operator=(CfgTpImpl&&) = default;

protected:
    virtual const QVariantList& fieldsPropertiesImpl() const override
    {
        static const QVariantList Props = createProps();
        return Props;
    }
};

CfgTp::CfgTp() : m_pImpl(new CfgTpImpl) {}
CfgTp::~CfgTp() = default;

CfgTp& CfgTp::operator=(const CfgTp& other)
{
    *m_pImpl = *other.m_pImpl;
    return *this;
}

CfgTp& CfgTp::operator=(CfgTp&& other)
{
    *m_pImpl = std::move(*other.m_pImpl);
    return *this;
}

CfgTp::MsgIdParamType CfgTp::doGetId()
{
    return ::cc_ublox::message::CfgTp<cc_tools_qt_plugin::cc_ublox::Message, cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::doGetId();
}

const char* CfgTp::nameImpl() const
{
    return static_cast<const cc_tools_qt::Message*>(m_pImpl.get())->name();
}

const QVariantList& CfgTp::fieldsPropertiesImpl() const
{
    return m_pImpl->fieldsProperties();
}

void CfgTp::dispatchImpl(cc_tools_qt::MessageHandler& handler)
{
    static_cast<cc_tools_qt::Message*>(m_pImpl.get())->dispatch(handler);
}

void CfgTp::resetImpl()
{
    m_pImpl->reset();
}

bool CfgTp::assignImpl(const cc_tools_qt::Message& other)
{
    auto* castedOther = dynamic_cast<const CfgTp*>(&other);
    if (castedOther == nullptr) {
        return false;
    }
    return m_pImpl->assign(*castedOther->m_pImpl);
}

CfgTp::MsgIdParamType CfgTp::getIdImpl() const
{
    return m_pImpl->getId();
}

comms::ErrorStatus CfgTp::readImpl(ReadIterator& iter, std::size_t len)
{
    return m_pImpl->read(iter, len);
}

comms::ErrorStatus CfgTp::writeImpl(WriteIterator& iter, std::size_t len) const
{
    return m_pImpl->write(iter, len);
}

bool CfgTp::validImpl() const
{
    return m_pImpl->valid();
}

std::size_t CfgTp::lengthImpl() const
{
    return m_pImpl->length();
}

bool CfgTp::refreshImpl()
{
    return m_pImpl->refresh();
}

} // namespace message

} // namespace cc_ublox

} // namespace cc_tools_qt_plugin
