// Generated by commsdsl2tools_qt v6.3.0

#include "CfgRatePoll.h"

#include "cc_tools_qt/ProtocolMessageBase.h"
#include "cc_tools_qt/property/field.h"
#include "cc_tools_qt_plugin/cc_ublox/options/DefaultOptions.h"
#include "cc_ublox/message/CfgRatePoll.h"

namespace cc_tools_qt_plugin
{

namespace cc_ublox
{

namespace message
{

namespace
{

QVariantList createProps()
{
    QVariantList props;
    return props;
}

} // namespace

class CfgRatePollImpl : public
    cc_tools_qt::ProtocolMessageBase<
        ::cc_ublox::message::CfgRatePoll<cc_tools_qt_plugin::cc_ublox::Message, cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>,
        CfgRatePollImpl
    >
{
public:
    CfgRatePollImpl() = default;
    CfgRatePollImpl(const CfgRatePollImpl&) = delete;
    CfgRatePollImpl(CfgRatePollImpl&&) = delete;
    virtual ~CfgRatePollImpl() = default;
    CfgRatePollImpl& operator=(const CfgRatePollImpl&) = default;
    CfgRatePollImpl& operator=(CfgRatePollImpl&&) = default;

protected:
    virtual const QVariantList& fieldsPropertiesImpl() const override
    {
        static const QVariantList Props = createProps();
        return Props;
    }
};

CfgRatePoll::CfgRatePoll() : m_pImpl(new CfgRatePollImpl) {}
CfgRatePoll::~CfgRatePoll() = default;

CfgRatePoll& CfgRatePoll::operator=(const CfgRatePoll& other)
{
    *m_pImpl = *other.m_pImpl;
    return *this;
}

CfgRatePoll& CfgRatePoll::operator=(CfgRatePoll&& other)
{
    *m_pImpl = std::move(*other.m_pImpl);
    return *this;
}

CfgRatePoll::MsgIdParamType CfgRatePoll::doGetId()
{
    return ::cc_ublox::message::CfgRatePoll<cc_tools_qt_plugin::cc_ublox::Message, cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::doGetId();
}

const char* CfgRatePoll::nameImpl() const
{
    return static_cast<const cc_tools_qt::Message*>(m_pImpl.get())->name();
}

const QVariantList& CfgRatePoll::fieldsPropertiesImpl() const
{
    return m_pImpl->fieldsProperties();
}

void CfgRatePoll::dispatchImpl(cc_tools_qt::MessageHandler& handler)
{
    static_cast<cc_tools_qt::Message*>(m_pImpl.get())->dispatch(handler);
}

void CfgRatePoll::resetImpl()
{
    m_pImpl->reset();
}

bool CfgRatePoll::assignImpl(const cc_tools_qt::Message& other)
{
    auto* castedOther = dynamic_cast<const CfgRatePoll*>(&other);
    if (castedOther == nullptr) {
        return false;
    }
    return m_pImpl->assign(*castedOther->m_pImpl);
}

CfgRatePoll::MsgIdParamType CfgRatePoll::getIdImpl() const
{
    return m_pImpl->getId();
}

comms::ErrorStatus CfgRatePoll::readImpl(ReadIterator& iter, std::size_t len)
{
    return m_pImpl->read(iter, len);
}

comms::ErrorStatus CfgRatePoll::writeImpl(WriteIterator& iter, std::size_t len) const
{
    return m_pImpl->write(iter, len);
}

bool CfgRatePoll::validImpl() const
{
    return m_pImpl->valid();
}

std::size_t CfgRatePoll::lengthImpl() const
{
    return m_pImpl->length();
}

bool CfgRatePoll::refreshImpl()
{
    return m_pImpl->refresh();
}

} // namespace message

} // namespace cc_ublox

} // namespace cc_tools_qt_plugin
