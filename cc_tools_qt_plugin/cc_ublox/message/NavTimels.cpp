// Generated by commsdsl2tools_qt v6.3.3

#include "NavTimels.h"

#include "cc_tools_qt/ProtocolMessageBase.h"
#include "cc_tools_qt/property/field.h"
#include "cc_tools_qt_plugin/cc_ublox/field/Itow.h"
#include "cc_tools_qt_plugin/cc_ublox/field/Res3.h"
#include "cc_tools_qt_plugin/cc_ublox/options/DefaultOptions.h"
#include "cc_ublox/message/NavTimels.h"

namespace cc_tools_qt_plugin
{

namespace cc_ublox
{

namespace message
{

namespace
{

static QVariantMap createProps_itow(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::NavTimelsFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::Itow;
    auto props = cc_tools_qt_plugin::cc_ublox::field::createProps_itow(Field::name(), serHidden);
    return props;
}

static QVariantMap createProps_version(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::NavTimelsFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::Version;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .asMap();
}

static QVariantMap createProps_reserved1(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::NavTimelsFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::Reserved1;
    auto props = cc_tools_qt_plugin::cc_ublox::field::createProps_res3(Field::name(), serHidden);
    return props;
}

static QVariantMap createProps_srcOfCurrLs(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::NavTimelsFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::SrcOfCurrLs;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .add("Default", 0)
            .add("Derived", 1)
            .add("GPS", 2)
            .add("SBAS", 3)
            .add("BeiDou", 4)
            .add("Galileo", 5)
            .add("Aided data", 6)
            .add("Configured", 7)
            .add("Unknown", 255)
            .asMap();
}

static QVariantMap createProps_currLs(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::NavTimelsFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::CurrLs;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .asMap();
}

static QVariantMap createProps_srcOfLsChange(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::NavTimelsFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::SrcOfLsChange;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .add("No source", 0)
            .add("GPS", 2)
            .add("SBAS", 3)
            .add("BeiDou", 4)
            .add("Galileo", 5)
            .add("GLONASS", 6)
            .asMap();
}

static QVariantMap createProps_lsChange(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::NavTimelsFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::LsChange;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .asMap();
}

static QVariantMap createProps_timeToLsEvent(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::NavTimelsFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::TimeToLsEvent;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .asMap();
}

static QVariantMap createProps_dateOfLsGpsWn(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::NavTimelsFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::DateOfLsGpsWn;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .asMap();
}

static QVariantMap createProps_dateOfLsGpsDn(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::NavTimelsFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::DateOfLsGpsDn;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .asMap();
}

static QVariantMap createProps_reserved2(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::NavTimelsFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::Reserved2;
    auto props = cc_tools_qt_plugin::cc_ublox::field::createProps_res3(Field::name(), serHidden);
    return props;
}

static QVariantMap createProps_valid(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::NavTimelsFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::Valid;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .add(0U, "validCurrLs")
            .add(1U, "validTimeToLsEvent")
            .asMap();
}

QVariantList createProps()
{
    QVariantList props;
    props.append(createProps_itow(false));
    props.append(createProps_version(false));
    props.append(createProps_reserved1(false));
    props.append(createProps_srcOfCurrLs(false));
    props.append(createProps_currLs(false));
    props.append(createProps_srcOfLsChange(false));
    props.append(createProps_lsChange(false));
    props.append(createProps_timeToLsEvent(false));
    props.append(createProps_dateOfLsGpsWn(false));
    props.append(createProps_dateOfLsGpsDn(false));
    props.append(createProps_reserved2(false));
    props.append(createProps_valid(false));
    return props;
}

} // namespace

class NavTimelsImpl : public
    cc_tools_qt::ProtocolMessageBase<
        ::cc_ublox::message::NavTimels<cc_tools_qt_plugin::cc_ublox::Message, cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>,
        NavTimelsImpl
    >
{
public:
    NavTimelsImpl() = default;
    NavTimelsImpl(const NavTimelsImpl&) = delete;
    NavTimelsImpl(NavTimelsImpl&&) = delete;
    virtual ~NavTimelsImpl() = default;
    NavTimelsImpl& operator=(const NavTimelsImpl&) = default;
    NavTimelsImpl& operator=(NavTimelsImpl&&) = default;

protected:
    virtual const QVariantList& fieldsPropertiesImpl() const override
    {
        static const QVariantList Props = createProps();
        return Props;
    }
};

NavTimels::NavTimels() : m_pImpl(new NavTimelsImpl) {}
NavTimels::~NavTimels() = default;

NavTimels& NavTimels::operator=(const NavTimels& other)
{
    *m_pImpl = *other.m_pImpl;
    return *this;
}

NavTimels& NavTimels::operator=(NavTimels&& other)
{
    *m_pImpl = std::move(*other.m_pImpl);
    return *this;
}

NavTimels::MsgIdParamType NavTimels::doGetId()
{
    return ::cc_ublox::message::NavTimels<cc_tools_qt_plugin::cc_ublox::Message, cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::doGetId();
}

const char* NavTimels::nameImpl() const
{
    return static_cast<const cc_tools_qt::Message*>(m_pImpl.get())->name();
}

const QVariantList& NavTimels::fieldsPropertiesImpl() const
{
    return m_pImpl->fieldsProperties();
}

void NavTimels::dispatchImpl(cc_tools_qt::MessageHandler& handler)
{
    static_cast<cc_tools_qt::Message*>(m_pImpl.get())->dispatch(handler);
}

void NavTimels::resetImpl()
{
    m_pImpl->reset();
}

bool NavTimels::assignImpl(const cc_tools_qt::Message& other)
{
    auto* castedOther = dynamic_cast<const NavTimels*>(&other);
    if (castedOther == nullptr) {
        return false;
    }
    return m_pImpl->assign(*castedOther->m_pImpl);
}

NavTimels::MsgIdParamType NavTimels::getIdImpl() const
{
    return m_pImpl->getId();
}

comms::ErrorStatus NavTimels::readImpl(ReadIterator& iter, std::size_t len)
{
    return m_pImpl->read(iter, len);
}

comms::ErrorStatus NavTimels::writeImpl(WriteIterator& iter, std::size_t len) const
{
    return m_pImpl->write(iter, len);
}

bool NavTimels::validImpl() const
{
    return m_pImpl->valid();
}

std::size_t NavTimels::lengthImpl() const
{
    return m_pImpl->length();
}

bool NavTimels::refreshImpl()
{
    return m_pImpl->refresh();
}

} // namespace message

} // namespace cc_ublox

} // namespace cc_tools_qt_plugin
