// Generated by commsdsl2tools_qt v6.3.0

#include "NavTimeutcPoll.h"

#include "cc_tools_qt/ProtocolMessageBase.h"
#include "cc_tools_qt/property/field.h"
#include "cc_tools_qt_plugin/cc_ublox/options/DefaultOptions.h"
#include "cc_ublox/message/NavTimeutcPoll.h"

namespace cc_tools_qt_plugin
{

namespace cc_ublox
{

namespace message
{

namespace
{

QVariantList createProps()
{
    QVariantList props;
    return props;
}

} // namespace

class NavTimeutcPollImpl : public
    cc_tools_qt::ProtocolMessageBase<
        ::cc_ublox::message::NavTimeutcPoll<cc_tools_qt_plugin::cc_ublox::Message, cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>,
        NavTimeutcPollImpl
    >
{
public:
    NavTimeutcPollImpl() = default;
    NavTimeutcPollImpl(const NavTimeutcPollImpl&) = delete;
    NavTimeutcPollImpl(NavTimeutcPollImpl&&) = delete;
    virtual ~NavTimeutcPollImpl() = default;
    NavTimeutcPollImpl& operator=(const NavTimeutcPollImpl&) = default;
    NavTimeutcPollImpl& operator=(NavTimeutcPollImpl&&) = default;

protected:
    virtual const QVariantList& fieldsPropertiesImpl() const override
    {
        static const QVariantList Props = createProps();
        return Props;
    }
};

NavTimeutcPoll::NavTimeutcPoll() : m_pImpl(new NavTimeutcPollImpl) {}
NavTimeutcPoll::~NavTimeutcPoll() = default;

NavTimeutcPoll& NavTimeutcPoll::operator=(const NavTimeutcPoll& other)
{
    *m_pImpl = *other.m_pImpl;
    return *this;
}

NavTimeutcPoll& NavTimeutcPoll::operator=(NavTimeutcPoll&& other)
{
    *m_pImpl = std::move(*other.m_pImpl);
    return *this;
}

NavTimeutcPoll::MsgIdParamType NavTimeutcPoll::doGetId()
{
    return ::cc_ublox::message::NavTimeutcPoll<cc_tools_qt_plugin::cc_ublox::Message, cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::doGetId();
}

const char* NavTimeutcPoll::nameImpl() const
{
    return static_cast<const cc_tools_qt::Message*>(m_pImpl.get())->name();
}

const QVariantList& NavTimeutcPoll::fieldsPropertiesImpl() const
{
    return m_pImpl->fieldsProperties();
}

void NavTimeutcPoll::dispatchImpl(cc_tools_qt::MessageHandler& handler)
{
    static_cast<cc_tools_qt::Message*>(m_pImpl.get())->dispatch(handler);
}

void NavTimeutcPoll::resetImpl()
{
    m_pImpl->reset();
}

bool NavTimeutcPoll::assignImpl(const cc_tools_qt::Message& other)
{
    auto* castedOther = dynamic_cast<const NavTimeutcPoll*>(&other);
    if (castedOther == nullptr) {
        return false;
    }
    return m_pImpl->assign(*castedOther->m_pImpl);
}

NavTimeutcPoll::MsgIdParamType NavTimeutcPoll::getIdImpl() const
{
    return m_pImpl->getId();
}

comms::ErrorStatus NavTimeutcPoll::readImpl(ReadIterator& iter, std::size_t len)
{
    return m_pImpl->read(iter, len);
}

comms::ErrorStatus NavTimeutcPoll::writeImpl(WriteIterator& iter, std::size_t len) const
{
    return m_pImpl->write(iter, len);
}

bool NavTimeutcPoll::validImpl() const
{
    return m_pImpl->valid();
}

std::size_t NavTimeutcPoll::lengthImpl() const
{
    return m_pImpl->length();
}

bool NavTimeutcPoll::refreshImpl()
{
    return m_pImpl->refresh();
}

} // namespace message

} // namespace cc_ublox

} // namespace cc_tools_qt_plugin
