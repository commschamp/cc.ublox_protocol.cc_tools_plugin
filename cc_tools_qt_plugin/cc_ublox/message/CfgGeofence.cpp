// Generated by commsdsl2tools_qt v6.3.4

#include "CfgGeofence.h"

#include "cc_tools_qt/ProtocolMessageBase.h"
#include "cc_tools_qt/property/field.h"
#include "cc_tools_qt_plugin/cc_ublox/field/Lat.h"
#include "cc_tools_qt_plugin/cc_ublox/field/Lon.h"
#include "cc_tools_qt_plugin/cc_ublox/field/Res1.h"
#include "cc_tools_qt_plugin/cc_ublox/options/DefaultOptions.h"
#include "cc_ublox/message/CfgGeofence.h"

namespace cc_tools_qt_plugin
{

namespace cc_ublox
{

namespace message
{

namespace
{

static QVariantMap createProps_version(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::CfgGeofenceFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::Version;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .asMap();
}

static QVariantMap createProps_numFences(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::CfgGeofenceFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::NumFences;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .readOnly()
            .asMap();
}

static QVariantMap createProps_confLvl(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::CfgGeofenceFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::ConfLvl;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .asMap();
}

static QVariantMap createProps_reserved1(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::CfgGeofenceFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::Reserved1;
    auto props = cc_tools_qt_plugin::cc_ublox::field::createProps_res1(Field::name(), serHidden);
    return props;
}

static QVariantMap createProps_pioEnabled(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::CfgGeofenceFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::PioEnabled;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .add("Disable", 0)
            .add("Enable", 1)
            .asMap();
}

static QVariantMap createProps_pinPolarity(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::CfgGeofenceFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::PinPolarity;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .add("LowInside", 0)
            .add("LowOutside", 1)
            .asMap();
}

static QVariantMap createProps_pin(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::CfgGeofenceFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::Pin;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .asMap();
}

static QVariantMap createProps_reserved2(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::CfgGeofenceFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::Reserved2;
    auto props = cc_tools_qt_plugin::cc_ublox::field::createProps_res1(Field::name(), serHidden);
    return props;
}

struct ListMembers
{
    struct ElementMembers
    {
        static QVariantMap createProps_lat(bool serHidden)
        {
            static_cast<void>(serHidden);
            using Field = ::cc_ublox::message::CfgGeofenceFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::ListMembers::ElementMembers::Lat;
            auto props = cc_tools_qt_plugin::cc_ublox::field::createProps_lat(Field::name(), serHidden);
            return props;
        }

        static QVariantMap createProps_lon(bool serHidden)
        {
            static_cast<void>(serHidden);
            using Field = ::cc_ublox::message::CfgGeofenceFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::ListMembers::ElementMembers::Lon;
            auto props = cc_tools_qt_plugin::cc_ublox::field::createProps_lon(Field::name(), serHidden);
            return props;
        }

        static QVariantMap createProps_radius(bool serHidden)
        {
            static_cast<void>(serHidden);
            using Field = ::cc_ublox::message::CfgGeofenceFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::ListMembers::ElementMembers::Radius;
            return
                cc_tools_qt::property::field::ForField<Field>()
                    .name(Field::name())
                    .serialisedHidden(serHidden)
                    .scaledDecimals(2U)
                    .asMap();
        }
    }; // struct ElementMembers

    static QVariantMap createProps_element(bool serHidden)
    {
        static_cast<void>(serHidden);
        using Field = ::cc_ublox::message::CfgGeofenceFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::ListMembers::Element;
        return
            cc_tools_qt::property::field::ForField<Field>()
                .name(Field::name())
                .serialisedHidden(serHidden)
                .add(ElementMembers::createProps_lat(serHidden))
                .add(ElementMembers::createProps_lon(serHidden))
                .add(ElementMembers::createProps_radius(serHidden))
                .serialisedHidden()
                .asMap();
    }
}; // struct ListMembers

static QVariantMap createProps_list(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::CfgGeofenceFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::List;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .serialisedHidden()
            .add(ListMembers::createProps_element(serHidden))
            .appendIndexToElementName()
            .asMap();
}

QVariantList createProps()
{
    QVariantList props;
    props.append(createProps_version(false));
    props.append(createProps_numFences(false));
    props.append(createProps_confLvl(false));
    props.append(createProps_reserved1(false));
    props.append(createProps_pioEnabled(false));
    props.append(createProps_pinPolarity(false));
    props.append(createProps_pin(false));
    props.append(createProps_reserved2(false));
    props.append(createProps_list(false));
    return props;
}

} // namespace

class CfgGeofenceImpl : public
    cc_tools_qt::ProtocolMessageBase<
        ::cc_ublox::message::CfgGeofence<cc_tools_qt_plugin::cc_ublox::Message, cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>,
        CfgGeofenceImpl
    >
{
public:
    CfgGeofenceImpl() = default;
    CfgGeofenceImpl(const CfgGeofenceImpl&) = delete;
    CfgGeofenceImpl(CfgGeofenceImpl&&) = delete;
    virtual ~CfgGeofenceImpl() = default;
    CfgGeofenceImpl& operator=(const CfgGeofenceImpl&) = default;
    CfgGeofenceImpl& operator=(CfgGeofenceImpl&&) = default;

protected:
    virtual const QVariantList& fieldsPropertiesImpl() const override
    {
        static const QVariantList Props = createProps();
        return Props;
    }
};

CfgGeofence::CfgGeofence() : m_pImpl(new CfgGeofenceImpl) {}
CfgGeofence::~CfgGeofence() = default;

CfgGeofence& CfgGeofence::operator=(const CfgGeofence& other)
{
    *m_pImpl = *other.m_pImpl;
    return *this;
}

CfgGeofence& CfgGeofence::operator=(CfgGeofence&& other)
{
    *m_pImpl = std::move(*other.m_pImpl);
    return *this;
}

CfgGeofence::MsgIdParamType CfgGeofence::doGetId()
{
    return ::cc_ublox::message::CfgGeofence<cc_tools_qt_plugin::cc_ublox::Message, cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::doGetId();
}

const char* CfgGeofence::nameImpl() const
{
    return static_cast<const cc_tools_qt::Message*>(m_pImpl.get())->name();
}

const QVariantList& CfgGeofence::fieldsPropertiesImpl() const
{
    return m_pImpl->fieldsProperties();
}

void CfgGeofence::dispatchImpl(cc_tools_qt::MessageHandler& handler)
{
    static_cast<cc_tools_qt::Message*>(m_pImpl.get())->dispatch(handler);
}

void CfgGeofence::resetImpl()
{
    m_pImpl->reset();
}

bool CfgGeofence::assignImpl(const cc_tools_qt::Message& other)
{
    auto* castedOther = dynamic_cast<const CfgGeofence*>(&other);
    if (castedOther == nullptr) {
        return false;
    }
    return m_pImpl->assign(*castedOther->m_pImpl);
}

CfgGeofence::MsgIdParamType CfgGeofence::getIdImpl() const
{
    return m_pImpl->getId();
}

comms::ErrorStatus CfgGeofence::readImpl(ReadIterator& iter, std::size_t len)
{
    return m_pImpl->read(iter, len);
}

comms::ErrorStatus CfgGeofence::writeImpl(WriteIterator& iter, std::size_t len) const
{
    return m_pImpl->write(iter, len);
}

bool CfgGeofence::validImpl() const
{
    return m_pImpl->valid();
}

std::size_t CfgGeofence::lengthImpl() const
{
    return m_pImpl->length();
}

bool CfgGeofence::refreshImpl()
{
    return m_pImpl->refresh();
}

} // namespace message

} // namespace cc_ublox

} // namespace cc_tools_qt_plugin
