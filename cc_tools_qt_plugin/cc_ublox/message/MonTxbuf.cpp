// Generated by commsdsl2tools_qt v6.3.3

#include "MonTxbuf.h"

#include "cc_tools_qt/ProtocolMessageBase.h"
#include "cc_tools_qt/property/field.h"
#include "cc_tools_qt_plugin/cc_ublox/field/Res1.h"
#include "cc_tools_qt_plugin/cc_ublox/options/DefaultOptions.h"
#include "cc_ublox/message/MonTxbuf.h"

namespace cc_tools_qt_plugin
{

namespace cc_ublox
{

namespace message
{

namespace
{

struct PendingMembers
{
    static QVariantMap createProps_element(bool serHidden)
    {
        static_cast<void>(serHidden);
        using Field = ::cc_ublox::message::MonTxbufFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::PendingMembers::Element;
        return
            cc_tools_qt::property::field::ForField<Field>()
                .name(Field::name())
                .serialisedHidden(serHidden)
                .asMap();
    }
}; // struct PendingMembers

static QVariantMap createProps_pending(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::MonTxbufFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::Pending;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .serialisedHidden()
            .add(PendingMembers::createProps_element(serHidden))
            .appendIndexToElementName()
            .asMap();
}

struct UsageMembers
{
    static QVariantMap createProps_element(bool serHidden)
    {
        static_cast<void>(serHidden);
        using Field = ::cc_ublox::message::MonTxbufFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::UsageMembers::Element;
        return
            cc_tools_qt::property::field::ForField<Field>()
                .name(Field::name())
                .serialisedHidden(serHidden)
                .asMap();
    }
}; // struct UsageMembers

static QVariantMap createProps_usage(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::MonTxbufFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::Usage;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .serialisedHidden()
            .add(UsageMembers::createProps_element(serHidden))
            .appendIndexToElementName()
            .asMap();
}

struct PeakUsageMembers
{
    static QVariantMap createProps_element(bool serHidden)
    {
        static_cast<void>(serHidden);
        using Field = ::cc_ublox::message::MonTxbufFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::PeakUsageMembers::Element;
        return
            cc_tools_qt::property::field::ForField<Field>()
                .name(Field::name())
                .serialisedHidden(serHidden)
                .asMap();
    }
}; // struct PeakUsageMembers

static QVariantMap createProps_peakUsage(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::MonTxbufFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::PeakUsage;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .serialisedHidden()
            .add(PeakUsageMembers::createProps_element(serHidden))
            .appendIndexToElementName()
            .asMap();
}

static QVariantMap createProps_tUsage(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::MonTxbufFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::TUsage;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .asMap();
}

static QVariantMap createProps_tPeakusage(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::MonTxbufFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::TPeakusage;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .asMap();
}

struct ErrorsMembers
{
    static QVariantMap createProps_limit(bool serHidden)
    {
        static_cast<void>(serHidden);
        using Field = ::cc_ublox::message::MonTxbufFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::ErrorsMembers::Limit;
        return
            cc_tools_qt::property::field::ForField<Field>()
                .name(Field::name())
                .serialisedHidden(serHidden)
                .asMap();
    }

    static QVariantMap createProps_bits(bool serHidden)
    {
        static_cast<void>(serHidden);
        using Field = ::cc_ublox::message::MonTxbufFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::ErrorsMembers::Bits;
        return
            cc_tools_qt::property::field::ForField<Field>()
                .name(Field::name())
                .serialisedHidden(serHidden)
                .add(0U, "mem")
                .add(1U, "alloc")
                .asMap();
    }
}; // struct ErrorsMembers

static QVariantMap createProps_errors(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::MonTxbufFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::Errors;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .add(ErrorsMembers::createProps_limit(true))
            .add(ErrorsMembers::createProps_bits(true))
            .asMap();
}

static QVariantMap createProps_reserved1(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::MonTxbufFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::Reserved1;
    auto props = cc_tools_qt_plugin::cc_ublox::field::createProps_res1(Field::name(), serHidden);
    return props;
}

QVariantList createProps()
{
    QVariantList props;
    props.append(createProps_pending(false));
    props.append(createProps_usage(false));
    props.append(createProps_peakUsage(false));
    props.append(createProps_tUsage(false));
    props.append(createProps_tPeakusage(false));
    props.append(createProps_errors(false));
    props.append(createProps_reserved1(false));
    return props;
}

} // namespace

class MonTxbufImpl : public
    cc_tools_qt::ProtocolMessageBase<
        ::cc_ublox::message::MonTxbuf<cc_tools_qt_plugin::cc_ublox::Message, cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>,
        MonTxbufImpl
    >
{
public:
    MonTxbufImpl() = default;
    MonTxbufImpl(const MonTxbufImpl&) = delete;
    MonTxbufImpl(MonTxbufImpl&&) = delete;
    virtual ~MonTxbufImpl() = default;
    MonTxbufImpl& operator=(const MonTxbufImpl&) = default;
    MonTxbufImpl& operator=(MonTxbufImpl&&) = default;

protected:
    virtual const QVariantList& fieldsPropertiesImpl() const override
    {
        static const QVariantList Props = createProps();
        return Props;
    }
};

MonTxbuf::MonTxbuf() : m_pImpl(new MonTxbufImpl) {}
MonTxbuf::~MonTxbuf() = default;

MonTxbuf& MonTxbuf::operator=(const MonTxbuf& other)
{
    *m_pImpl = *other.m_pImpl;
    return *this;
}

MonTxbuf& MonTxbuf::operator=(MonTxbuf&& other)
{
    *m_pImpl = std::move(*other.m_pImpl);
    return *this;
}

MonTxbuf::MsgIdParamType MonTxbuf::doGetId()
{
    return ::cc_ublox::message::MonTxbuf<cc_tools_qt_plugin::cc_ublox::Message, cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::doGetId();
}

const char* MonTxbuf::nameImpl() const
{
    return static_cast<const cc_tools_qt::Message*>(m_pImpl.get())->name();
}

const QVariantList& MonTxbuf::fieldsPropertiesImpl() const
{
    return m_pImpl->fieldsProperties();
}

void MonTxbuf::dispatchImpl(cc_tools_qt::MessageHandler& handler)
{
    static_cast<cc_tools_qt::Message*>(m_pImpl.get())->dispatch(handler);
}

void MonTxbuf::resetImpl()
{
    m_pImpl->reset();
}

bool MonTxbuf::assignImpl(const cc_tools_qt::Message& other)
{
    auto* castedOther = dynamic_cast<const MonTxbuf*>(&other);
    if (castedOther == nullptr) {
        return false;
    }
    return m_pImpl->assign(*castedOther->m_pImpl);
}

MonTxbuf::MsgIdParamType MonTxbuf::getIdImpl() const
{
    return m_pImpl->getId();
}

comms::ErrorStatus MonTxbuf::readImpl(ReadIterator& iter, std::size_t len)
{
    return m_pImpl->read(iter, len);
}

comms::ErrorStatus MonTxbuf::writeImpl(WriteIterator& iter, std::size_t len) const
{
    return m_pImpl->write(iter, len);
}

bool MonTxbuf::validImpl() const
{
    return m_pImpl->valid();
}

std::size_t MonTxbuf::lengthImpl() const
{
    return m_pImpl->length();
}

bool MonTxbuf::refreshImpl()
{
    return m_pImpl->refresh();
}

} // namespace message

} // namespace cc_ublox

} // namespace cc_tools_qt_plugin
