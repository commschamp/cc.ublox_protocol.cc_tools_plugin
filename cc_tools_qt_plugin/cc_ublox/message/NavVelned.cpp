// Generated by commsdsl2tools_qt v6.3.3

#include "NavVelned.h"

#include "cc_tools_qt/ProtocolMessageBase.h"
#include "cc_tools_qt/property/field.h"
#include "cc_tools_qt_plugin/cc_ublox/field/Heading.h"
#include "cc_tools_qt_plugin/cc_ublox/field/Itow.h"
#include "cc_tools_qt_plugin/cc_ublox/field/SAcc.h"
#include "cc_tools_qt_plugin/cc_ublox/options/DefaultOptions.h"
#include "cc_ublox/message/NavVelned.h"

namespace cc_tools_qt_plugin
{

namespace cc_ublox
{

namespace message
{

namespace
{

static QVariantMap createProps_itow(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::NavVelnedFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::Itow;
    auto props = cc_tools_qt_plugin::cc_ublox::field::createProps_itow(Field::name(), serHidden);
    return props;
}

static QVariantMap createProps_velN(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::NavVelnedFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::VelN;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .asMap();
}

static QVariantMap createProps_velE(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::NavVelnedFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::VelE;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .asMap();
}

static QVariantMap createProps_velD(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::NavVelnedFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::VelD;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .asMap();
}

static QVariantMap createProps_speed(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::NavVelnedFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::Speed;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .asMap();
}

static QVariantMap createProps_gSpeed(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::NavVelnedFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::GSpeed;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .asMap();
}

static QVariantMap createProps_heading(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::NavVelnedFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::Heading;
    auto props = cc_tools_qt_plugin::cc_ublox::field::createProps_heading(Field::name(), serHidden);
    return props;
}

static QVariantMap createProps_sAcc(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::NavVelnedFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::SAcc;
    auto props = cc_tools_qt_plugin::cc_ublox::field::createProps_sAcc(Field::name(), serHidden);
    return props;
}

static QVariantMap createProps_cAcc(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::NavVelnedFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::CAcc;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .scaledDecimals(5U)
            .asMap();
}

QVariantList createProps()
{
    QVariantList props;
    props.append(createProps_itow(false));
    props.append(createProps_velN(false));
    props.append(createProps_velE(false));
    props.append(createProps_velD(false));
    props.append(createProps_speed(false));
    props.append(createProps_gSpeed(false));
    props.append(createProps_heading(false));
    props.append(createProps_sAcc(false));
    props.append(createProps_cAcc(false));
    return props;
}

} // namespace

class NavVelnedImpl : public
    cc_tools_qt::ProtocolMessageBase<
        ::cc_ublox::message::NavVelned<cc_tools_qt_plugin::cc_ublox::Message, cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>,
        NavVelnedImpl
    >
{
public:
    NavVelnedImpl() = default;
    NavVelnedImpl(const NavVelnedImpl&) = delete;
    NavVelnedImpl(NavVelnedImpl&&) = delete;
    virtual ~NavVelnedImpl() = default;
    NavVelnedImpl& operator=(const NavVelnedImpl&) = default;
    NavVelnedImpl& operator=(NavVelnedImpl&&) = default;

protected:
    virtual const QVariantList& fieldsPropertiesImpl() const override
    {
        static const QVariantList Props = createProps();
        return Props;
    }
};

NavVelned::NavVelned() : m_pImpl(new NavVelnedImpl) {}
NavVelned::~NavVelned() = default;

NavVelned& NavVelned::operator=(const NavVelned& other)
{
    *m_pImpl = *other.m_pImpl;
    return *this;
}

NavVelned& NavVelned::operator=(NavVelned&& other)
{
    *m_pImpl = std::move(*other.m_pImpl);
    return *this;
}

NavVelned::MsgIdParamType NavVelned::doGetId()
{
    return ::cc_ublox::message::NavVelned<cc_tools_qt_plugin::cc_ublox::Message, cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::doGetId();
}

const char* NavVelned::nameImpl() const
{
    return static_cast<const cc_tools_qt::Message*>(m_pImpl.get())->name();
}

const QVariantList& NavVelned::fieldsPropertiesImpl() const
{
    return m_pImpl->fieldsProperties();
}

void NavVelned::dispatchImpl(cc_tools_qt::MessageHandler& handler)
{
    static_cast<cc_tools_qt::Message*>(m_pImpl.get())->dispatch(handler);
}

void NavVelned::resetImpl()
{
    m_pImpl->reset();
}

bool NavVelned::assignImpl(const cc_tools_qt::Message& other)
{
    auto* castedOther = dynamic_cast<const NavVelned*>(&other);
    if (castedOther == nullptr) {
        return false;
    }
    return m_pImpl->assign(*castedOther->m_pImpl);
}

NavVelned::MsgIdParamType NavVelned::getIdImpl() const
{
    return m_pImpl->getId();
}

comms::ErrorStatus NavVelned::readImpl(ReadIterator& iter, std::size_t len)
{
    return m_pImpl->read(iter, len);
}

comms::ErrorStatus NavVelned::writeImpl(WriteIterator& iter, std::size_t len) const
{
    return m_pImpl->write(iter, len);
}

bool NavVelned::validImpl() const
{
    return m_pImpl->valid();
}

std::size_t NavVelned::lengthImpl() const
{
    return m_pImpl->length();
}

bool NavVelned::refreshImpl()
{
    return m_pImpl->refresh();
}

} // namespace message

} // namespace cc_ublox

} // namespace cc_tools_qt_plugin
