// Generated by commsdsl2tools_qt v6.3.0

#include "NavGeofencePoll.h"

#include "cc_tools_qt/ProtocolMessageBase.h"
#include "cc_tools_qt/property/field.h"
#include "cc_tools_qt_plugin/cc_ublox/options/DefaultOptions.h"
#include "cc_ublox/message/NavGeofencePoll.h"

namespace cc_tools_qt_plugin
{

namespace cc_ublox
{

namespace message
{

namespace
{

QVariantList createProps()
{
    QVariantList props;
    return props;
}

} // namespace

class NavGeofencePollImpl : public
    cc_tools_qt::ProtocolMessageBase<
        ::cc_ublox::message::NavGeofencePoll<cc_tools_qt_plugin::cc_ublox::Message, cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>,
        NavGeofencePollImpl
    >
{
public:
    NavGeofencePollImpl() = default;
    NavGeofencePollImpl(const NavGeofencePollImpl&) = delete;
    NavGeofencePollImpl(NavGeofencePollImpl&&) = delete;
    virtual ~NavGeofencePollImpl() = default;
    NavGeofencePollImpl& operator=(const NavGeofencePollImpl&) = default;
    NavGeofencePollImpl& operator=(NavGeofencePollImpl&&) = default;

protected:
    virtual const QVariantList& fieldsPropertiesImpl() const override
    {
        static const QVariantList Props = createProps();
        return Props;
    }
};

NavGeofencePoll::NavGeofencePoll() : m_pImpl(new NavGeofencePollImpl) {}
NavGeofencePoll::~NavGeofencePoll() = default;

NavGeofencePoll& NavGeofencePoll::operator=(const NavGeofencePoll& other)
{
    *m_pImpl = *other.m_pImpl;
    return *this;
}

NavGeofencePoll& NavGeofencePoll::operator=(NavGeofencePoll&& other)
{
    *m_pImpl = std::move(*other.m_pImpl);
    return *this;
}

NavGeofencePoll::MsgIdParamType NavGeofencePoll::doGetId()
{
    return ::cc_ublox::message::NavGeofencePoll<cc_tools_qt_plugin::cc_ublox::Message, cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::doGetId();
}

const char* NavGeofencePoll::nameImpl() const
{
    return static_cast<const cc_tools_qt::Message*>(m_pImpl.get())->name();
}

const QVariantList& NavGeofencePoll::fieldsPropertiesImpl() const
{
    return m_pImpl->fieldsProperties();
}

void NavGeofencePoll::dispatchImpl(cc_tools_qt::MessageHandler& handler)
{
    static_cast<cc_tools_qt::Message*>(m_pImpl.get())->dispatch(handler);
}

void NavGeofencePoll::resetImpl()
{
    m_pImpl->reset();
}

bool NavGeofencePoll::assignImpl(const cc_tools_qt::Message& other)
{
    auto* castedOther = dynamic_cast<const NavGeofencePoll*>(&other);
    if (castedOther == nullptr) {
        return false;
    }
    return m_pImpl->assign(*castedOther->m_pImpl);
}

NavGeofencePoll::MsgIdParamType NavGeofencePoll::getIdImpl() const
{
    return m_pImpl->getId();
}

comms::ErrorStatus NavGeofencePoll::readImpl(ReadIterator& iter, std::size_t len)
{
    return m_pImpl->read(iter, len);
}

comms::ErrorStatus NavGeofencePoll::writeImpl(WriteIterator& iter, std::size_t len) const
{
    return m_pImpl->write(iter, len);
}

bool NavGeofencePoll::validImpl() const
{
    return m_pImpl->valid();
}

std::size_t NavGeofencePoll::lengthImpl() const
{
    return m_pImpl->length();
}

bool NavGeofencePoll::refreshImpl()
{
    return m_pImpl->refresh();
}

} // namespace message

} // namespace cc_ublox

} // namespace cc_tools_qt_plugin
