// Generated by commsdsl2tools_qt v6.3.2

#include "CfgEkf.h"

#include "cc_tools_qt/ProtocolMessageBase.h"
#include "cc_tools_qt/property/field.h"
#include "cc_tools_qt_plugin/cc_ublox/field/Res4.h"
#include "cc_tools_qt_plugin/cc_ublox/options/DefaultOptions.h"
#include "cc_ublox/message/CfgEkf.h"

namespace cc_tools_qt_plugin
{

namespace cc_ublox
{

namespace message
{

namespace
{

static QVariantMap createProps_disableEkf(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::CfgEkfFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::DisableEkf;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .add("Enabled", 0)
            .add("Disabled", 1)
            .asMap();
}

static QVariantMap createProps_actionFlags(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::CfgEkfFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::ActionFlags;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .add(1U, "clTab")
            .add(2U, "clCalib")
            .add(4U, "nomTacho")
            .add(5U, "nomGyro")
            .add(6U, "setTemp")
            .add(7U, "dir")
            .asMap();
}

static QVariantMap createProps_configFlags(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::CfgEkfFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::ConfigFlags;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .add(0U, "pulsesPerM")
            .add(1U, "useSerWt")
            .asMap();
}

static QVariantMap createProps_inverseFlags(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::CfgEkfFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::InverseFlags;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .add(0U, "invDir")
            .add(1U, "invGyro")
            .asMap();
}

static QVariantMap createProps_reserved2(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::CfgEkfFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::Reserved2;
    auto props = cc_tools_qt_plugin::cc_ublox::field::createProps_res4(Field::name(), serHidden);
    return props;
}

static QVariantMap createProps_nomPPDist(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::CfgEkfFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::NomPPDist;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .asMap();
}

static QVariantMap createProps_nomZero(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::CfgEkfFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::NomZero;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .asMap();
}

static QVariantMap createProps_nomSens(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::CfgEkfFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::NomSens;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .asMap();
}

static QVariantMap createProps_rmsTemp(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::CfgEkfFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::RmsTemp;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .scaledDecimals(1U)
            .asMap();
}

static QVariantMap createProps_tempUpdate(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::CfgEkfFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::TempUpdate;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .asMap();
}

QVariantList createProps()
{
    QVariantList props;
    props.append(createProps_disableEkf(false));
    props.append(createProps_actionFlags(false));
    props.append(createProps_configFlags(false));
    props.append(createProps_inverseFlags(false));
    props.append(createProps_reserved2(false));
    props.append(createProps_nomPPDist(false));
    props.append(createProps_nomZero(false));
    props.append(createProps_nomSens(false));
    props.append(createProps_rmsTemp(false));
    props.append(createProps_tempUpdate(false));
    return props;
}

} // namespace

class CfgEkfImpl : public
    cc_tools_qt::ProtocolMessageBase<
        ::cc_ublox::message::CfgEkf<cc_tools_qt_plugin::cc_ublox::Message, cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>,
        CfgEkfImpl
    >
{
public:
    CfgEkfImpl() = default;
    CfgEkfImpl(const CfgEkfImpl&) = delete;
    CfgEkfImpl(CfgEkfImpl&&) = delete;
    virtual ~CfgEkfImpl() = default;
    CfgEkfImpl& operator=(const CfgEkfImpl&) = default;
    CfgEkfImpl& operator=(CfgEkfImpl&&) = default;

protected:
    virtual const QVariantList& fieldsPropertiesImpl() const override
    {
        static const QVariantList Props = createProps();
        return Props;
    }
};

CfgEkf::CfgEkf() : m_pImpl(new CfgEkfImpl) {}
CfgEkf::~CfgEkf() = default;

CfgEkf& CfgEkf::operator=(const CfgEkf& other)
{
    *m_pImpl = *other.m_pImpl;
    return *this;
}

CfgEkf& CfgEkf::operator=(CfgEkf&& other)
{
    *m_pImpl = std::move(*other.m_pImpl);
    return *this;
}

CfgEkf::MsgIdParamType CfgEkf::doGetId()
{
    return ::cc_ublox::message::CfgEkf<cc_tools_qt_plugin::cc_ublox::Message, cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::doGetId();
}

const char* CfgEkf::nameImpl() const
{
    return static_cast<const cc_tools_qt::Message*>(m_pImpl.get())->name();
}

const QVariantList& CfgEkf::fieldsPropertiesImpl() const
{
    return m_pImpl->fieldsProperties();
}

void CfgEkf::dispatchImpl(cc_tools_qt::MessageHandler& handler)
{
    static_cast<cc_tools_qt::Message*>(m_pImpl.get())->dispatch(handler);
}

void CfgEkf::resetImpl()
{
    m_pImpl->reset();
}

bool CfgEkf::assignImpl(const cc_tools_qt::Message& other)
{
    auto* castedOther = dynamic_cast<const CfgEkf*>(&other);
    if (castedOther == nullptr) {
        return false;
    }
    return m_pImpl->assign(*castedOther->m_pImpl);
}

CfgEkf::MsgIdParamType CfgEkf::getIdImpl() const
{
    return m_pImpl->getId();
}

comms::ErrorStatus CfgEkf::readImpl(ReadIterator& iter, std::size_t len)
{
    return m_pImpl->read(iter, len);
}

comms::ErrorStatus CfgEkf::writeImpl(WriteIterator& iter, std::size_t len) const
{
    return m_pImpl->write(iter, len);
}

bool CfgEkf::validImpl() const
{
    return m_pImpl->valid();
}

std::size_t CfgEkf::lengthImpl() const
{
    return m_pImpl->length();
}

bool CfgEkf::refreshImpl()
{
    return m_pImpl->refresh();
}

} // namespace message

} // namespace cc_ublox

} // namespace cc_tools_qt_plugin
