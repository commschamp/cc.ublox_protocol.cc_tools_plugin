// Generated by commsdsl2tools_qt v6.3.2

#include "MonPatch.h"

#include "cc_tools_qt/ProtocolMessageBase.h"
#include "cc_tools_qt/property/field.h"
#include "cc_tools_qt_plugin/cc_ublox/options/DefaultOptions.h"
#include "cc_ublox/message/MonPatch.h"

namespace cc_tools_qt_plugin
{

namespace cc_ublox
{

namespace message
{

namespace
{

static QVariantMap createProps_version(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::MonPatchFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::Version;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .asMap();
}

static QVariantMap createProps_nEntries(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::MonPatchFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::NEntries;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .readOnly()
            .asMap();
}

struct ListMembers
{
    struct ElementMembers
    {
        struct PatchInfoMembers
        {
            static QVariantMap createProps_bits(bool serHidden)
            {
                static_cast<void>(serHidden);
                using Field = ::cc_ublox::message::MonPatchFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::ListMembers::ElementMembers::PatchInfoMembers::Bits;
                return
                    cc_tools_qt::property::field::ForField<Field>()
                        .name(Field::name())
                        .serialisedHidden(serHidden)
                        .add(0U, "activated")
                        .asMap();
            }

            static QVariantMap createProps_location(bool serHidden)
            {
                static_cast<void>(serHidden);
                using Field = ::cc_ublox::message::MonPatchFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::ListMembers::ElementMembers::PatchInfoMembers::Location;
                return
                    cc_tools_qt::property::field::ForField<Field>()
                        .name(Field::name())
                        .serialisedHidden(serHidden)
                        .add("eFuse", 0)
                        .add("ROM", 1)
                        .add("BBR", 2)
                        .add("FileSystem", 3)
                        .asMap();
            }

            static QVariantMap createProps_res4(bool serHidden)
            {
                static_cast<void>(serHidden);
                using Field = ::cc_ublox::message::MonPatchFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::ListMembers::ElementMembers::PatchInfoMembers::Res4;
                return
                    cc_tools_qt::property::field::ForField<Field>()
                        .name(Field::name())
                        .serialisedHidden(serHidden)
                        .hidden()
                        .asMap();
            }
        }; // struct PatchInfoMembers

        static QVariantMap createProps_patchInfo(bool serHidden)
        {
            static_cast<void>(serHidden);
            using Field = ::cc_ublox::message::MonPatchFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::ListMembers::ElementMembers::PatchInfo;
            return
                cc_tools_qt::property::field::ForField<Field>()
                    .name(Field::name())
                    .serialisedHidden(serHidden)
                    .add(PatchInfoMembers::createProps_bits(true))
                    .add(PatchInfoMembers::createProps_location(true))
                    .add(PatchInfoMembers::createProps_res4(true))
                    .asMap();
        }

        static QVariantMap createProps_comparatorNumber(bool serHidden)
        {
            static_cast<void>(serHidden);
            using Field = ::cc_ublox::message::MonPatchFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::ListMembers::ElementMembers::ComparatorNumber;
            return
                cc_tools_qt::property::field::ForField<Field>()
                    .name(Field::name())
                    .serialisedHidden(serHidden)
                    .asMap();
        }

        static QVariantMap createProps_patchAddress(bool serHidden)
        {
            static_cast<void>(serHidden);
            using Field = ::cc_ublox::message::MonPatchFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::ListMembers::ElementMembers::PatchAddress;
            return
                cc_tools_qt::property::field::ForField<Field>()
                    .name(Field::name())
                    .serialisedHidden(serHidden)
                    .asMap();
        }

        static QVariantMap createProps_patchData(bool serHidden)
        {
            static_cast<void>(serHidden);
            using Field = ::cc_ublox::message::MonPatchFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::ListMembers::ElementMembers::PatchData;
            return
                cc_tools_qt::property::field::ForField<Field>()
                    .name(Field::name())
                    .serialisedHidden(serHidden)
                    .asMap();
        }
    }; // struct ElementMembers

    static QVariantMap createProps_element(bool serHidden)
    {
        static_cast<void>(serHidden);
        using Field = ::cc_ublox::message::MonPatchFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::ListMembers::Element;
        return
            cc_tools_qt::property::field::ForField<Field>()
                .name(Field::name())
                .serialisedHidden(serHidden)
                .add(ElementMembers::createProps_patchInfo(serHidden))
                .add(ElementMembers::createProps_comparatorNumber(serHidden))
                .add(ElementMembers::createProps_patchAddress(serHidden))
                .add(ElementMembers::createProps_patchData(serHidden))
                .serialisedHidden()
                .asMap();
    }
}; // struct ListMembers

static QVariantMap createProps_list(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::MonPatchFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::List;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .serialisedHidden()
            .add(ListMembers::createProps_element(serHidden))
            .appendIndexToElementName()
            .asMap();
}

QVariantList createProps()
{
    QVariantList props;
    props.append(createProps_version(false));
    props.append(createProps_nEntries(false));
    props.append(createProps_list(false));
    return props;
}

} // namespace

class MonPatchImpl : public
    cc_tools_qt::ProtocolMessageBase<
        ::cc_ublox::message::MonPatch<cc_tools_qt_plugin::cc_ublox::Message, cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>,
        MonPatchImpl
    >
{
public:
    MonPatchImpl() = default;
    MonPatchImpl(const MonPatchImpl&) = delete;
    MonPatchImpl(MonPatchImpl&&) = delete;
    virtual ~MonPatchImpl() = default;
    MonPatchImpl& operator=(const MonPatchImpl&) = default;
    MonPatchImpl& operator=(MonPatchImpl&&) = default;

protected:
    virtual const QVariantList& fieldsPropertiesImpl() const override
    {
        static const QVariantList Props = createProps();
        return Props;
    }
};

MonPatch::MonPatch() : m_pImpl(new MonPatchImpl) {}
MonPatch::~MonPatch() = default;

MonPatch& MonPatch::operator=(const MonPatch& other)
{
    *m_pImpl = *other.m_pImpl;
    return *this;
}

MonPatch& MonPatch::operator=(MonPatch&& other)
{
    *m_pImpl = std::move(*other.m_pImpl);
    return *this;
}

MonPatch::MsgIdParamType MonPatch::doGetId()
{
    return ::cc_ublox::message::MonPatch<cc_tools_qt_plugin::cc_ublox::Message, cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::doGetId();
}

const char* MonPatch::nameImpl() const
{
    return static_cast<const cc_tools_qt::Message*>(m_pImpl.get())->name();
}

const QVariantList& MonPatch::fieldsPropertiesImpl() const
{
    return m_pImpl->fieldsProperties();
}

void MonPatch::dispatchImpl(cc_tools_qt::MessageHandler& handler)
{
    static_cast<cc_tools_qt::Message*>(m_pImpl.get())->dispatch(handler);
}

void MonPatch::resetImpl()
{
    m_pImpl->reset();
}

bool MonPatch::assignImpl(const cc_tools_qt::Message& other)
{
    auto* castedOther = dynamic_cast<const MonPatch*>(&other);
    if (castedOther == nullptr) {
        return false;
    }
    return m_pImpl->assign(*castedOther->m_pImpl);
}

MonPatch::MsgIdParamType MonPatch::getIdImpl() const
{
    return m_pImpl->getId();
}

comms::ErrorStatus MonPatch::readImpl(ReadIterator& iter, std::size_t len)
{
    return m_pImpl->read(iter, len);
}

comms::ErrorStatus MonPatch::writeImpl(WriteIterator& iter, std::size_t len) const
{
    return m_pImpl->write(iter, len);
}

bool MonPatch::validImpl() const
{
    return m_pImpl->valid();
}

std::size_t MonPatch::lengthImpl() const
{
    return m_pImpl->length();
}

bool MonPatch::refreshImpl()
{
    return m_pImpl->refresh();
}

} // namespace message

} // namespace cc_ublox

} // namespace cc_tools_qt_plugin
