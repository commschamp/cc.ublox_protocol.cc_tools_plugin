// Generated by commsdsl2tools_qt v6.3.4

#include "NavTimegalPoll.h"

#include "cc_tools_qt/ProtocolMessageBase.h"
#include "cc_tools_qt/property/field.h"
#include "cc_tools_qt_plugin/cc_ublox/options/DefaultOptions.h"
#include "cc_ublox/message/NavTimegalPoll.h"

namespace cc_tools_qt_plugin
{

namespace cc_ublox
{

namespace message
{

namespace
{

QVariantList createProps()
{
    QVariantList props;
    return props;
}

} // namespace

class NavTimegalPollImpl : public
    cc_tools_qt::ProtocolMessageBase<
        ::cc_ublox::message::NavTimegalPoll<cc_tools_qt_plugin::cc_ublox::Message, cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>,
        NavTimegalPollImpl
    >
{
public:
    NavTimegalPollImpl() = default;
    NavTimegalPollImpl(const NavTimegalPollImpl&) = delete;
    NavTimegalPollImpl(NavTimegalPollImpl&&) = delete;
    virtual ~NavTimegalPollImpl() = default;
    NavTimegalPollImpl& operator=(const NavTimegalPollImpl&) = default;
    NavTimegalPollImpl& operator=(NavTimegalPollImpl&&) = default;

protected:
    virtual const QVariantList& fieldsPropertiesImpl() const override
    {
        static const QVariantList Props = createProps();
        return Props;
    }
};

NavTimegalPoll::NavTimegalPoll() : m_pImpl(new NavTimegalPollImpl) {}
NavTimegalPoll::~NavTimegalPoll() = default;

NavTimegalPoll& NavTimegalPoll::operator=(const NavTimegalPoll& other)
{
    *m_pImpl = *other.m_pImpl;
    return *this;
}

NavTimegalPoll& NavTimegalPoll::operator=(NavTimegalPoll&& other)
{
    *m_pImpl = std::move(*other.m_pImpl);
    return *this;
}

NavTimegalPoll::MsgIdParamType NavTimegalPoll::doGetId()
{
    return ::cc_ublox::message::NavTimegalPoll<cc_tools_qt_plugin::cc_ublox::Message, cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::doGetId();
}

const char* NavTimegalPoll::nameImpl() const
{
    return static_cast<const cc_tools_qt::Message*>(m_pImpl.get())->name();
}

const QVariantList& NavTimegalPoll::fieldsPropertiesImpl() const
{
    return m_pImpl->fieldsProperties();
}

void NavTimegalPoll::dispatchImpl(cc_tools_qt::MessageHandler& handler)
{
    static_cast<cc_tools_qt::Message*>(m_pImpl.get())->dispatch(handler);
}

void NavTimegalPoll::resetImpl()
{
    m_pImpl->reset();
}

bool NavTimegalPoll::assignImpl(const cc_tools_qt::Message& other)
{
    auto* castedOther = dynamic_cast<const NavTimegalPoll*>(&other);
    if (castedOther == nullptr) {
        return false;
    }
    return m_pImpl->assign(*castedOther->m_pImpl);
}

NavTimegalPoll::MsgIdParamType NavTimegalPoll::getIdImpl() const
{
    return m_pImpl->getId();
}

comms::ErrorStatus NavTimegalPoll::readImpl(ReadIterator& iter, std::size_t len)
{
    return m_pImpl->read(iter, len);
}

comms::ErrorStatus NavTimegalPoll::writeImpl(WriteIterator& iter, std::size_t len) const
{
    return m_pImpl->write(iter, len);
}

bool NavTimegalPoll::validImpl() const
{
    return m_pImpl->valid();
}

std::size_t NavTimegalPoll::lengthImpl() const
{
    return m_pImpl->length();
}

bool NavTimegalPoll::refreshImpl()
{
    return m_pImpl->refresh();
}

} // namespace message

} // namespace cc_ublox

} // namespace cc_tools_qt_plugin
