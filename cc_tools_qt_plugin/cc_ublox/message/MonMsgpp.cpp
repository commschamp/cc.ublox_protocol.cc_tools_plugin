// Generated by commsdsl2tools_qt v6.3.2

#include "MonMsgpp.h"

#include "cc_tools_qt/ProtocolMessageBase.h"
#include "cc_tools_qt/property/field.h"
#include "cc_tools_qt_plugin/cc_ublox/field/MonMsgppCount.h"
#include "cc_tools_qt_plugin/cc_ublox/options/DefaultOptions.h"
#include "cc_ublox/field/MonMsgppCount.h"
#include "cc_ublox/message/MonMsgpp.h"

namespace cc_tools_qt_plugin
{

namespace cc_ublox
{

namespace message
{

namespace
{

static QVariantMap createProps_msg1(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::MonMsgppFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::Msg1;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .serialisedHidden()
            .add(cc_tools_qt_plugin::cc_ublox::field::createProps_monMsgppCount(Field::ValueType::value_type::name(), serHidden))
            .appendIndexToElementName()
            .asMap();
}

static QVariantMap createProps_msg2(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::MonMsgppFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::Msg2;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .serialisedHidden()
            .add(cc_tools_qt_plugin::cc_ublox::field::createProps_monMsgppCount(Field::ValueType::value_type::name(), serHidden))
            .appendIndexToElementName()
            .asMap();
}

static QVariantMap createProps_msg3(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::MonMsgppFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::Msg3;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .serialisedHidden()
            .add(cc_tools_qt_plugin::cc_ublox::field::createProps_monMsgppCount(Field::ValueType::value_type::name(), serHidden))
            .appendIndexToElementName()
            .asMap();
}

static QVariantMap createProps_msg4(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::MonMsgppFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::Msg4;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .serialisedHidden()
            .add(cc_tools_qt_plugin::cc_ublox::field::createProps_monMsgppCount(Field::ValueType::value_type::name(), serHidden))
            .appendIndexToElementName()
            .asMap();
}

static QVariantMap createProps_msg5(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::MonMsgppFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::Msg5;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .serialisedHidden()
            .add(cc_tools_qt_plugin::cc_ublox::field::createProps_monMsgppCount(Field::ValueType::value_type::name(), serHidden))
            .appendIndexToElementName()
            .asMap();
}

static QVariantMap createProps_msg6(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::MonMsgppFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::Msg6;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .serialisedHidden()
            .add(cc_tools_qt_plugin::cc_ublox::field::createProps_monMsgppCount(Field::ValueType::value_type::name(), serHidden))
            .appendIndexToElementName()
            .asMap();
}

struct SkippedMembers
{
    static QVariantMap createProps_element(bool serHidden)
    {
        static_cast<void>(serHidden);
        using Field = ::cc_ublox::message::MonMsgppFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::SkippedMembers::Element;
        return
            cc_tools_qt::property::field::ForField<Field>()
                .name(Field::name())
                .serialisedHidden(serHidden)
                .asMap();
    }
}; // struct SkippedMembers

static QVariantMap createProps_skipped(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::MonMsgppFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::Skipped;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .serialisedHidden()
            .add(SkippedMembers::createProps_element(serHidden))
            .appendIndexToElementName()
            .asMap();
}

QVariantList createProps()
{
    QVariantList props;
    props.append(createProps_msg1(false));
    props.append(createProps_msg2(false));
    props.append(createProps_msg3(false));
    props.append(createProps_msg4(false));
    props.append(createProps_msg5(false));
    props.append(createProps_msg6(false));
    props.append(createProps_skipped(false));
    return props;
}

} // namespace

class MonMsgppImpl : public
    cc_tools_qt::ProtocolMessageBase<
        ::cc_ublox::message::MonMsgpp<cc_tools_qt_plugin::cc_ublox::Message, cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>,
        MonMsgppImpl
    >
{
public:
    MonMsgppImpl() = default;
    MonMsgppImpl(const MonMsgppImpl&) = delete;
    MonMsgppImpl(MonMsgppImpl&&) = delete;
    virtual ~MonMsgppImpl() = default;
    MonMsgppImpl& operator=(const MonMsgppImpl&) = default;
    MonMsgppImpl& operator=(MonMsgppImpl&&) = default;

protected:
    virtual const QVariantList& fieldsPropertiesImpl() const override
    {
        static const QVariantList Props = createProps();
        return Props;
    }
};

MonMsgpp::MonMsgpp() : m_pImpl(new MonMsgppImpl) {}
MonMsgpp::~MonMsgpp() = default;

MonMsgpp& MonMsgpp::operator=(const MonMsgpp& other)
{
    *m_pImpl = *other.m_pImpl;
    return *this;
}

MonMsgpp& MonMsgpp::operator=(MonMsgpp&& other)
{
    *m_pImpl = std::move(*other.m_pImpl);
    return *this;
}

MonMsgpp::MsgIdParamType MonMsgpp::doGetId()
{
    return ::cc_ublox::message::MonMsgpp<cc_tools_qt_plugin::cc_ublox::Message, cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::doGetId();
}

const char* MonMsgpp::nameImpl() const
{
    return static_cast<const cc_tools_qt::Message*>(m_pImpl.get())->name();
}

const QVariantList& MonMsgpp::fieldsPropertiesImpl() const
{
    return m_pImpl->fieldsProperties();
}

void MonMsgpp::dispatchImpl(cc_tools_qt::MessageHandler& handler)
{
    static_cast<cc_tools_qt::Message*>(m_pImpl.get())->dispatch(handler);
}

void MonMsgpp::resetImpl()
{
    m_pImpl->reset();
}

bool MonMsgpp::assignImpl(const cc_tools_qt::Message& other)
{
    auto* castedOther = dynamic_cast<const MonMsgpp*>(&other);
    if (castedOther == nullptr) {
        return false;
    }
    return m_pImpl->assign(*castedOther->m_pImpl);
}

MonMsgpp::MsgIdParamType MonMsgpp::getIdImpl() const
{
    return m_pImpl->getId();
}

comms::ErrorStatus MonMsgpp::readImpl(ReadIterator& iter, std::size_t len)
{
    return m_pImpl->read(iter, len);
}

comms::ErrorStatus MonMsgpp::writeImpl(WriteIterator& iter, std::size_t len) const
{
    return m_pImpl->write(iter, len);
}

bool MonMsgpp::validImpl() const
{
    return m_pImpl->valid();
}

std::size_t MonMsgpp::lengthImpl() const
{
    return m_pImpl->length();
}

bool MonMsgpp::refreshImpl()
{
    return m_pImpl->refresh();
}

} // namespace message

} // namespace cc_ublox

} // namespace cc_tools_qt_plugin
