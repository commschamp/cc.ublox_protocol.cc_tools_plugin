// Generated by commsdsl2tools_qt v6.3.3

#include "TimTp.h"

#include "cc_tools_qt/ProtocolMessageBase.h"
#include "cc_tools_qt/property/field.h"
#include "cc_tools_qt_plugin/cc_ublox/options/DefaultOptions.h"
#include "cc_ublox/message/TimTp.h"

namespace cc_tools_qt_plugin
{

namespace cc_ublox
{

namespace message
{

namespace
{

static QVariantMap createProps_towMS(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::TimTpFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::TowMS;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .asMap();
}

static QVariantMap createProps_towSubMS(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::TimTpFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::TowSubMS;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .asMap();
}

static QVariantMap createProps_qErr(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::TimTpFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::QErr;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .asMap();
}

static QVariantMap createProps_week(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::TimTpFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::Week;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .asMap();
}

struct FlagsMembers
{
    static QVariantMap createProps_bitsLow(bool serHidden)
    {
        static_cast<void>(serHidden);
        using Field = ::cc_ublox::message::TimTpFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::FlagsMembers::BitsLow;
        return
            cc_tools_qt::property::field::ForField<Field>()
                .name(Field::name())
                .serialisedHidden(serHidden)
                .add(0U, "timeBase")
                .add(1U, "utc")
                .asMap();
    }

    static QVariantMap createProps_raim(bool serHidden)
    {
        static_cast<void>(serHidden);
        using Field = ::cc_ublox::message::TimTpFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::FlagsMembers::Raim;
        return
            cc_tools_qt::property::field::ForField<Field>()
                .name(Field::name())
                .serialisedHidden(serHidden)
                .add("NotAvailable", 0)
                .add("NotActive", 1)
                .add("Active", 2)
                .asMap();
    }

    static QVariantMap createProps_bitsHigh(bool serHidden)
    {
        static_cast<void>(serHidden);
        using Field = ::cc_ublox::message::TimTpFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::FlagsMembers::BitsHigh;
        return
            cc_tools_qt::property::field::ForField<Field>()
                .name(Field::name())
                .serialisedHidden(serHidden)
                .add(0U, "qErrInvalid")
                .asMap();
    }
}; // struct FlagsMembers

static QVariantMap createProps_flags(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::TimTpFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::Flags;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .add(FlagsMembers::createProps_bitsLow(true))
            .add(FlagsMembers::createProps_raim(true))
            .add(FlagsMembers::createProps_bitsHigh(true))
            .asMap();
}

struct RefInfoMembers
{
    static QVariantMap createProps_timeRefGnss(bool serHidden)
    {
        static_cast<void>(serHidden);
        using Field = ::cc_ublox::message::TimTpFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::RefInfoMembers::TimeRefGnss;
        return
            cc_tools_qt::property::field::ForField<Field>()
                .name(Field::name())
                .serialisedHidden(serHidden)
                .add("GPS", 0)
                .add("GLONASS", 1)
                .add("BeiDou", 2)
                .add("Unknown", 15)
                .asMap();
    }

    static QVariantMap createProps_utcStandard(bool serHidden)
    {
        static_cast<void>(serHidden);
        using Field = ::cc_ublox::message::TimTpFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::RefInfoMembers::UtcStandard;
        return
            cc_tools_qt::property::field::ForField<Field>()
                .name(Field::name())
                .serialisedHidden(serHidden)
                .add("NotAvailable", 0)
                .add("CRL", 1)
                .add("NIST", 2)
                .add("USNO", 3)
                .add("BIMP", 4)
                .add("EuLab", 5)
                .add("SU", 6)
                .add("NTSC", 7)
                .add("Unknown", 15)
                .asMap();
    }
}; // struct RefInfoMembers

static QVariantMap createProps_refInfo(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::TimTpFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::RefInfo;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .add(RefInfoMembers::createProps_timeRefGnss(true))
            .add(RefInfoMembers::createProps_utcStandard(true))
            .asMap();
}

QVariantList createProps()
{
    QVariantList props;
    props.append(createProps_towMS(false));
    props.append(createProps_towSubMS(false));
    props.append(createProps_qErr(false));
    props.append(createProps_week(false));
    props.append(createProps_flags(false));
    props.append(createProps_refInfo(false));
    return props;
}

} // namespace

class TimTpImpl : public
    cc_tools_qt::ProtocolMessageBase<
        ::cc_ublox::message::TimTp<cc_tools_qt_plugin::cc_ublox::Message, cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>,
        TimTpImpl
    >
{
public:
    TimTpImpl() = default;
    TimTpImpl(const TimTpImpl&) = delete;
    TimTpImpl(TimTpImpl&&) = delete;
    virtual ~TimTpImpl() = default;
    TimTpImpl& operator=(const TimTpImpl&) = default;
    TimTpImpl& operator=(TimTpImpl&&) = default;

protected:
    virtual const QVariantList& fieldsPropertiesImpl() const override
    {
        static const QVariantList Props = createProps();
        return Props;
    }
};

TimTp::TimTp() : m_pImpl(new TimTpImpl) {}
TimTp::~TimTp() = default;

TimTp& TimTp::operator=(const TimTp& other)
{
    *m_pImpl = *other.m_pImpl;
    return *this;
}

TimTp& TimTp::operator=(TimTp&& other)
{
    *m_pImpl = std::move(*other.m_pImpl);
    return *this;
}

TimTp::MsgIdParamType TimTp::doGetId()
{
    return ::cc_ublox::message::TimTp<cc_tools_qt_plugin::cc_ublox::Message, cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::doGetId();
}

const char* TimTp::nameImpl() const
{
    return static_cast<const cc_tools_qt::Message*>(m_pImpl.get())->name();
}

const QVariantList& TimTp::fieldsPropertiesImpl() const
{
    return m_pImpl->fieldsProperties();
}

void TimTp::dispatchImpl(cc_tools_qt::MessageHandler& handler)
{
    static_cast<cc_tools_qt::Message*>(m_pImpl.get())->dispatch(handler);
}

void TimTp::resetImpl()
{
    m_pImpl->reset();
}

bool TimTp::assignImpl(const cc_tools_qt::Message& other)
{
    auto* castedOther = dynamic_cast<const TimTp*>(&other);
    if (castedOther == nullptr) {
        return false;
    }
    return m_pImpl->assign(*castedOther->m_pImpl);
}

TimTp::MsgIdParamType TimTp::getIdImpl() const
{
    return m_pImpl->getId();
}

comms::ErrorStatus TimTp::readImpl(ReadIterator& iter, std::size_t len)
{
    return m_pImpl->read(iter, len);
}

comms::ErrorStatus TimTp::writeImpl(WriteIterator& iter, std::size_t len) const
{
    return m_pImpl->write(iter, len);
}

bool TimTp::validImpl() const
{
    return m_pImpl->valid();
}

std::size_t TimTp::lengthImpl() const
{
    return m_pImpl->length();
}

bool TimTp::refreshImpl()
{
    return m_pImpl->refresh();
}

} // namespace message

} // namespace cc_ublox

} // namespace cc_tools_qt_plugin
