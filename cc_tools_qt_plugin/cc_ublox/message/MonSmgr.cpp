// Generated by commsdsl2tools_qt v6.3.3

#include "MonSmgr.h"

#include "cc_tools_qt/ProtocolMessageBase.h"
#include "cc_tools_qt/property/field.h"
#include "cc_tools_qt_plugin/cc_ublox/field/Itow.h"
#include "cc_tools_qt_plugin/cc_ublox/field/Res3.h"
#include "cc_tools_qt_plugin/cc_ublox/options/DefaultOptions.h"
#include "cc_ublox/message/MonSmgr.h"

namespace cc_tools_qt_plugin
{

namespace cc_ublox
{

namespace message
{

namespace
{

static QVariantMap createProps_version(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::MonSmgrFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::Version;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .asMap();
}

static QVariantMap createProps_reserved1(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::MonSmgrFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::Reserved1;
    auto props = cc_tools_qt_plugin::cc_ublox::field::createProps_res3(Field::name(), serHidden);
    return props;
}

static QVariantMap createProps_itow(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::MonSmgrFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::Itow;
    auto props = cc_tools_qt_plugin::cc_ublox::field::createProps_itow(Field::name(), serHidden);
    return props;
}

struct IntOscMembers
{
    static QVariantMap createProps_intOscState(bool serHidden)
    {
        static_cast<void>(serHidden);
        using Field = ::cc_ublox::message::MonSmgrFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::IntOscMembers::IntOscState;
        return
            cc_tools_qt::property::field::ForField<Field>()
                .name(Field::name())
                .serialisedHidden(serHidden)
                .add("Autonomous", 0)
                .add("Ongoing", 1)
                .add("Steered", 2)
                .add("Idle", 4)
                .asMap();
    }

    static QVariantMap createProps_bits(bool serHidden)
    {
        static_cast<void>(serHidden);
        using Field = ::cc_ublox::message::MonSmgrFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::IntOscMembers::Bits;
        return
            cc_tools_qt::property::field::ForField<Field>()
                .name(Field::name())
                .serialisedHidden(serHidden)
                .add(0U, "intOscCalib")
                .add(1U, "intOscDisc")
                .asMap();
    }
}; // struct IntOscMembers

static QVariantMap createProps_intOsc(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::MonSmgrFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::IntOsc;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .add(IntOscMembers::createProps_intOscState(true))
            .add(IntOscMembers::createProps_bits(true))
            .asMap();
}

struct ExtOscMembers
{
    static QVariantMap createProps_extOscState(bool serHidden)
    {
        static_cast<void>(serHidden);
        using Field = ::cc_ublox::message::MonSmgrFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::ExtOscMembers::ExtOscState;
        return
            cc_tools_qt::property::field::ForField<Field>()
                .name(Field::name())
                .serialisedHidden(serHidden)
                .add("Autonomous", 0)
                .add("Ongoing", 1)
                .add("Steered", 2)
                .add("Idle", 4)
                .asMap();
    }

    static QVariantMap createProps_bits(bool serHidden)
    {
        static_cast<void>(serHidden);
        using Field = ::cc_ublox::message::MonSmgrFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::ExtOscMembers::Bits;
        return
            cc_tools_qt::property::field::ForField<Field>()
                .name(Field::name())
                .serialisedHidden(serHidden)
                .add(0U, "extOscCalib")
                .add(1U, "extOscDisc")
                .asMap();
    }
}; // struct ExtOscMembers

static QVariantMap createProps_extOsc(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::MonSmgrFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::ExtOsc;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .add(ExtOscMembers::createProps_extOscState(true))
            .add(ExtOscMembers::createProps_bits(true))
            .asMap();
}

static QVariantMap createProps_discSrc(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::MonSmgrFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::DiscSrc;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .add("Internal", 0)
            .add("GNSS", 1)
            .add("EXTINT0", 2)
            .add("EXTINT1", 3)
            .add("HostInternal", 4)
            .add("HostExternal", 5)
            .asMap();
}

static QVariantMap createProps_gnss(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::MonSmgrFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::Gnss;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .add(0U, "gnssAvail")
            .asMap();
}

static QVariantMap createProps_extInt0(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::MonSmgrFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::ExtInt0;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .add(0U, "extInt0Avail")
            .add(1U, "extInt0Type")
            .add(2U, "extInt0FeedBack")
            .asMap();
}

static QVariantMap createProps_extInt1(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::MonSmgrFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::ExtInt1;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .add(0U, "extInt1Avail")
            .add(1U, "extInt1Type")
            .add(2U, "extInt1FeedBack")
            .asMap();
}

QVariantList createProps()
{
    QVariantList props;
    props.append(createProps_version(false));
    props.append(createProps_reserved1(false));
    props.append(createProps_itow(false));
    props.append(createProps_intOsc(false));
    props.append(createProps_extOsc(false));
    props.append(createProps_discSrc(false));
    props.append(createProps_gnss(false));
    props.append(createProps_extInt0(false));
    props.append(createProps_extInt1(false));
    return props;
}

} // namespace

class MonSmgrImpl : public
    cc_tools_qt::ProtocolMessageBase<
        ::cc_ublox::message::MonSmgr<cc_tools_qt_plugin::cc_ublox::Message, cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>,
        MonSmgrImpl
    >
{
public:
    MonSmgrImpl() = default;
    MonSmgrImpl(const MonSmgrImpl&) = delete;
    MonSmgrImpl(MonSmgrImpl&&) = delete;
    virtual ~MonSmgrImpl() = default;
    MonSmgrImpl& operator=(const MonSmgrImpl&) = default;
    MonSmgrImpl& operator=(MonSmgrImpl&&) = default;

protected:
    virtual const QVariantList& fieldsPropertiesImpl() const override
    {
        static const QVariantList Props = createProps();
        return Props;
    }
};

MonSmgr::MonSmgr() : m_pImpl(new MonSmgrImpl) {}
MonSmgr::~MonSmgr() = default;

MonSmgr& MonSmgr::operator=(const MonSmgr& other)
{
    *m_pImpl = *other.m_pImpl;
    return *this;
}

MonSmgr& MonSmgr::operator=(MonSmgr&& other)
{
    *m_pImpl = std::move(*other.m_pImpl);
    return *this;
}

MonSmgr::MsgIdParamType MonSmgr::doGetId()
{
    return ::cc_ublox::message::MonSmgr<cc_tools_qt_plugin::cc_ublox::Message, cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::doGetId();
}

const char* MonSmgr::nameImpl() const
{
    return static_cast<const cc_tools_qt::Message*>(m_pImpl.get())->name();
}

const QVariantList& MonSmgr::fieldsPropertiesImpl() const
{
    return m_pImpl->fieldsProperties();
}

void MonSmgr::dispatchImpl(cc_tools_qt::MessageHandler& handler)
{
    static_cast<cc_tools_qt::Message*>(m_pImpl.get())->dispatch(handler);
}

void MonSmgr::resetImpl()
{
    m_pImpl->reset();
}

bool MonSmgr::assignImpl(const cc_tools_qt::Message& other)
{
    auto* castedOther = dynamic_cast<const MonSmgr*>(&other);
    if (castedOther == nullptr) {
        return false;
    }
    return m_pImpl->assign(*castedOther->m_pImpl);
}

MonSmgr::MsgIdParamType MonSmgr::getIdImpl() const
{
    return m_pImpl->getId();
}

comms::ErrorStatus MonSmgr::readImpl(ReadIterator& iter, std::size_t len)
{
    return m_pImpl->read(iter, len);
}

comms::ErrorStatus MonSmgr::writeImpl(WriteIterator& iter, std::size_t len) const
{
    return m_pImpl->write(iter, len);
}

bool MonSmgr::validImpl() const
{
    return m_pImpl->valid();
}

std::size_t MonSmgr::lengthImpl() const
{
    return m_pImpl->length();
}

bool MonSmgr::refreshImpl()
{
    return m_pImpl->refresh();
}

} // namespace message

} // namespace cc_ublox

} // namespace cc_tools_qt_plugin
