// Generated by commsdsl2tools_qt v6.3.2

#include "CfgValset.h"

#include "cc_tools_qt/ProtocolMessageBase.h"
#include "cc_tools_qt/property/field.h"
#include "cc_tools_qt_plugin/cc_ublox/field/CfgValPairSimple.h"
#include "cc_tools_qt_plugin/cc_ublox/field/Res2.h"
#include "cc_tools_qt_plugin/cc_ublox/options/DefaultOptions.h"
#include "cc_ublox/message/CfgValset.h"

namespace cc_tools_qt_plugin
{

namespace cc_ublox
{

namespace message
{

namespace
{

static QVariantMap createProps_version(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::CfgValsetFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::Version;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .asMap();
}

static QVariantMap createProps_layers(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::CfgValsetFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::Layers;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .add(0U, "ram")
            .add(1U, "bbr")
            .add(2U, "flash")
            .asMap();
}

static QVariantMap createProps_reserved0(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::CfgValsetFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::Reserved0;
    auto props = cc_tools_qt_plugin::cc_ublox::field::createProps_res2(Field::name(), serHidden);
    return props;
}

struct CfgdataMembers
{
    static QVariantMap createProps_element(bool serHidden)
    {
        static_cast<void>(serHidden);
        using Field = ::cc_ublox::message::CfgValsetFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::CfgdataMembers::Element;
        auto props = cc_tools_qt_plugin::cc_ublox::field::createProps_cfgValPairSimple(Field::name(), serHidden);
        return props;
    }
}; // struct CfgdataMembers

static QVariantMap createProps_cfgdata(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::CfgValsetFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::Cfgdata;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .serialisedHidden()
            .add(CfgdataMembers::createProps_element(serHidden))
            .appendIndexToElementName()
            .asMap();
}

QVariantList createProps()
{
    QVariantList props;
    props.append(createProps_version(false));
    props.append(createProps_layers(false));
    props.append(createProps_reserved0(false));
    props.append(createProps_cfgdata(false));
    return props;
}

} // namespace

class CfgValsetImpl : public
    cc_tools_qt::ProtocolMessageBase<
        ::cc_ublox::message::CfgValset<cc_tools_qt_plugin::cc_ublox::Message, cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>,
        CfgValsetImpl
    >
{
public:
    CfgValsetImpl() = default;
    CfgValsetImpl(const CfgValsetImpl&) = delete;
    CfgValsetImpl(CfgValsetImpl&&) = delete;
    virtual ~CfgValsetImpl() = default;
    CfgValsetImpl& operator=(const CfgValsetImpl&) = default;
    CfgValsetImpl& operator=(CfgValsetImpl&&) = default;

protected:
    virtual const QVariantList& fieldsPropertiesImpl() const override
    {
        static const QVariantList Props = createProps();
        return Props;
    }
};

CfgValset::CfgValset() : m_pImpl(new CfgValsetImpl) {}
CfgValset::~CfgValset() = default;

CfgValset& CfgValset::operator=(const CfgValset& other)
{
    *m_pImpl = *other.m_pImpl;
    return *this;
}

CfgValset& CfgValset::operator=(CfgValset&& other)
{
    *m_pImpl = std::move(*other.m_pImpl);
    return *this;
}

CfgValset::MsgIdParamType CfgValset::doGetId()
{
    return ::cc_ublox::message::CfgValset<cc_tools_qt_plugin::cc_ublox::Message, cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::doGetId();
}

const char* CfgValset::nameImpl() const
{
    return static_cast<const cc_tools_qt::Message*>(m_pImpl.get())->name();
}

const QVariantList& CfgValset::fieldsPropertiesImpl() const
{
    return m_pImpl->fieldsProperties();
}

void CfgValset::dispatchImpl(cc_tools_qt::MessageHandler& handler)
{
    static_cast<cc_tools_qt::Message*>(m_pImpl.get())->dispatch(handler);
}

void CfgValset::resetImpl()
{
    m_pImpl->reset();
}

bool CfgValset::assignImpl(const cc_tools_qt::Message& other)
{
    auto* castedOther = dynamic_cast<const CfgValset*>(&other);
    if (castedOther == nullptr) {
        return false;
    }
    return m_pImpl->assign(*castedOther->m_pImpl);
}

CfgValset::MsgIdParamType CfgValset::getIdImpl() const
{
    return m_pImpl->getId();
}

comms::ErrorStatus CfgValset::readImpl(ReadIterator& iter, std::size_t len)
{
    return m_pImpl->read(iter, len);
}

comms::ErrorStatus CfgValset::writeImpl(WriteIterator& iter, std::size_t len) const
{
    return m_pImpl->write(iter, len);
}

bool CfgValset::validImpl() const
{
    return m_pImpl->valid();
}

std::size_t CfgValset::lengthImpl() const
{
    return m_pImpl->length();
}

bool CfgValset::refreshImpl()
{
    return m_pImpl->refresh();
}

} // namespace message

} // namespace cc_ublox

} // namespace cc_tools_qt_plugin
