// Generated by commsdsl2tools_qt v6.3.0

#include "CfgNvs.h"

#include "cc_tools_qt/ProtocolMessageBase.h"
#include "cc_tools_qt/property/field.h"
#include "cc_tools_qt_plugin/cc_ublox/field/CfgNvsMask.h"
#include "cc_tools_qt_plugin/cc_ublox/options/DefaultOptions.h"
#include "cc_ublox/message/CfgNvs.h"

namespace cc_tools_qt_plugin
{

namespace cc_ublox
{

namespace message
{

namespace
{

static QVariantMap createProps_clearMask(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::CfgNvsFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::ClearMask;
    auto props = cc_tools_qt_plugin::cc_ublox::field::createProps_cfgNvsMask(Field::name(), serHidden);
    return props;
}

static QVariantMap createProps_saveMask(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::CfgNvsFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::SaveMask;
    auto props = cc_tools_qt_plugin::cc_ublox::field::createProps_cfgNvsMask(Field::name(), serHidden);
    return props;
}

static QVariantMap createProps_loadMask(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::CfgNvsFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::LoadMask;
    auto props = cc_tools_qt_plugin::cc_ublox::field::createProps_cfgNvsMask(Field::name(), serHidden);
    return props;
}

static QVariantMap createProps_deviceMask(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::CfgNvsFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::DeviceMask;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .add(0U, "devBBR")
            .add(1U, "devFlash")
            .add(2U, "devEEPROM")
            .add(4U, "devSpiFlash")
            .asMap();
}

QVariantList createProps()
{
    QVariantList props;
    props.append(createProps_clearMask(false));
    props.append(createProps_saveMask(false));
    props.append(createProps_loadMask(false));
    props.append(createProps_deviceMask(false));
    return props;
}

} // namespace

class CfgNvsImpl : public
    cc_tools_qt::ProtocolMessageBase<
        ::cc_ublox::message::CfgNvs<cc_tools_qt_plugin::cc_ublox::Message, cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>,
        CfgNvsImpl
    >
{
public:
    CfgNvsImpl() = default;
    CfgNvsImpl(const CfgNvsImpl&) = delete;
    CfgNvsImpl(CfgNvsImpl&&) = delete;
    virtual ~CfgNvsImpl() = default;
    CfgNvsImpl& operator=(const CfgNvsImpl&) = default;
    CfgNvsImpl& operator=(CfgNvsImpl&&) = default;

protected:
    virtual const QVariantList& fieldsPropertiesImpl() const override
    {
        static const QVariantList Props = createProps();
        return Props;
    }
};

CfgNvs::CfgNvs() : m_pImpl(new CfgNvsImpl) {}
CfgNvs::~CfgNvs() = default;

CfgNvs& CfgNvs::operator=(const CfgNvs& other)
{
    *m_pImpl = *other.m_pImpl;
    return *this;
}

CfgNvs& CfgNvs::operator=(CfgNvs&& other)
{
    *m_pImpl = std::move(*other.m_pImpl);
    return *this;
}

CfgNvs::MsgIdParamType CfgNvs::doGetId()
{
    return ::cc_ublox::message::CfgNvs<cc_tools_qt_plugin::cc_ublox::Message, cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::doGetId();
}

const char* CfgNvs::nameImpl() const
{
    return static_cast<const cc_tools_qt::Message*>(m_pImpl.get())->name();
}

const QVariantList& CfgNvs::fieldsPropertiesImpl() const
{
    return m_pImpl->fieldsProperties();
}

void CfgNvs::dispatchImpl(cc_tools_qt::MessageHandler& handler)
{
    static_cast<cc_tools_qt::Message*>(m_pImpl.get())->dispatch(handler);
}

void CfgNvs::resetImpl()
{
    m_pImpl->reset();
}

bool CfgNvs::assignImpl(const cc_tools_qt::Message& other)
{
    auto* castedOther = dynamic_cast<const CfgNvs*>(&other);
    if (castedOther == nullptr) {
        return false;
    }
    return m_pImpl->assign(*castedOther->m_pImpl);
}

CfgNvs::MsgIdParamType CfgNvs::getIdImpl() const
{
    return m_pImpl->getId();
}

comms::ErrorStatus CfgNvs::readImpl(ReadIterator& iter, std::size_t len)
{
    return m_pImpl->read(iter, len);
}

comms::ErrorStatus CfgNvs::writeImpl(WriteIterator& iter, std::size_t len) const
{
    return m_pImpl->write(iter, len);
}

bool CfgNvs::validImpl() const
{
    return m_pImpl->valid();
}

std::size_t CfgNvs::lengthImpl() const
{
    return m_pImpl->length();
}

bool CfgNvs::refreshImpl()
{
    return m_pImpl->refresh();
}

} // namespace message

} // namespace cc_ublox

} // namespace cc_tools_qt_plugin
