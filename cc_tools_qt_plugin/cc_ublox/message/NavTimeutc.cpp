// Generated by commsdsl2tools_qt v6.3.4

#include "NavTimeutc.h"

#include "cc_tools_qt/ProtocolMessageBase.h"
#include "cc_tools_qt/property/field.h"
#include "cc_tools_qt_plugin/cc_ublox/field/Day.h"
#include "cc_tools_qt_plugin/cc_ublox/field/Hour.h"
#include "cc_tools_qt_plugin/cc_ublox/field/Itow.h"
#include "cc_tools_qt_plugin/cc_ublox/field/Min.h"
#include "cc_tools_qt_plugin/cc_ublox/field/Month.h"
#include "cc_tools_qt_plugin/cc_ublox/field/Sec.h"
#include "cc_tools_qt_plugin/cc_ublox/field/Year.h"
#include "cc_tools_qt_plugin/cc_ublox/options/DefaultOptions.h"
#include "cc_ublox/message/NavTimeutc.h"

namespace cc_tools_qt_plugin
{

namespace cc_ublox
{

namespace message
{

namespace
{

static QVariantMap createProps_itow(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::NavTimeutcFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::Itow;
    auto props = cc_tools_qt_plugin::cc_ublox::field::createProps_itow(Field::name(), serHidden);
    return props;
}

static QVariantMap createProps_tAcc(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::NavTimeutcFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::TAcc;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .asMap();
}

static QVariantMap createProps_nano(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::NavTimeutcFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::Nano;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .asMap();
}

static QVariantMap createProps_year(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::NavTimeutcFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::Year;
    auto props = cc_tools_qt_plugin::cc_ublox::field::createProps_year(Field::name(), serHidden);
    return props;
}

static QVariantMap createProps_month(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::NavTimeutcFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::Month;
    auto props = cc_tools_qt_plugin::cc_ublox::field::createProps_month(Field::name(), serHidden);
    return props;
}

static QVariantMap createProps_day(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::NavTimeutcFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::Day;
    auto props = cc_tools_qt_plugin::cc_ublox::field::createProps_day(Field::name(), serHidden);
    return props;
}

static QVariantMap createProps_hour(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::NavTimeutcFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::Hour;
    auto props = cc_tools_qt_plugin::cc_ublox::field::createProps_hour(Field::name(), serHidden);
    return props;
}

static QVariantMap createProps_min(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::NavTimeutcFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::Min;
    auto props = cc_tools_qt_plugin::cc_ublox::field::createProps_min(Field::name(), serHidden);
    return props;
}

static QVariantMap createProps_sec(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::NavTimeutcFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::Sec;
    auto props = cc_tools_qt_plugin::cc_ublox::field::createProps_sec(Field::name(), serHidden);
    return props;
}

struct ValidMembers
{
    static QVariantMap createProps_bits(bool serHidden)
    {
        static_cast<void>(serHidden);
        using Field = ::cc_ublox::message::NavTimeutcFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::ValidMembers::Bits;
        return
            cc_tools_qt::property::field::ForField<Field>()
                .name(Field::name())
                .serialisedHidden(serHidden)
                .add(0U, "validTOW")
                .add(1U, "validWKN")
                .add(2U, "validUTC")
                .asMap();
    }

    static QVariantMap createProps_utcStandard(bool serHidden)
    {
        static_cast<void>(serHidden);
        using Field = ::cc_ublox::message::NavTimeutcFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::ValidMembers::UtcStandard;
        return
            cc_tools_qt::property::field::ForField<Field>()
                .name(Field::name())
                .serialisedHidden(serHidden)
                .add("Not Available", 0)
                .add("CRL", 1)
                .add("NIST", 2)
                .add("USNO", 3)
                .add("BIPM", 4)
                .add("EuLab", 5)
                .add("SU", 6)
                .add("NTSC", 7)
                .add("Unknown", 15)
                .asMap();
    }
}; // struct ValidMembers

static QVariantMap createProps_valid(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::NavTimeutcFields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::Valid;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .add(ValidMembers::createProps_bits(true))
            .add(ValidMembers::createProps_utcStandard(true))
            .asMap();
}

QVariantList createProps()
{
    QVariantList props;
    props.append(createProps_itow(false));
    props.append(createProps_tAcc(false));
    props.append(createProps_nano(false));
    props.append(createProps_year(false));
    props.append(createProps_month(false));
    props.append(createProps_day(false));
    props.append(createProps_hour(false));
    props.append(createProps_min(false));
    props.append(createProps_sec(false));
    props.append(createProps_valid(false));
    return props;
}

} // namespace

class NavTimeutcImpl : public
    cc_tools_qt::ProtocolMessageBase<
        ::cc_ublox::message::NavTimeutc<cc_tools_qt_plugin::cc_ublox::Message, cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>,
        NavTimeutcImpl
    >
{
public:
    NavTimeutcImpl() = default;
    NavTimeutcImpl(const NavTimeutcImpl&) = delete;
    NavTimeutcImpl(NavTimeutcImpl&&) = delete;
    virtual ~NavTimeutcImpl() = default;
    NavTimeutcImpl& operator=(const NavTimeutcImpl&) = default;
    NavTimeutcImpl& operator=(NavTimeutcImpl&&) = default;

protected:
    virtual const QVariantList& fieldsPropertiesImpl() const override
    {
        static const QVariantList Props = createProps();
        return Props;
    }
};

NavTimeutc::NavTimeutc() : m_pImpl(new NavTimeutcImpl) {}
NavTimeutc::~NavTimeutc() = default;

NavTimeutc& NavTimeutc::operator=(const NavTimeutc& other)
{
    *m_pImpl = *other.m_pImpl;
    return *this;
}

NavTimeutc& NavTimeutc::operator=(NavTimeutc&& other)
{
    *m_pImpl = std::move(*other.m_pImpl);
    return *this;
}

NavTimeutc::MsgIdParamType NavTimeutc::doGetId()
{
    return ::cc_ublox::message::NavTimeutc<cc_tools_qt_plugin::cc_ublox::Message, cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::doGetId();
}

const char* NavTimeutc::nameImpl() const
{
    return static_cast<const cc_tools_qt::Message*>(m_pImpl.get())->name();
}

const QVariantList& NavTimeutc::fieldsPropertiesImpl() const
{
    return m_pImpl->fieldsProperties();
}

void NavTimeutc::dispatchImpl(cc_tools_qt::MessageHandler& handler)
{
    static_cast<cc_tools_qt::Message*>(m_pImpl.get())->dispatch(handler);
}

void NavTimeutc::resetImpl()
{
    m_pImpl->reset();
}

bool NavTimeutc::assignImpl(const cc_tools_qt::Message& other)
{
    auto* castedOther = dynamic_cast<const NavTimeutc*>(&other);
    if (castedOther == nullptr) {
        return false;
    }
    return m_pImpl->assign(*castedOther->m_pImpl);
}

NavTimeutc::MsgIdParamType NavTimeutc::getIdImpl() const
{
    return m_pImpl->getId();
}

comms::ErrorStatus NavTimeutc::readImpl(ReadIterator& iter, std::size_t len)
{
    return m_pImpl->read(iter, len);
}

comms::ErrorStatus NavTimeutc::writeImpl(WriteIterator& iter, std::size_t len) const
{
    return m_pImpl->write(iter, len);
}

bool NavTimeutc::validImpl() const
{
    return m_pImpl->valid();
}

std::size_t NavTimeutc::lengthImpl() const
{
    return m_pImpl->length();
}

bool NavTimeutc::refreshImpl()
{
    return m_pImpl->refresh();
}

} // namespace message

} // namespace cc_ublox

} // namespace cc_tools_qt_plugin
