// Generated by commsdsl2tools_qt v6.3.3

#include "MonHw3.h"

#include "cc_tools_qt/ProtocolMessageBase.h"
#include "cc_tools_qt/property/field.h"
#include "cc_tools_qt_plugin/cc_ublox/field/Res1.h"
#include "cc_tools_qt_plugin/cc_ublox/options/DefaultOptions.h"
#include "cc_ublox/message/MonHw3.h"

namespace cc_tools_qt_plugin
{

namespace cc_ublox
{

namespace message
{

namespace
{

static QVariantMap createProps_version(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::MonHw3Fields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::Version;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .asMap();
}

static QVariantMap createProps_nPins(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::MonHw3Fields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::NPins;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .asMap();
}

static QVariantMap createProps_flags(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::MonHw3Fields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::Flags;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .add(0U, "rctCalib")
            .add(1U, "safeBoot")
            .add(2U, "xtalAbsent")
            .asMap();
}

static QVariantMap createProps_hwVersion(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::MonHw3Fields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::HwVersion;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .asMap();
}

static QVariantMap createProps_reserved0(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::MonHw3Fields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::Reserved0;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .asMap();
}

struct ListMembers
{
    struct ElementMembers
    {
        static QVariantMap createProps_pinId(bool serHidden)
        {
            static_cast<void>(serHidden);
            using Field = ::cc_ublox::message::MonHw3Fields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::ListMembers::ElementMembers::PinId;
            return
                cc_tools_qt::property::field::ForField<Field>()
                    .name(Field::name())
                    .serialisedHidden(serHidden)
                    .asMap();
        }

        struct PinMaskMembers
        {
            static QVariantMap createProps_bitsLow(bool serHidden)
            {
                static_cast<void>(serHidden);
                using Field = ::cc_ublox::message::MonHw3Fields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::ListMembers::ElementMembers::PinMaskMembers::BitsLow;
                return
                    cc_tools_qt::property::field::ForField<Field>()
                        .name(Field::name())
                        .serialisedHidden(serHidden)
                        .add(0U, "periphPIO")
                        .asMap();
            }

            static QVariantMap createProps_pinBank(bool serHidden)
            {
                static_cast<void>(serHidden);
                using Field = ::cc_ublox::message::MonHw3Fields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::ListMembers::ElementMembers::PinMaskMembers::PinBank;
                return
                    cc_tools_qt::property::field::ForField<Field>()
                        .name(Field::name())
                        .serialisedHidden(serHidden)
                        .add("A", 0)
                        .add("B", 1)
                        .add("C", 2)
                        .add("D", 3)
                        .add("E", 4)
                        .add("F", 5)
                        .add("G", 6)
                        .add("H", 7)
                        .asMap();
            }

            static QVariantMap createProps_bitsHigh(bool serHidden)
            {
                static_cast<void>(serHidden);
                using Field = ::cc_ublox::message::MonHw3Fields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::ListMembers::ElementMembers::PinMaskMembers::BitsHigh;
                return
                    cc_tools_qt::property::field::ForField<Field>()
                        .name(Field::name())
                        .serialisedHidden(serHidden)
                        .add(0U, "direction")
                        .add(1U, "value")
                        .add(2U, "vpManager")
                        .add(3U, "pioIrq")
                        .add(4U, "pioPullHigh")
                        .add(5U, "pioPullLow")
                        .asMap();
            }
        }; // struct PinMaskMembers

        static QVariantMap createProps_pinMask(bool serHidden)
        {
            static_cast<void>(serHidden);
            using Field = ::cc_ublox::message::MonHw3Fields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::ListMembers::ElementMembers::PinMask;
            return
                cc_tools_qt::property::field::ForField<Field>()
                    .name(Field::name())
                    .serialisedHidden(serHidden)
                    .add(PinMaskMembers::createProps_bitsLow(true))
                    .add(PinMaskMembers::createProps_pinBank(true))
                    .add(PinMaskMembers::createProps_bitsHigh(true))
                    .asMap();
        }

        static QVariantMap createProps_vP(bool serHidden)
        {
            static_cast<void>(serHidden);
            using Field = ::cc_ublox::message::MonHw3Fields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::ListMembers::ElementMembers::VP;
            return
                cc_tools_qt::property::field::ForField<Field>()
                    .name(Field::name())
                    .serialisedHidden(serHidden)
                    .asMap();
        }

        static QVariantMap createProps_reserved1(bool serHidden)
        {
            static_cast<void>(serHidden);
            using Field = ::cc_ublox::message::MonHw3Fields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::ListMembers::ElementMembers::Reserved1;
            auto props = cc_tools_qt_plugin::cc_ublox::field::createProps_res1(Field::name(), serHidden);
            return props;
        }
    }; // struct ElementMembers

    static QVariantMap createProps_element(bool serHidden)
    {
        static_cast<void>(serHidden);
        using Field = ::cc_ublox::message::MonHw3Fields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::ListMembers::Element;
        return
            cc_tools_qt::property::field::ForField<Field>()
                .name(Field::name())
                .serialisedHidden(serHidden)
                .add(ElementMembers::createProps_pinId(serHidden))
                .add(ElementMembers::createProps_pinMask(serHidden))
                .add(ElementMembers::createProps_vP(serHidden))
                .add(ElementMembers::createProps_reserved1(serHidden))
                .serialisedHidden()
                .asMap();
    }
}; // struct ListMembers

static QVariantMap createProps_list(bool serHidden)
{
    static_cast<void>(serHidden);
    using Field = ::cc_ublox::message::MonHw3Fields<cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::List;
    return
        cc_tools_qt::property::field::ForField<Field>()
            .name(Field::name())
            .serialisedHidden(serHidden)
            .serialisedHidden()
            .add(ListMembers::createProps_element(serHidden))
            .appendIndexToElementName()
            .asMap();
}

QVariantList createProps()
{
    QVariantList props;
    props.append(createProps_version(false));
    props.append(createProps_nPins(false));
    props.append(createProps_flags(false));
    props.append(createProps_hwVersion(false));
    props.append(createProps_reserved0(false));
    props.append(createProps_list(false));
    return props;
}

} // namespace

class MonHw3Impl : public
    cc_tools_qt::ProtocolMessageBase<
        ::cc_ublox::message::MonHw3<cc_tools_qt_plugin::cc_ublox::Message, cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>,
        MonHw3Impl
    >
{
public:
    MonHw3Impl() = default;
    MonHw3Impl(const MonHw3Impl&) = delete;
    MonHw3Impl(MonHw3Impl&&) = delete;
    virtual ~MonHw3Impl() = default;
    MonHw3Impl& operator=(const MonHw3Impl&) = default;
    MonHw3Impl& operator=(MonHw3Impl&&) = default;

protected:
    virtual const QVariantList& fieldsPropertiesImpl() const override
    {
        static const QVariantList Props = createProps();
        return Props;
    }
};

MonHw3::MonHw3() : m_pImpl(new MonHw3Impl) {}
MonHw3::~MonHw3() = default;

MonHw3& MonHw3::operator=(const MonHw3& other)
{
    *m_pImpl = *other.m_pImpl;
    return *this;
}

MonHw3& MonHw3::operator=(MonHw3&& other)
{
    *m_pImpl = std::move(*other.m_pImpl);
    return *this;
}

MonHw3::MsgIdParamType MonHw3::doGetId()
{
    return ::cc_ublox::message::MonHw3<cc_tools_qt_plugin::cc_ublox::Message, cc_tools_qt_plugin::cc_ublox::options::DefaultOptions>::doGetId();
}

const char* MonHw3::nameImpl() const
{
    return static_cast<const cc_tools_qt::Message*>(m_pImpl.get())->name();
}

const QVariantList& MonHw3::fieldsPropertiesImpl() const
{
    return m_pImpl->fieldsProperties();
}

void MonHw3::dispatchImpl(cc_tools_qt::MessageHandler& handler)
{
    static_cast<cc_tools_qt::Message*>(m_pImpl.get())->dispatch(handler);
}

void MonHw3::resetImpl()
{
    m_pImpl->reset();
}

bool MonHw3::assignImpl(const cc_tools_qt::Message& other)
{
    auto* castedOther = dynamic_cast<const MonHw3*>(&other);
    if (castedOther == nullptr) {
        return false;
    }
    return m_pImpl->assign(*castedOther->m_pImpl);
}

MonHw3::MsgIdParamType MonHw3::getIdImpl() const
{
    return m_pImpl->getId();
}

comms::ErrorStatus MonHw3::readImpl(ReadIterator& iter, std::size_t len)
{
    return m_pImpl->read(iter, len);
}

comms::ErrorStatus MonHw3::writeImpl(WriteIterator& iter, std::size_t len) const
{
    return m_pImpl->write(iter, len);
}

bool MonHw3::validImpl() const
{
    return m_pImpl->valid();
}

std::size_t MonHw3::lengthImpl() const
{
    return m_pImpl->length();
}

bool MonHw3::refreshImpl()
{
    return m_pImpl->refresh();
}

} // namespace message

} // namespace cc_ublox

} // namespace cc_tools_qt_plugin
