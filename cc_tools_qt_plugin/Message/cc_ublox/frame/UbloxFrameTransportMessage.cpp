// Generated by commsdsl2tools_qt v7.1.0

#include "UbloxFrameTransportMessage.h"

#include "cc_tools_qt/ToolsTransportMessageBase.h"
#include "cc_tools_qt_plugin/Message/cc_ublox/Message.h"
#include "cc_tools_qt_plugin/Message/cc_ublox/frame/UbloxFrameProtTransportMessage.h"

namespace cc_tools_qt_plugin
{

namespace Message
{

namespace cc_ublox
{

namespace frame
{

class UbloxFrameTransportMessageImpl : public
    cc_tools_qt::ToolsTransportMessageBase<
        cc_tools_qt_plugin::Message::cc_ublox::Message,
        cc_ublox::frame::UbloxFrameProtTransportMessage,
        UbloxFrameTransportMessageImpl
    >
{
public:
    UbloxFrameTransportMessageImpl() = default;
    UbloxFrameTransportMessageImpl(const UbloxFrameTransportMessageImpl&) = default;
    UbloxFrameTransportMessageImpl(UbloxFrameTransportMessageImpl&&) = default;
    virtual ~UbloxFrameTransportMessageImpl() = default;
    UbloxFrameTransportMessageImpl& operator=(const UbloxFrameTransportMessageImpl&) = default;
    UbloxFrameTransportMessageImpl& operator=(UbloxFrameTransportMessageImpl&&) = default;

protected:
    virtual qlonglong numericIdImpl() const override
    {
        return static_cast<qlonglong>(msg().field_id().getValue());
    }
};

UbloxFrameTransportMessage::UbloxFrameTransportMessage() : m_pImpl(new UbloxFrameTransportMessageImpl) {}
UbloxFrameTransportMessage::~UbloxFrameTransportMessage() = default;

UbloxFrameTransportMessage& UbloxFrameTransportMessage::operator=(const UbloxFrameTransportMessage& other)
{
    *m_pImpl = *other.m_pImpl;
    return *this;
}

UbloxFrameTransportMessage& UbloxFrameTransportMessage::operator=(UbloxFrameTransportMessage&& other)
{
    *m_pImpl = std::move(*other.m_pImpl);
    return *this;
}

const char* UbloxFrameTransportMessage::nameImpl() const
{
    return m_pImpl->name();
}

bool UbloxFrameTransportMessage::refreshMsgImpl()
{
    return m_pImpl->refreshMsg();
}

qlonglong UbloxFrameTransportMessage::numericIdImpl() const
{
    return m_pImpl->numericId();
}

QString UbloxFrameTransportMessage::idAsStringImpl() const
{
    return m_pImpl->idAsString();
}

void UbloxFrameTransportMessage::resetImpl()
{
    m_pImpl->reset();
}

bool UbloxFrameTransportMessage::assignImpl(const cc_tools_qt::ToolsMessage& other)
{
    auto* castedOther = dynamic_cast<const UbloxFrameTransportMessage*>(&other);
    if (castedOther == nullptr) {
        return false;
    }
    return m_pImpl->assign(*castedOther->m_pImpl);
}

bool UbloxFrameTransportMessage::isValidImpl() const
{
    return m_pImpl->isValid();
}

UbloxFrameTransportMessage::DataSeq UbloxFrameTransportMessage::encodeDataImpl() const
{
    return m_pImpl->encodeData();
}

bool UbloxFrameTransportMessage::decodeDataImpl(const DataSeq& data)
{
    return m_pImpl->decodeData(data);
}

UbloxFrameTransportMessage::Ptr UbloxFrameTransportMessage::cloneImpl() const
{
    ImplPtr impl(static_cast<UbloxFrameTransportMessageImpl*>(m_pImpl->clone().release()));
    return Ptr(new UbloxFrameTransportMessage(std::move(impl)));
}

void UbloxFrameTransportMessage::assignProtMessageImpl(void* protMsg)
{
    m_pImpl->assignProtMessage(protMsg);
}

UbloxFrameTransportMessage::DataSeq UbloxFrameTransportMessage::encodeFramedImpl(cc_tools_qt::ToolsFrame& frame) const
{
    return m_pImpl->encodeFramed(frame);
}

UbloxFrameTransportMessage::FieldsList UbloxFrameTransportMessage::transportFieldsImpl()
{
    return m_pImpl->transportFields();
}

UbloxFrameTransportMessage::FieldsList UbloxFrameTransportMessage::payloadFieldsImpl()
{
    return m_pImpl->payloadFields();
}

UbloxFrameTransportMessage::UbloxFrameTransportMessage(ImplPtr&& impl) :
    m_pImpl(std::move(impl))
{
}

} // namespace frame

} // namespace cc_ublox

} // namespace Message

} // namespace cc_tools_qt_plugin
