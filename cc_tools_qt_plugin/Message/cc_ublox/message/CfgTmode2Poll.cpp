// Generated by commsdsl2tools_qt v7.0.3

#include "CfgTmode2Poll.h"

#include "cc_tools_qt/ToolsMessageBase.h"
#include "cc_tools_qt_plugin/Message/cc_ublox/Message.h"
#include "cc_ublox/message/CfgTmode2Poll.h"

namespace cc_tools_qt_plugin
{

namespace Message
{

namespace cc_ublox
{

namespace message
{

class CfgTmode2PollImpl : public
    cc_tools_qt::ToolsMessageBase<
        cc_tools_qt_plugin::Message::cc_ublox::Message,
        ::cc_ublox::message::CfgTmode2Poll,
        CfgTmode2PollImpl
    >
{
public:
    CfgTmode2PollImpl() = default;
    CfgTmode2PollImpl(const CfgTmode2PollImpl&) = default;
    CfgTmode2PollImpl(CfgTmode2PollImpl&&) = default;
    virtual ~CfgTmode2PollImpl() = default;
    CfgTmode2PollImpl& operator=(const CfgTmode2PollImpl&) = default;
    CfgTmode2PollImpl& operator=(CfgTmode2PollImpl&&) = default;
};

CfgTmode2Poll::CfgTmode2Poll() : m_pImpl(new CfgTmode2PollImpl) {}
CfgTmode2Poll::~CfgTmode2Poll() = default;

CfgTmode2Poll& CfgTmode2Poll::operator=(const CfgTmode2Poll& other)
{
    *m_pImpl = *other.m_pImpl;
    return *this;
}

CfgTmode2Poll& CfgTmode2Poll::operator=(CfgTmode2Poll&& other)
{
    *m_pImpl = std::move(*other.m_pImpl);
    return *this;
}

const char* CfgTmode2Poll::nameImpl() const
{
    return m_pImpl->name();
}

bool CfgTmode2Poll::refreshMsgImpl()
{
    return m_pImpl->refreshMsg();
}

qlonglong CfgTmode2Poll::numericIdImpl() const
{
    return m_pImpl->numericId();
}

QString CfgTmode2Poll::idAsStringImpl() const
{
    return m_pImpl->idAsString();
}

void CfgTmode2Poll::resetImpl()
{
    m_pImpl->reset();
}

bool CfgTmode2Poll::assignImpl(const cc_tools_qt::ToolsMessage& other)
{
    auto* castedOther = dynamic_cast<const CfgTmode2Poll*>(&other);
    if (castedOther == nullptr) {
        return false;
    }
    return m_pImpl->assign(*castedOther->m_pImpl);
}

bool CfgTmode2Poll::isValidImpl() const
{
    return m_pImpl->isValid();
}

CfgTmode2Poll::DataSeq CfgTmode2Poll::encodeDataImpl() const
{
    return m_pImpl->encodeData();
}

bool CfgTmode2Poll::decodeDataImpl(const DataSeq& data)
{
    return m_pImpl->decodeData(data);
}

CfgTmode2Poll::Ptr CfgTmode2Poll::cloneImpl() const
{
    ImplPtr impl(static_cast<CfgTmode2PollImpl*>(m_pImpl->clone().release()));
    return Ptr(new CfgTmode2Poll(std::move(impl)));
}

void CfgTmode2Poll::assignProtMessageImpl(void* protMsg)
{
    m_pImpl->assignProtMessage(protMsg);
}

CfgTmode2Poll::DataSeq CfgTmode2Poll::encodeFramedImpl(cc_tools_qt::ToolsFrame& frame) const
{
    return m_pImpl->encodeFramed(frame);
}

CfgTmode2Poll::FieldsList CfgTmode2Poll::transportFieldsImpl()
{
    return m_pImpl->transportFields();
}

CfgTmode2Poll::FieldsList CfgTmode2Poll::payloadFieldsImpl()
{
    return m_pImpl->payloadFields();
}

CfgTmode2Poll::CfgTmode2Poll(ImplPtr&& impl) :
    m_pImpl(std::move(impl))
{
}

} // namespace message

} // namespace cc_ublox

} // namespace Message

} // namespace cc_tools_qt_plugin
