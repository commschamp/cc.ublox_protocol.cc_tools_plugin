// Generated by commsdsl2tools_qt v7.0.3

#include "RxmSfrbx.h"

#include "cc_tools_qt/ToolsMessageBase.h"
#include "cc_tools_qt_plugin/Message/cc_ublox/Message.h"
#include "cc_ublox/message/RxmSfrbx.h"

namespace cc_tools_qt_plugin
{

namespace Message
{

namespace cc_ublox
{

namespace message
{

class RxmSfrbxImpl : public
    cc_tools_qt::ToolsMessageBase<
        cc_tools_qt_plugin::Message::cc_ublox::Message,
        ::cc_ublox::message::RxmSfrbx,
        RxmSfrbxImpl
    >
{
public:
    RxmSfrbxImpl() = default;
    RxmSfrbxImpl(const RxmSfrbxImpl&) = default;
    RxmSfrbxImpl(RxmSfrbxImpl&&) = default;
    virtual ~RxmSfrbxImpl() = default;
    RxmSfrbxImpl& operator=(const RxmSfrbxImpl&) = default;
    RxmSfrbxImpl& operator=(RxmSfrbxImpl&&) = default;
};

RxmSfrbx::RxmSfrbx() : m_pImpl(new RxmSfrbxImpl) {}
RxmSfrbx::~RxmSfrbx() = default;

RxmSfrbx& RxmSfrbx::operator=(const RxmSfrbx& other)
{
    *m_pImpl = *other.m_pImpl;
    return *this;
}

RxmSfrbx& RxmSfrbx::operator=(RxmSfrbx&& other)
{
    *m_pImpl = std::move(*other.m_pImpl);
    return *this;
}

const char* RxmSfrbx::nameImpl() const
{
    return m_pImpl->name();
}

bool RxmSfrbx::refreshMsgImpl()
{
    return m_pImpl->refreshMsg();
}

qlonglong RxmSfrbx::numericIdImpl() const
{
    return m_pImpl->numericId();
}

QString RxmSfrbx::idAsStringImpl() const
{
    return m_pImpl->idAsString();
}

void RxmSfrbx::resetImpl()
{
    m_pImpl->reset();
}

bool RxmSfrbx::assignImpl(const cc_tools_qt::ToolsMessage& other)
{
    auto* castedOther = dynamic_cast<const RxmSfrbx*>(&other);
    if (castedOther == nullptr) {
        return false;
    }
    return m_pImpl->assign(*castedOther->m_pImpl);
}

bool RxmSfrbx::isValidImpl() const
{
    return m_pImpl->isValid();
}

RxmSfrbx::DataSeq RxmSfrbx::encodeDataImpl() const
{
    return m_pImpl->encodeData();
}

bool RxmSfrbx::decodeDataImpl(const DataSeq& data)
{
    return m_pImpl->decodeData(data);
}

RxmSfrbx::Ptr RxmSfrbx::cloneImpl() const
{
    ImplPtr impl(static_cast<RxmSfrbxImpl*>(m_pImpl->clone().release()));
    return Ptr(new RxmSfrbx(std::move(impl)));
}

void RxmSfrbx::assignProtMessageImpl(void* protMsg)
{
    m_pImpl->assignProtMessage(protMsg);
}

RxmSfrbx::DataSeq RxmSfrbx::encodeFramedImpl(cc_tools_qt::ToolsFrame& frame) const
{
    return m_pImpl->encodeFramed(frame);
}

RxmSfrbx::FieldsList RxmSfrbx::transportFieldsImpl()
{
    return m_pImpl->transportFields();
}

RxmSfrbx::FieldsList RxmSfrbx::payloadFieldsImpl()
{
    return m_pImpl->payloadFields();
}

RxmSfrbx::RxmSfrbx(ImplPtr&& impl) :
    m_pImpl(std::move(impl))
{
}

} // namespace message

} // namespace cc_ublox

} // namespace Message

} // namespace cc_tools_qt_plugin
