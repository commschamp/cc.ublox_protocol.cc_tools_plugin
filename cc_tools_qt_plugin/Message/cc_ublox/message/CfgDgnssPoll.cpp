// Generated by commsdsl2tools_qt v7.0.3

#include "CfgDgnssPoll.h"

#include "cc_tools_qt/ToolsMessageBase.h"
#include "cc_tools_qt_plugin/Message/cc_ublox/Message.h"
#include "cc_ublox/message/CfgDgnssPoll.h"

namespace cc_tools_qt_plugin
{

namespace Message
{

namespace cc_ublox
{

namespace message
{

class CfgDgnssPollImpl : public
    cc_tools_qt::ToolsMessageBase<
        cc_tools_qt_plugin::Message::cc_ublox::Message,
        ::cc_ublox::message::CfgDgnssPoll,
        CfgDgnssPollImpl
    >
{
public:
    CfgDgnssPollImpl() = default;
    CfgDgnssPollImpl(const CfgDgnssPollImpl&) = default;
    CfgDgnssPollImpl(CfgDgnssPollImpl&&) = default;
    virtual ~CfgDgnssPollImpl() = default;
    CfgDgnssPollImpl& operator=(const CfgDgnssPollImpl&) = default;
    CfgDgnssPollImpl& operator=(CfgDgnssPollImpl&&) = default;
};

CfgDgnssPoll::CfgDgnssPoll() : m_pImpl(new CfgDgnssPollImpl) {}
CfgDgnssPoll::~CfgDgnssPoll() = default;

CfgDgnssPoll& CfgDgnssPoll::operator=(const CfgDgnssPoll& other)
{
    *m_pImpl = *other.m_pImpl;
    return *this;
}

CfgDgnssPoll& CfgDgnssPoll::operator=(CfgDgnssPoll&& other)
{
    *m_pImpl = std::move(*other.m_pImpl);
    return *this;
}

const char* CfgDgnssPoll::nameImpl() const
{
    return m_pImpl->name();
}

bool CfgDgnssPoll::refreshMsgImpl()
{
    return m_pImpl->refreshMsg();
}

qlonglong CfgDgnssPoll::numericIdImpl() const
{
    return m_pImpl->numericId();
}

QString CfgDgnssPoll::idAsStringImpl() const
{
    return m_pImpl->idAsString();
}

void CfgDgnssPoll::resetImpl()
{
    m_pImpl->reset();
}

bool CfgDgnssPoll::assignImpl(const cc_tools_qt::ToolsMessage& other)
{
    auto* castedOther = dynamic_cast<const CfgDgnssPoll*>(&other);
    if (castedOther == nullptr) {
        return false;
    }
    return m_pImpl->assign(*castedOther->m_pImpl);
}

bool CfgDgnssPoll::isValidImpl() const
{
    return m_pImpl->isValid();
}

CfgDgnssPoll::DataSeq CfgDgnssPoll::encodeDataImpl() const
{
    return m_pImpl->encodeData();
}

bool CfgDgnssPoll::decodeDataImpl(const DataSeq& data)
{
    return m_pImpl->decodeData(data);
}

CfgDgnssPoll::Ptr CfgDgnssPoll::cloneImpl() const
{
    ImplPtr impl(static_cast<CfgDgnssPollImpl*>(m_pImpl->clone().release()));
    return Ptr(new CfgDgnssPoll(std::move(impl)));
}

void CfgDgnssPoll::assignProtMessageImpl(void* protMsg)
{
    m_pImpl->assignProtMessage(protMsg);
}

CfgDgnssPoll::DataSeq CfgDgnssPoll::encodeFramedImpl(cc_tools_qt::ToolsFrame& frame) const
{
    return m_pImpl->encodeFramed(frame);
}

CfgDgnssPoll::FieldsList CfgDgnssPoll::transportFieldsImpl()
{
    return m_pImpl->transportFields();
}

CfgDgnssPoll::FieldsList CfgDgnssPoll::payloadFieldsImpl()
{
    return m_pImpl->payloadFields();
}

CfgDgnssPoll::CfgDgnssPoll(ImplPtr&& impl) :
    m_pImpl(std::move(impl))
{
}

} // namespace message

} // namespace cc_ublox

} // namespace Message

} // namespace cc_tools_qt_plugin
