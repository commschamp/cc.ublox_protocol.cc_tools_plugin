// Generated by commsdsl2tools_qt v7.1.0

#include "AidEph.h"

#include "cc_tools_qt/ToolsMessageBase.h"
#include "cc_tools_qt_plugin/Message/cc_ublox/Message.h"
#include "cc_ublox/message/AidEph.h"

namespace cc_tools_qt_plugin
{

namespace Message
{

namespace cc_ublox
{

namespace message
{

class AidEphImpl : public
    cc_tools_qt::ToolsMessageBase<
        cc_tools_qt_plugin::Message::cc_ublox::Message,
        ::cc_ublox::message::AidEph,
        AidEphImpl
    >
{
public:
    AidEphImpl() = default;
    AidEphImpl(const AidEphImpl&) = default;
    AidEphImpl(AidEphImpl&&) = default;
    virtual ~AidEphImpl() = default;
    AidEphImpl& operator=(const AidEphImpl&) = default;
    AidEphImpl& operator=(AidEphImpl&&) = default;
};

AidEph::AidEph() : m_pImpl(new AidEphImpl) {}
AidEph::~AidEph() = default;

AidEph& AidEph::operator=(const AidEph& other)
{
    *m_pImpl = *other.m_pImpl;
    return *this;
}

AidEph& AidEph::operator=(AidEph&& other)
{
    *m_pImpl = std::move(*other.m_pImpl);
    return *this;
}

const char* AidEph::nameImpl() const
{
    return m_pImpl->name();
}

bool AidEph::refreshMsgImpl()
{
    return m_pImpl->refreshMsg();
}

qlonglong AidEph::numericIdImpl() const
{
    return m_pImpl->numericId();
}

QString AidEph::idAsStringImpl() const
{
    return m_pImpl->idAsString();
}

void AidEph::resetImpl()
{
    m_pImpl->reset();
}

bool AidEph::assignImpl(const cc_tools_qt::ToolsMessage& other)
{
    auto* castedOther = dynamic_cast<const AidEph*>(&other);
    if (castedOther == nullptr) {
        return false;
    }
    return m_pImpl->assign(*castedOther->m_pImpl);
}

bool AidEph::isValidImpl() const
{
    return m_pImpl->isValid();
}

AidEph::DataSeq AidEph::encodeDataImpl() const
{
    return m_pImpl->encodeData();
}

bool AidEph::decodeDataImpl(const DataSeq& data)
{
    return m_pImpl->decodeData(data);
}

AidEph::Ptr AidEph::cloneImpl() const
{
    ImplPtr impl(static_cast<AidEphImpl*>(m_pImpl->clone().release()));
    return Ptr(new AidEph(std::move(impl)));
}

void AidEph::assignProtMessageImpl(void* protMsg)
{
    m_pImpl->assignProtMessage(protMsg);
}

AidEph::DataSeq AidEph::encodeFramedImpl(cc_tools_qt::ToolsFrame& frame) const
{
    return m_pImpl->encodeFramed(frame);
}

AidEph::FieldsList AidEph::transportFieldsImpl()
{
    return m_pImpl->transportFields();
}

AidEph::FieldsList AidEph::payloadFieldsImpl()
{
    return m_pImpl->payloadFields();
}

AidEph::AidEph(ImplPtr&& impl) :
    m_pImpl(std::move(impl))
{
}

} // namespace message

} // namespace cc_ublox

} // namespace Message

} // namespace cc_tools_qt_plugin
