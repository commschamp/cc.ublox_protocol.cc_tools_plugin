// Generated by commsdsl2tools_qt v7.0.3

#include "AidIni.h"

#include "cc_tools_qt/ToolsMessageBase.h"
#include "cc_tools_qt_plugin/Message/cc_ublox/Message.h"
#include "cc_ublox/message/AidIni.h"

namespace cc_tools_qt_plugin
{

namespace Message
{

namespace cc_ublox
{

namespace message
{

class AidIniImpl : public
    cc_tools_qt::ToolsMessageBase<
        cc_tools_qt_plugin::Message::cc_ublox::Message,
        ::cc_ublox::message::AidIni,
        AidIniImpl
    >
{
public:
    AidIniImpl() = default;
    AidIniImpl(const AidIniImpl&) = default;
    AidIniImpl(AidIniImpl&&) = default;
    virtual ~AidIniImpl() = default;
    AidIniImpl& operator=(const AidIniImpl&) = default;
    AidIniImpl& operator=(AidIniImpl&&) = default;
};

AidIni::AidIni() : m_pImpl(new AidIniImpl) {}
AidIni::~AidIni() = default;

AidIni& AidIni::operator=(const AidIni& other)
{
    *m_pImpl = *other.m_pImpl;
    return *this;
}

AidIni& AidIni::operator=(AidIni&& other)
{
    *m_pImpl = std::move(*other.m_pImpl);
    return *this;
}

const char* AidIni::nameImpl() const
{
    return m_pImpl->name();
}

bool AidIni::refreshMsgImpl()
{
    return m_pImpl->refreshMsg();
}

qlonglong AidIni::numericIdImpl() const
{
    return m_pImpl->numericId();
}

QString AidIni::idAsStringImpl() const
{
    return m_pImpl->idAsString();
}

void AidIni::resetImpl()
{
    m_pImpl->reset();
}

bool AidIni::assignImpl(const cc_tools_qt::ToolsMessage& other)
{
    auto* castedOther = dynamic_cast<const AidIni*>(&other);
    if (castedOther == nullptr) {
        return false;
    }
    return m_pImpl->assign(*castedOther->m_pImpl);
}

bool AidIni::isValidImpl() const
{
    return m_pImpl->isValid();
}

AidIni::DataSeq AidIni::encodeDataImpl() const
{
    return m_pImpl->encodeData();
}

bool AidIni::decodeDataImpl(const DataSeq& data)
{
    return m_pImpl->decodeData(data);
}

AidIni::Ptr AidIni::cloneImpl() const
{
    ImplPtr impl(static_cast<AidIniImpl*>(m_pImpl->clone().release()));
    return Ptr(new AidIni(std::move(impl)));
}

void AidIni::assignProtMessageImpl(void* protMsg)
{
    m_pImpl->assignProtMessage(protMsg);
}

AidIni::DataSeq AidIni::encodeFramedImpl(cc_tools_qt::ToolsFrame& frame) const
{
    return m_pImpl->encodeFramed(frame);
}

AidIni::FieldsList AidIni::transportFieldsImpl()
{
    return m_pImpl->transportFields();
}

AidIni::FieldsList AidIni::payloadFieldsImpl()
{
    return m_pImpl->payloadFields();
}

AidIni::AidIni(ImplPtr&& impl) :
    m_pImpl(std::move(impl))
{
}

} // namespace message

} // namespace cc_ublox

} // namespace Message

} // namespace cc_tools_qt_plugin
