// Generated by commsdsl2tools_qt v7.0.2

#include "CfgEkfPoll.h"

#include "cc_tools_qt/ToolsMessageBase.h"
#include "cc_tools_qt_plugin/Message/cc_ublox/Message.h"
#include "cc_ublox/message/CfgEkfPoll.h"

namespace cc_tools_qt_plugin
{

namespace Message
{

namespace cc_ublox
{

namespace message
{

class CfgEkfPollImpl : public
    cc_tools_qt::ToolsMessageBase<
        cc_tools_qt_plugin::Message::cc_ublox::Message,
        ::cc_ublox::message::CfgEkfPoll,
        CfgEkfPollImpl
    >
{
public:
    CfgEkfPollImpl() = default;
    CfgEkfPollImpl(const CfgEkfPollImpl&) = default;
    CfgEkfPollImpl(CfgEkfPollImpl&&) = default;
    virtual ~CfgEkfPollImpl() = default;
    CfgEkfPollImpl& operator=(const CfgEkfPollImpl&) = default;
    CfgEkfPollImpl& operator=(CfgEkfPollImpl&&) = default;
};

CfgEkfPoll::CfgEkfPoll() : m_pImpl(new CfgEkfPollImpl) {}
CfgEkfPoll::~CfgEkfPoll() = default;

CfgEkfPoll& CfgEkfPoll::operator=(const CfgEkfPoll& other)
{
    *m_pImpl = *other.m_pImpl;
    return *this;
}

CfgEkfPoll& CfgEkfPoll::operator=(CfgEkfPoll&& other)
{
    *m_pImpl = std::move(*other.m_pImpl);
    return *this;
}

const char* CfgEkfPoll::nameImpl() const
{
    return m_pImpl->name();
}

bool CfgEkfPoll::refreshMsgImpl()
{
    return m_pImpl->refreshMsg();
}

qlonglong CfgEkfPoll::numericIdImpl() const
{
    return m_pImpl->numericId();
}

QString CfgEkfPoll::idAsStringImpl() const
{
    return m_pImpl->idAsString();
}

void CfgEkfPoll::resetImpl()
{
    m_pImpl->reset();
}

bool CfgEkfPoll::assignImpl(const cc_tools_qt::ToolsMessage& other)
{
    auto* castedOther = dynamic_cast<const CfgEkfPoll*>(&other);
    if (castedOther == nullptr) {
        return false;
    }
    return m_pImpl->assign(*castedOther->m_pImpl);
}

bool CfgEkfPoll::isValidImpl() const
{
    return m_pImpl->isValid();
}

CfgEkfPoll::DataSeq CfgEkfPoll::encodeDataImpl() const
{
    return m_pImpl->encodeData();
}

bool CfgEkfPoll::decodeDataImpl(const DataSeq& data)
{
    return m_pImpl->decodeData(data);
}

CfgEkfPoll::Ptr CfgEkfPoll::cloneImpl() const
{
    ImplPtr impl(static_cast<CfgEkfPollImpl*>(m_pImpl->clone().release()));
    return Ptr(new CfgEkfPoll(std::move(impl)));
}

void CfgEkfPoll::assignProtMessageImpl(void* protMsg)
{
    m_pImpl->assignProtMessage(protMsg);
}

CfgEkfPoll::DataSeq CfgEkfPoll::encodeFramedImpl(cc_tools_qt::ToolsFrame& frame) const
{
    return m_pImpl->encodeFramed(frame);
}

CfgEkfPoll::FieldsList CfgEkfPoll::transportFieldsImpl()
{
    return m_pImpl->transportFields();
}

CfgEkfPoll::FieldsList CfgEkfPoll::payloadFieldsImpl()
{
    return m_pImpl->payloadFields();
}

CfgEkfPoll::CfgEkfPoll(ImplPtr&& impl) :
    m_pImpl(std::move(impl))
{
}

} // namespace message

} // namespace cc_ublox

} // namespace Message

} // namespace cc_tools_qt_plugin
