// Generated by commsdsl2tools_qt v7.0.0

#include "NavPosecefPoll.h"

#include "cc_tools_qt/ToolsMessageBase.h"
#include "cc_tools_qt_plugin/Message/cc_ublox/Message.h"
#include "cc_ublox/message/NavPosecefPoll.h"

namespace cc_tools_qt_plugin
{

namespace Message
{

namespace cc_ublox
{

namespace message
{

class NavPosecefPollImpl : public
    cc_tools_qt::ToolsMessageBase<
        cc_tools_qt_plugin::Message::cc_ublox::Message,
        ::cc_ublox::message::NavPosecefPoll,
        NavPosecefPollImpl
    >
{
public:
    NavPosecefPollImpl() = default;
    NavPosecefPollImpl(const NavPosecefPollImpl&) = default;
    NavPosecefPollImpl(NavPosecefPollImpl&&) = default;
    virtual ~NavPosecefPollImpl() = default;
    NavPosecefPollImpl& operator=(const NavPosecefPollImpl&) = default;
    NavPosecefPollImpl& operator=(NavPosecefPollImpl&&) = default;
};

NavPosecefPoll::NavPosecefPoll() : m_pImpl(new NavPosecefPollImpl) {}
NavPosecefPoll::~NavPosecefPoll() = default;

NavPosecefPoll& NavPosecefPoll::operator=(const NavPosecefPoll& other)
{
    *m_pImpl = *other.m_pImpl;
    return *this;
}

NavPosecefPoll& NavPosecefPoll::operator=(NavPosecefPoll&& other)
{
    *m_pImpl = std::move(*other.m_pImpl);
    return *this;
}

const char* NavPosecefPoll::nameImpl() const
{
    return m_pImpl->name();
}

bool NavPosecefPoll::refreshMsgImpl()
{
    return m_pImpl->refreshMsg();
}

qlonglong NavPosecefPoll::numericIdImpl() const
{
    return m_pImpl->numericId();
}

QString NavPosecefPoll::idAsStringImpl() const
{
    return m_pImpl->idAsString();
}

void NavPosecefPoll::resetImpl()
{
    m_pImpl->reset();
}

bool NavPosecefPoll::assignImpl(const cc_tools_qt::ToolsMessage& other)
{
    auto* castedOther = dynamic_cast<const NavPosecefPoll*>(&other);
    if (castedOther == nullptr) {
        return false;
    }
    return m_pImpl->assign(*castedOther->m_pImpl);
}

bool NavPosecefPoll::isValidImpl() const
{
    return m_pImpl->isValid();
}

NavPosecefPoll::DataSeq NavPosecefPoll::encodeDataImpl() const
{
    return m_pImpl->encodeData();
}

bool NavPosecefPoll::decodeDataImpl(const DataSeq& data)
{
    return m_pImpl->decodeData(data);
}

NavPosecefPoll::Ptr NavPosecefPoll::cloneImpl() const
{
    ImplPtr impl(static_cast<NavPosecefPollImpl*>(m_pImpl->clone().release()));
    return Ptr(new NavPosecefPoll(std::move(impl)));
}

void NavPosecefPoll::assignProtMessageImpl(void* protMsg)
{
    m_pImpl->assignProtMessage(protMsg);
}

NavPosecefPoll::DataSeq NavPosecefPoll::encodeFramedImpl(cc_tools_qt::ToolsFrame& frame) const
{
    return m_pImpl->encodeFramed(frame);
}

NavPosecefPoll::FieldsList NavPosecefPoll::transportFieldsImpl()
{
    return m_pImpl->transportFields();
}

NavPosecefPoll::FieldsList NavPosecefPoll::payloadFieldsImpl()
{
    return m_pImpl->payloadFields();
}

NavPosecefPoll::NavPosecefPoll(ImplPtr&& impl) :
    m_pImpl(std::move(impl))
{
}

} // namespace message

} // namespace cc_ublox

} // namespace Message

} // namespace cc_tools_qt_plugin
