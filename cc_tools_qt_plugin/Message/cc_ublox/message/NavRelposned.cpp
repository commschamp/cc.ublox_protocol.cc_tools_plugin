// Generated by commsdsl2tools_qt v7.0.0

#include "NavRelposned.h"

#include "cc_tools_qt/ToolsMessageBase.h"
#include "cc_tools_qt_plugin/Message/cc_ublox/Message.h"
#include "cc_ublox/message/NavRelposned.h"

namespace cc_tools_qt_plugin
{

namespace Message
{

namespace cc_ublox
{

namespace message
{

class NavRelposnedImpl : public
    cc_tools_qt::ToolsMessageBase<
        cc_tools_qt_plugin::Message::cc_ublox::Message,
        ::cc_ublox::message::NavRelposned,
        NavRelposnedImpl
    >
{
public:
    NavRelposnedImpl() = default;
    NavRelposnedImpl(const NavRelposnedImpl&) = default;
    NavRelposnedImpl(NavRelposnedImpl&&) = default;
    virtual ~NavRelposnedImpl() = default;
    NavRelposnedImpl& operator=(const NavRelposnedImpl&) = default;
    NavRelposnedImpl& operator=(NavRelposnedImpl&&) = default;
};

NavRelposned::NavRelposned() : m_pImpl(new NavRelposnedImpl) {}
NavRelposned::~NavRelposned() = default;

NavRelposned& NavRelposned::operator=(const NavRelposned& other)
{
    *m_pImpl = *other.m_pImpl;
    return *this;
}

NavRelposned& NavRelposned::operator=(NavRelposned&& other)
{
    *m_pImpl = std::move(*other.m_pImpl);
    return *this;
}

const char* NavRelposned::nameImpl() const
{
    return m_pImpl->name();
}

bool NavRelposned::refreshMsgImpl()
{
    return m_pImpl->refreshMsg();
}

qlonglong NavRelposned::numericIdImpl() const
{
    return m_pImpl->numericId();
}

QString NavRelposned::idAsStringImpl() const
{
    return m_pImpl->idAsString();
}

void NavRelposned::resetImpl()
{
    m_pImpl->reset();
}

bool NavRelposned::assignImpl(const cc_tools_qt::ToolsMessage& other)
{
    auto* castedOther = dynamic_cast<const NavRelposned*>(&other);
    if (castedOther == nullptr) {
        return false;
    }
    return m_pImpl->assign(*castedOther->m_pImpl);
}

bool NavRelposned::isValidImpl() const
{
    return m_pImpl->isValid();
}

NavRelposned::DataSeq NavRelposned::encodeDataImpl() const
{
    return m_pImpl->encodeData();
}

bool NavRelposned::decodeDataImpl(const DataSeq& data)
{
    return m_pImpl->decodeData(data);
}

NavRelposned::Ptr NavRelposned::cloneImpl() const
{
    ImplPtr impl(static_cast<NavRelposnedImpl*>(m_pImpl->clone().release()));
    return Ptr(new NavRelposned(std::move(impl)));
}

void NavRelposned::assignProtMessageImpl(void* protMsg)
{
    m_pImpl->assignProtMessage(protMsg);
}

NavRelposned::DataSeq NavRelposned::encodeFramedImpl(cc_tools_qt::ToolsFrame& frame) const
{
    return m_pImpl->encodeFramed(frame);
}

NavRelposned::FieldsList NavRelposned::transportFieldsImpl()
{
    return m_pImpl->transportFields();
}

NavRelposned::FieldsList NavRelposned::payloadFieldsImpl()
{
    return m_pImpl->payloadFields();
}

NavRelposned::NavRelposned(ImplPtr&& impl) :
    m_pImpl(std::move(impl))
{
}

} // namespace message

} // namespace cc_ublox

} // namespace Message

} // namespace cc_tools_qt_plugin
