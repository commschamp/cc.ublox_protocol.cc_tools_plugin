// Generated by commsdsl2tools_qt v7.0.3

#include "CfgNavx5.h"

#include "cc_tools_qt/ToolsMessageBase.h"
#include "cc_tools_qt_plugin/Message/cc_ublox/Message.h"
#include "cc_ublox/message/CfgNavx5.h"

namespace cc_tools_qt_plugin
{

namespace Message
{

namespace cc_ublox
{

namespace message
{

class CfgNavx5Impl : public
    cc_tools_qt::ToolsMessageBase<
        cc_tools_qt_plugin::Message::cc_ublox::Message,
        ::cc_ublox::message::CfgNavx5,
        CfgNavx5Impl
    >
{
public:
    CfgNavx5Impl() = default;
    CfgNavx5Impl(const CfgNavx5Impl&) = default;
    CfgNavx5Impl(CfgNavx5Impl&&) = default;
    virtual ~CfgNavx5Impl() = default;
    CfgNavx5Impl& operator=(const CfgNavx5Impl&) = default;
    CfgNavx5Impl& operator=(CfgNavx5Impl&&) = default;
};

CfgNavx5::CfgNavx5() : m_pImpl(new CfgNavx5Impl) {}
CfgNavx5::~CfgNavx5() = default;

CfgNavx5& CfgNavx5::operator=(const CfgNavx5& other)
{
    *m_pImpl = *other.m_pImpl;
    return *this;
}

CfgNavx5& CfgNavx5::operator=(CfgNavx5&& other)
{
    *m_pImpl = std::move(*other.m_pImpl);
    return *this;
}

const char* CfgNavx5::nameImpl() const
{
    return m_pImpl->name();
}

bool CfgNavx5::refreshMsgImpl()
{
    return m_pImpl->refreshMsg();
}

qlonglong CfgNavx5::numericIdImpl() const
{
    return m_pImpl->numericId();
}

QString CfgNavx5::idAsStringImpl() const
{
    return m_pImpl->idAsString();
}

void CfgNavx5::resetImpl()
{
    m_pImpl->reset();
}

bool CfgNavx5::assignImpl(const cc_tools_qt::ToolsMessage& other)
{
    auto* castedOther = dynamic_cast<const CfgNavx5*>(&other);
    if (castedOther == nullptr) {
        return false;
    }
    return m_pImpl->assign(*castedOther->m_pImpl);
}

bool CfgNavx5::isValidImpl() const
{
    return m_pImpl->isValid();
}

CfgNavx5::DataSeq CfgNavx5::encodeDataImpl() const
{
    return m_pImpl->encodeData();
}

bool CfgNavx5::decodeDataImpl(const DataSeq& data)
{
    return m_pImpl->decodeData(data);
}

CfgNavx5::Ptr CfgNavx5::cloneImpl() const
{
    ImplPtr impl(static_cast<CfgNavx5Impl*>(m_pImpl->clone().release()));
    return Ptr(new CfgNavx5(std::move(impl)));
}

void CfgNavx5::assignProtMessageImpl(void* protMsg)
{
    m_pImpl->assignProtMessage(protMsg);
}

CfgNavx5::DataSeq CfgNavx5::encodeFramedImpl(cc_tools_qt::ToolsFrame& frame) const
{
    return m_pImpl->encodeFramed(frame);
}

CfgNavx5::FieldsList CfgNavx5::transportFieldsImpl()
{
    return m_pImpl->transportFields();
}

CfgNavx5::FieldsList CfgNavx5::payloadFieldsImpl()
{
    return m_pImpl->payloadFields();
}

CfgNavx5::CfgNavx5(ImplPtr&& impl) :
    m_pImpl(std::move(impl))
{
}

} // namespace message

} // namespace cc_ublox

} // namespace Message

} // namespace cc_tools_qt_plugin
