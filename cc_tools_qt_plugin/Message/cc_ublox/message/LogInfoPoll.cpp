// Generated by commsdsl2tools_qt v7.1.0

#include "LogInfoPoll.h"

#include "cc_tools_qt/ToolsMessageBase.h"
#include "cc_tools_qt_plugin/Message/cc_ublox/Message.h"
#include "cc_ublox/message/LogInfoPoll.h"

namespace cc_tools_qt_plugin
{

namespace Message
{

namespace cc_ublox
{

namespace message
{

class LogInfoPollImpl : public
    cc_tools_qt::ToolsMessageBase<
        cc_tools_qt_plugin::Message::cc_ublox::Message,
        ::cc_ublox::message::LogInfoPoll,
        LogInfoPollImpl
    >
{
public:
    LogInfoPollImpl() = default;
    LogInfoPollImpl(const LogInfoPollImpl&) = default;
    LogInfoPollImpl(LogInfoPollImpl&&) = default;
    virtual ~LogInfoPollImpl() = default;
    LogInfoPollImpl& operator=(const LogInfoPollImpl&) = default;
    LogInfoPollImpl& operator=(LogInfoPollImpl&&) = default;
};

LogInfoPoll::LogInfoPoll() : m_pImpl(new LogInfoPollImpl) {}
LogInfoPoll::~LogInfoPoll() = default;

LogInfoPoll& LogInfoPoll::operator=(const LogInfoPoll& other)
{
    *m_pImpl = *other.m_pImpl;
    return *this;
}

LogInfoPoll& LogInfoPoll::operator=(LogInfoPoll&& other)
{
    *m_pImpl = std::move(*other.m_pImpl);
    return *this;
}

const char* LogInfoPoll::nameImpl() const
{
    return m_pImpl->name();
}

bool LogInfoPoll::refreshMsgImpl()
{
    return m_pImpl->refreshMsg();
}

qlonglong LogInfoPoll::numericIdImpl() const
{
    return m_pImpl->numericId();
}

QString LogInfoPoll::idAsStringImpl() const
{
    return m_pImpl->idAsString();
}

void LogInfoPoll::resetImpl()
{
    m_pImpl->reset();
}

bool LogInfoPoll::assignImpl(const cc_tools_qt::ToolsMessage& other)
{
    auto* castedOther = dynamic_cast<const LogInfoPoll*>(&other);
    if (castedOther == nullptr) {
        return false;
    }
    return m_pImpl->assign(*castedOther->m_pImpl);
}

bool LogInfoPoll::isValidImpl() const
{
    return m_pImpl->isValid();
}

LogInfoPoll::DataSeq LogInfoPoll::encodeDataImpl() const
{
    return m_pImpl->encodeData();
}

bool LogInfoPoll::decodeDataImpl(const DataSeq& data)
{
    return m_pImpl->decodeData(data);
}

LogInfoPoll::Ptr LogInfoPoll::cloneImpl() const
{
    ImplPtr impl(static_cast<LogInfoPollImpl*>(m_pImpl->clone().release()));
    return Ptr(new LogInfoPoll(std::move(impl)));
}

void LogInfoPoll::assignProtMessageImpl(void* protMsg)
{
    m_pImpl->assignProtMessage(protMsg);
}

LogInfoPoll::DataSeq LogInfoPoll::encodeFramedImpl(cc_tools_qt::ToolsFrame& frame) const
{
    return m_pImpl->encodeFramed(frame);
}

LogInfoPoll::FieldsList LogInfoPoll::transportFieldsImpl()
{
    return m_pImpl->transportFields();
}

LogInfoPoll::FieldsList LogInfoPoll::payloadFieldsImpl()
{
    return m_pImpl->payloadFields();
}

LogInfoPoll::LogInfoPoll(ImplPtr&& impl) :
    m_pImpl(std::move(impl))
{
}

} // namespace message

} // namespace cc_ublox

} // namespace Message

} // namespace cc_tools_qt_plugin
