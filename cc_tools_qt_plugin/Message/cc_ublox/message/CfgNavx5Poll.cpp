// Generated by commsdsl2tools_qt v7.0.2

#include "CfgNavx5Poll.h"

#include "cc_tools_qt/ToolsMessageBase.h"
#include "cc_tools_qt_plugin/Message/cc_ublox/Message.h"
#include "cc_ublox/message/CfgNavx5Poll.h"

namespace cc_tools_qt_plugin
{

namespace Message
{

namespace cc_ublox
{

namespace message
{

class CfgNavx5PollImpl : public
    cc_tools_qt::ToolsMessageBase<
        cc_tools_qt_plugin::Message::cc_ublox::Message,
        ::cc_ublox::message::CfgNavx5Poll,
        CfgNavx5PollImpl
    >
{
public:
    CfgNavx5PollImpl() = default;
    CfgNavx5PollImpl(const CfgNavx5PollImpl&) = default;
    CfgNavx5PollImpl(CfgNavx5PollImpl&&) = default;
    virtual ~CfgNavx5PollImpl() = default;
    CfgNavx5PollImpl& operator=(const CfgNavx5PollImpl&) = default;
    CfgNavx5PollImpl& operator=(CfgNavx5PollImpl&&) = default;
};

CfgNavx5Poll::CfgNavx5Poll() : m_pImpl(new CfgNavx5PollImpl) {}
CfgNavx5Poll::~CfgNavx5Poll() = default;

CfgNavx5Poll& CfgNavx5Poll::operator=(const CfgNavx5Poll& other)
{
    *m_pImpl = *other.m_pImpl;
    return *this;
}

CfgNavx5Poll& CfgNavx5Poll::operator=(CfgNavx5Poll&& other)
{
    *m_pImpl = std::move(*other.m_pImpl);
    return *this;
}

const char* CfgNavx5Poll::nameImpl() const
{
    return m_pImpl->name();
}

bool CfgNavx5Poll::refreshMsgImpl()
{
    return m_pImpl->refreshMsg();
}

qlonglong CfgNavx5Poll::numericIdImpl() const
{
    return m_pImpl->numericId();
}

QString CfgNavx5Poll::idAsStringImpl() const
{
    return m_pImpl->idAsString();
}

void CfgNavx5Poll::resetImpl()
{
    m_pImpl->reset();
}

bool CfgNavx5Poll::assignImpl(const cc_tools_qt::ToolsMessage& other)
{
    auto* castedOther = dynamic_cast<const CfgNavx5Poll*>(&other);
    if (castedOther == nullptr) {
        return false;
    }
    return m_pImpl->assign(*castedOther->m_pImpl);
}

bool CfgNavx5Poll::isValidImpl() const
{
    return m_pImpl->isValid();
}

CfgNavx5Poll::DataSeq CfgNavx5Poll::encodeDataImpl() const
{
    return m_pImpl->encodeData();
}

bool CfgNavx5Poll::decodeDataImpl(const DataSeq& data)
{
    return m_pImpl->decodeData(data);
}

CfgNavx5Poll::Ptr CfgNavx5Poll::cloneImpl() const
{
    ImplPtr impl(static_cast<CfgNavx5PollImpl*>(m_pImpl->clone().release()));
    return Ptr(new CfgNavx5Poll(std::move(impl)));
}

void CfgNavx5Poll::assignProtMessageImpl(void* protMsg)
{
    m_pImpl->assignProtMessage(protMsg);
}

CfgNavx5Poll::DataSeq CfgNavx5Poll::encodeFramedImpl(cc_tools_qt::ToolsFrame& frame) const
{
    return m_pImpl->encodeFramed(frame);
}

CfgNavx5Poll::FieldsList CfgNavx5Poll::transportFieldsImpl()
{
    return m_pImpl->transportFields();
}

CfgNavx5Poll::FieldsList CfgNavx5Poll::payloadFieldsImpl()
{
    return m_pImpl->payloadFields();
}

CfgNavx5Poll::CfgNavx5Poll(ImplPtr&& impl) :
    m_pImpl(std::move(impl))
{
}

} // namespace message

} // namespace cc_ublox

} // namespace Message

} // namespace cc_tools_qt_plugin
