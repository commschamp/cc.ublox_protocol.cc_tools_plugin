// Generated by commsdsl2tools_qt v7.0.3

#include "MonSpanPoll.h"

#include "cc_tools_qt/ToolsMessageBase.h"
#include "cc_tools_qt_plugin/Message/cc_ublox/Message.h"
#include "cc_ublox/message/MonSpanPoll.h"

namespace cc_tools_qt_plugin
{

namespace Message
{

namespace cc_ublox
{

namespace message
{

class MonSpanPollImpl : public
    cc_tools_qt::ToolsMessageBase<
        cc_tools_qt_plugin::Message::cc_ublox::Message,
        ::cc_ublox::message::MonSpanPoll,
        MonSpanPollImpl
    >
{
public:
    MonSpanPollImpl() = default;
    MonSpanPollImpl(const MonSpanPollImpl&) = default;
    MonSpanPollImpl(MonSpanPollImpl&&) = default;
    virtual ~MonSpanPollImpl() = default;
    MonSpanPollImpl& operator=(const MonSpanPollImpl&) = default;
    MonSpanPollImpl& operator=(MonSpanPollImpl&&) = default;
};

MonSpanPoll::MonSpanPoll() : m_pImpl(new MonSpanPollImpl) {}
MonSpanPoll::~MonSpanPoll() = default;

MonSpanPoll& MonSpanPoll::operator=(const MonSpanPoll& other)
{
    *m_pImpl = *other.m_pImpl;
    return *this;
}

MonSpanPoll& MonSpanPoll::operator=(MonSpanPoll&& other)
{
    *m_pImpl = std::move(*other.m_pImpl);
    return *this;
}

const char* MonSpanPoll::nameImpl() const
{
    return m_pImpl->name();
}

bool MonSpanPoll::refreshMsgImpl()
{
    return m_pImpl->refreshMsg();
}

qlonglong MonSpanPoll::numericIdImpl() const
{
    return m_pImpl->numericId();
}

QString MonSpanPoll::idAsStringImpl() const
{
    return m_pImpl->idAsString();
}

void MonSpanPoll::resetImpl()
{
    m_pImpl->reset();
}

bool MonSpanPoll::assignImpl(const cc_tools_qt::ToolsMessage& other)
{
    auto* castedOther = dynamic_cast<const MonSpanPoll*>(&other);
    if (castedOther == nullptr) {
        return false;
    }
    return m_pImpl->assign(*castedOther->m_pImpl);
}

bool MonSpanPoll::isValidImpl() const
{
    return m_pImpl->isValid();
}

MonSpanPoll::DataSeq MonSpanPoll::encodeDataImpl() const
{
    return m_pImpl->encodeData();
}

bool MonSpanPoll::decodeDataImpl(const DataSeq& data)
{
    return m_pImpl->decodeData(data);
}

MonSpanPoll::Ptr MonSpanPoll::cloneImpl() const
{
    ImplPtr impl(static_cast<MonSpanPollImpl*>(m_pImpl->clone().release()));
    return Ptr(new MonSpanPoll(std::move(impl)));
}

void MonSpanPoll::assignProtMessageImpl(void* protMsg)
{
    m_pImpl->assignProtMessage(protMsg);
}

MonSpanPoll::DataSeq MonSpanPoll::encodeFramedImpl(cc_tools_qt::ToolsFrame& frame) const
{
    return m_pImpl->encodeFramed(frame);
}

MonSpanPoll::FieldsList MonSpanPoll::transportFieldsImpl()
{
    return m_pImpl->transportFields();
}

MonSpanPoll::FieldsList MonSpanPoll::payloadFieldsImpl()
{
    return m_pImpl->payloadFields();
}

MonSpanPoll::MonSpanPoll(ImplPtr&& impl) :
    m_pImpl(std::move(impl))
{
}

} // namespace message

} // namespace cc_ublox

} // namespace Message

} // namespace cc_tools_qt_plugin
