// Generated by commsdsl2tools_qt v7.1.0

#include "CfgPm2V2.h"

#include "cc_tools_qt/ToolsMessageBase.h"
#include "cc_tools_qt_plugin/Message/cc_ublox/Message.h"
#include "cc_ublox/message/CfgPm2V2.h"

namespace cc_tools_qt_plugin
{

namespace Message
{

namespace cc_ublox
{

namespace message
{

class CfgPm2V2Impl : public
    cc_tools_qt::ToolsMessageBase<
        cc_tools_qt_plugin::Message::cc_ublox::Message,
        ::cc_ublox::message::CfgPm2V2,
        CfgPm2V2Impl
    >
{
public:
    CfgPm2V2Impl() = default;
    CfgPm2V2Impl(const CfgPm2V2Impl&) = default;
    CfgPm2V2Impl(CfgPm2V2Impl&&) = default;
    virtual ~CfgPm2V2Impl() = default;
    CfgPm2V2Impl& operator=(const CfgPm2V2Impl&) = default;
    CfgPm2V2Impl& operator=(CfgPm2V2Impl&&) = default;
};

CfgPm2V2::CfgPm2V2() : m_pImpl(new CfgPm2V2Impl) {}
CfgPm2V2::~CfgPm2V2() = default;

CfgPm2V2& CfgPm2V2::operator=(const CfgPm2V2& other)
{
    *m_pImpl = *other.m_pImpl;
    return *this;
}

CfgPm2V2& CfgPm2V2::operator=(CfgPm2V2&& other)
{
    *m_pImpl = std::move(*other.m_pImpl);
    return *this;
}

const char* CfgPm2V2::nameImpl() const
{
    return m_pImpl->name();
}

bool CfgPm2V2::refreshMsgImpl()
{
    return m_pImpl->refreshMsg();
}

qlonglong CfgPm2V2::numericIdImpl() const
{
    return m_pImpl->numericId();
}

QString CfgPm2V2::idAsStringImpl() const
{
    return m_pImpl->idAsString();
}

void CfgPm2V2::resetImpl()
{
    m_pImpl->reset();
}

bool CfgPm2V2::assignImpl(const cc_tools_qt::ToolsMessage& other)
{
    auto* castedOther = dynamic_cast<const CfgPm2V2*>(&other);
    if (castedOther == nullptr) {
        return false;
    }
    return m_pImpl->assign(*castedOther->m_pImpl);
}

bool CfgPm2V2::isValidImpl() const
{
    return m_pImpl->isValid();
}

CfgPm2V2::DataSeq CfgPm2V2::encodeDataImpl() const
{
    return m_pImpl->encodeData();
}

bool CfgPm2V2::decodeDataImpl(const DataSeq& data)
{
    return m_pImpl->decodeData(data);
}

CfgPm2V2::Ptr CfgPm2V2::cloneImpl() const
{
    ImplPtr impl(static_cast<CfgPm2V2Impl*>(m_pImpl->clone().release()));
    return Ptr(new CfgPm2V2(std::move(impl)));
}

void CfgPm2V2::assignProtMessageImpl(void* protMsg)
{
    m_pImpl->assignProtMessage(protMsg);
}

CfgPm2V2::DataSeq CfgPm2V2::encodeFramedImpl(cc_tools_qt::ToolsFrame& frame) const
{
    return m_pImpl->encodeFramed(frame);
}

CfgPm2V2::FieldsList CfgPm2V2::transportFieldsImpl()
{
    return m_pImpl->transportFields();
}

CfgPm2V2::FieldsList CfgPm2V2::payloadFieldsImpl()
{
    return m_pImpl->payloadFields();
}

CfgPm2V2::CfgPm2V2(ImplPtr&& impl) :
    m_pImpl(std::move(impl))
{
}

} // namespace message

} // namespace cc_ublox

} // namespace Message

} // namespace cc_tools_qt_plugin
