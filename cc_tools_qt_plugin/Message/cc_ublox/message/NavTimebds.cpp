// Generated by commsdsl2tools_qt v7.0.2

#include "NavTimebds.h"

#include "cc_tools_qt/ToolsMessageBase.h"
#include "cc_tools_qt_plugin/Message/cc_ublox/Message.h"
#include "cc_ublox/message/NavTimebds.h"

namespace cc_tools_qt_plugin
{

namespace Message
{

namespace cc_ublox
{

namespace message
{

class NavTimebdsImpl : public
    cc_tools_qt::ToolsMessageBase<
        cc_tools_qt_plugin::Message::cc_ublox::Message,
        ::cc_ublox::message::NavTimebds,
        NavTimebdsImpl
    >
{
public:
    NavTimebdsImpl() = default;
    NavTimebdsImpl(const NavTimebdsImpl&) = default;
    NavTimebdsImpl(NavTimebdsImpl&&) = default;
    virtual ~NavTimebdsImpl() = default;
    NavTimebdsImpl& operator=(const NavTimebdsImpl&) = default;
    NavTimebdsImpl& operator=(NavTimebdsImpl&&) = default;
};

NavTimebds::NavTimebds() : m_pImpl(new NavTimebdsImpl) {}
NavTimebds::~NavTimebds() = default;

NavTimebds& NavTimebds::operator=(const NavTimebds& other)
{
    *m_pImpl = *other.m_pImpl;
    return *this;
}

NavTimebds& NavTimebds::operator=(NavTimebds&& other)
{
    *m_pImpl = std::move(*other.m_pImpl);
    return *this;
}

const char* NavTimebds::nameImpl() const
{
    return m_pImpl->name();
}

bool NavTimebds::refreshMsgImpl()
{
    return m_pImpl->refreshMsg();
}

qlonglong NavTimebds::numericIdImpl() const
{
    return m_pImpl->numericId();
}

QString NavTimebds::idAsStringImpl() const
{
    return m_pImpl->idAsString();
}

void NavTimebds::resetImpl()
{
    m_pImpl->reset();
}

bool NavTimebds::assignImpl(const cc_tools_qt::ToolsMessage& other)
{
    auto* castedOther = dynamic_cast<const NavTimebds*>(&other);
    if (castedOther == nullptr) {
        return false;
    }
    return m_pImpl->assign(*castedOther->m_pImpl);
}

bool NavTimebds::isValidImpl() const
{
    return m_pImpl->isValid();
}

NavTimebds::DataSeq NavTimebds::encodeDataImpl() const
{
    return m_pImpl->encodeData();
}

bool NavTimebds::decodeDataImpl(const DataSeq& data)
{
    return m_pImpl->decodeData(data);
}

NavTimebds::Ptr NavTimebds::cloneImpl() const
{
    ImplPtr impl(static_cast<NavTimebdsImpl*>(m_pImpl->clone().release()));
    return Ptr(new NavTimebds(std::move(impl)));
}

void NavTimebds::assignProtMessageImpl(void* protMsg)
{
    m_pImpl->assignProtMessage(protMsg);
}

NavTimebds::DataSeq NavTimebds::encodeFramedImpl(cc_tools_qt::ToolsFrame& frame) const
{
    return m_pImpl->encodeFramed(frame);
}

NavTimebds::FieldsList NavTimebds::transportFieldsImpl()
{
    return m_pImpl->transportFields();
}

NavTimebds::FieldsList NavTimebds::payloadFieldsImpl()
{
    return m_pImpl->payloadFields();
}

NavTimebds::NavTimebds(ImplPtr&& impl) :
    m_pImpl(std::move(impl))
{
}

} // namespace message

} // namespace cc_ublox

} // namespace Message

} // namespace cc_tools_qt_plugin
