// Generated by commsdsl2tools_qt v7.0.3

#include "MonVerPoll.h"

#include "cc_tools_qt/ToolsMessageBase.h"
#include "cc_tools_qt_plugin/Message/cc_ublox/Message.h"
#include "cc_ublox/message/MonVerPoll.h"

namespace cc_tools_qt_plugin
{

namespace Message
{

namespace cc_ublox
{

namespace message
{

class MonVerPollImpl : public
    cc_tools_qt::ToolsMessageBase<
        cc_tools_qt_plugin::Message::cc_ublox::Message,
        ::cc_ublox::message::MonVerPoll,
        MonVerPollImpl
    >
{
public:
    MonVerPollImpl() = default;
    MonVerPollImpl(const MonVerPollImpl&) = default;
    MonVerPollImpl(MonVerPollImpl&&) = default;
    virtual ~MonVerPollImpl() = default;
    MonVerPollImpl& operator=(const MonVerPollImpl&) = default;
    MonVerPollImpl& operator=(MonVerPollImpl&&) = default;
};

MonVerPoll::MonVerPoll() : m_pImpl(new MonVerPollImpl) {}
MonVerPoll::~MonVerPoll() = default;

MonVerPoll& MonVerPoll::operator=(const MonVerPoll& other)
{
    *m_pImpl = *other.m_pImpl;
    return *this;
}

MonVerPoll& MonVerPoll::operator=(MonVerPoll&& other)
{
    *m_pImpl = std::move(*other.m_pImpl);
    return *this;
}

const char* MonVerPoll::nameImpl() const
{
    return m_pImpl->name();
}

bool MonVerPoll::refreshMsgImpl()
{
    return m_pImpl->refreshMsg();
}

qlonglong MonVerPoll::numericIdImpl() const
{
    return m_pImpl->numericId();
}

QString MonVerPoll::idAsStringImpl() const
{
    return m_pImpl->idAsString();
}

void MonVerPoll::resetImpl()
{
    m_pImpl->reset();
}

bool MonVerPoll::assignImpl(const cc_tools_qt::ToolsMessage& other)
{
    auto* castedOther = dynamic_cast<const MonVerPoll*>(&other);
    if (castedOther == nullptr) {
        return false;
    }
    return m_pImpl->assign(*castedOther->m_pImpl);
}

bool MonVerPoll::isValidImpl() const
{
    return m_pImpl->isValid();
}

MonVerPoll::DataSeq MonVerPoll::encodeDataImpl() const
{
    return m_pImpl->encodeData();
}

bool MonVerPoll::decodeDataImpl(const DataSeq& data)
{
    return m_pImpl->decodeData(data);
}

MonVerPoll::Ptr MonVerPoll::cloneImpl() const
{
    ImplPtr impl(static_cast<MonVerPollImpl*>(m_pImpl->clone().release()));
    return Ptr(new MonVerPoll(std::move(impl)));
}

void MonVerPoll::assignProtMessageImpl(void* protMsg)
{
    m_pImpl->assignProtMessage(protMsg);
}

MonVerPoll::DataSeq MonVerPoll::encodeFramedImpl(cc_tools_qt::ToolsFrame& frame) const
{
    return m_pImpl->encodeFramed(frame);
}

MonVerPoll::FieldsList MonVerPoll::transportFieldsImpl()
{
    return m_pImpl->transportFields();
}

MonVerPoll::FieldsList MonVerPoll::payloadFieldsImpl()
{
    return m_pImpl->payloadFields();
}

MonVerPoll::MonVerPoll(ImplPtr&& impl) :
    m_pImpl(std::move(impl))
{
}

} // namespace message

} // namespace cc_ublox

} // namespace Message

} // namespace cc_tools_qt_plugin
