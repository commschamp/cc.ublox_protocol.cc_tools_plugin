// Generated by commsdsl2tools_qt v7.0.3

#include "NavStatus.h"

#include "cc_tools_qt/ToolsMessageBase.h"
#include "cc_tools_qt_plugin/Message/cc_ublox/Message.h"
#include "cc_ublox/message/NavStatus.h"

namespace cc_tools_qt_plugin
{

namespace Message
{

namespace cc_ublox
{

namespace message
{

class NavStatusImpl : public
    cc_tools_qt::ToolsMessageBase<
        cc_tools_qt_plugin::Message::cc_ublox::Message,
        ::cc_ublox::message::NavStatus,
        NavStatusImpl
    >
{
public:
    NavStatusImpl() = default;
    NavStatusImpl(const NavStatusImpl&) = default;
    NavStatusImpl(NavStatusImpl&&) = default;
    virtual ~NavStatusImpl() = default;
    NavStatusImpl& operator=(const NavStatusImpl&) = default;
    NavStatusImpl& operator=(NavStatusImpl&&) = default;
};

NavStatus::NavStatus() : m_pImpl(new NavStatusImpl) {}
NavStatus::~NavStatus() = default;

NavStatus& NavStatus::operator=(const NavStatus& other)
{
    *m_pImpl = *other.m_pImpl;
    return *this;
}

NavStatus& NavStatus::operator=(NavStatus&& other)
{
    *m_pImpl = std::move(*other.m_pImpl);
    return *this;
}

const char* NavStatus::nameImpl() const
{
    return m_pImpl->name();
}

bool NavStatus::refreshMsgImpl()
{
    return m_pImpl->refreshMsg();
}

qlonglong NavStatus::numericIdImpl() const
{
    return m_pImpl->numericId();
}

QString NavStatus::idAsStringImpl() const
{
    return m_pImpl->idAsString();
}

void NavStatus::resetImpl()
{
    m_pImpl->reset();
}

bool NavStatus::assignImpl(const cc_tools_qt::ToolsMessage& other)
{
    auto* castedOther = dynamic_cast<const NavStatus*>(&other);
    if (castedOther == nullptr) {
        return false;
    }
    return m_pImpl->assign(*castedOther->m_pImpl);
}

bool NavStatus::isValidImpl() const
{
    return m_pImpl->isValid();
}

NavStatus::DataSeq NavStatus::encodeDataImpl() const
{
    return m_pImpl->encodeData();
}

bool NavStatus::decodeDataImpl(const DataSeq& data)
{
    return m_pImpl->decodeData(data);
}

NavStatus::Ptr NavStatus::cloneImpl() const
{
    ImplPtr impl(static_cast<NavStatusImpl*>(m_pImpl->clone().release()));
    return Ptr(new NavStatus(std::move(impl)));
}

void NavStatus::assignProtMessageImpl(void* protMsg)
{
    m_pImpl->assignProtMessage(protMsg);
}

NavStatus::DataSeq NavStatus::encodeFramedImpl(cc_tools_qt::ToolsFrame& frame) const
{
    return m_pImpl->encodeFramed(frame);
}

NavStatus::FieldsList NavStatus::transportFieldsImpl()
{
    return m_pImpl->transportFields();
}

NavStatus::FieldsList NavStatus::payloadFieldsImpl()
{
    return m_pImpl->payloadFields();
}

NavStatus::NavStatus(ImplPtr&& impl) :
    m_pImpl(std::move(impl))
{
}

} // namespace message

} // namespace cc_ublox

} // namespace Message

} // namespace cc_tools_qt_plugin
