// Generated by commsdsl2tools_qt v7.0.2

#include "LogFindtime.h"

#include "cc_tools_qt/ToolsMessageBase.h"
#include "cc_tools_qt_plugin/Message/cc_ublox/Message.h"
#include "cc_ublox/message/LogFindtime.h"

namespace cc_tools_qt_plugin
{

namespace Message
{

namespace cc_ublox
{

namespace message
{

class LogFindtimeImpl : public
    cc_tools_qt::ToolsMessageBase<
        cc_tools_qt_plugin::Message::cc_ublox::Message,
        ::cc_ublox::message::LogFindtime,
        LogFindtimeImpl
    >
{
public:
    LogFindtimeImpl() = default;
    LogFindtimeImpl(const LogFindtimeImpl&) = default;
    LogFindtimeImpl(LogFindtimeImpl&&) = default;
    virtual ~LogFindtimeImpl() = default;
    LogFindtimeImpl& operator=(const LogFindtimeImpl&) = default;
    LogFindtimeImpl& operator=(LogFindtimeImpl&&) = default;
};

LogFindtime::LogFindtime() : m_pImpl(new LogFindtimeImpl) {}
LogFindtime::~LogFindtime() = default;

LogFindtime& LogFindtime::operator=(const LogFindtime& other)
{
    *m_pImpl = *other.m_pImpl;
    return *this;
}

LogFindtime& LogFindtime::operator=(LogFindtime&& other)
{
    *m_pImpl = std::move(*other.m_pImpl);
    return *this;
}

const char* LogFindtime::nameImpl() const
{
    return m_pImpl->name();
}

bool LogFindtime::refreshMsgImpl()
{
    return m_pImpl->refreshMsg();
}

qlonglong LogFindtime::numericIdImpl() const
{
    return m_pImpl->numericId();
}

QString LogFindtime::idAsStringImpl() const
{
    return m_pImpl->idAsString();
}

void LogFindtime::resetImpl()
{
    m_pImpl->reset();
}

bool LogFindtime::assignImpl(const cc_tools_qt::ToolsMessage& other)
{
    auto* castedOther = dynamic_cast<const LogFindtime*>(&other);
    if (castedOther == nullptr) {
        return false;
    }
    return m_pImpl->assign(*castedOther->m_pImpl);
}

bool LogFindtime::isValidImpl() const
{
    return m_pImpl->isValid();
}

LogFindtime::DataSeq LogFindtime::encodeDataImpl() const
{
    return m_pImpl->encodeData();
}

bool LogFindtime::decodeDataImpl(const DataSeq& data)
{
    return m_pImpl->decodeData(data);
}

LogFindtime::Ptr LogFindtime::cloneImpl() const
{
    ImplPtr impl(static_cast<LogFindtimeImpl*>(m_pImpl->clone().release()));
    return Ptr(new LogFindtime(std::move(impl)));
}

void LogFindtime::assignProtMessageImpl(void* protMsg)
{
    m_pImpl->assignProtMessage(protMsg);
}

LogFindtime::DataSeq LogFindtime::encodeFramedImpl(cc_tools_qt::ToolsFrame& frame) const
{
    return m_pImpl->encodeFramed(frame);
}

LogFindtime::FieldsList LogFindtime::transportFieldsImpl()
{
    return m_pImpl->transportFields();
}

LogFindtime::FieldsList LogFindtime::payloadFieldsImpl()
{
    return m_pImpl->payloadFields();
}

LogFindtime::LogFindtime(ImplPtr&& impl) :
    m_pImpl(std::move(impl))
{
}

} // namespace message

} // namespace cc_ublox

} // namespace Message

} // namespace cc_tools_qt_plugin
