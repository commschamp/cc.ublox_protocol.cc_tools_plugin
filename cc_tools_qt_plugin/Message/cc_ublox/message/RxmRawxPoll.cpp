// Generated by commsdsl2tools_qt v7.1.0

#include "RxmRawxPoll.h"

#include "cc_tools_qt/ToolsMessageBase.h"
#include "cc_tools_qt_plugin/Message/cc_ublox/Message.h"
#include "cc_ublox/message/RxmRawxPoll.h"

namespace cc_tools_qt_plugin
{

namespace Message
{

namespace cc_ublox
{

namespace message
{

class RxmRawxPollImpl : public
    cc_tools_qt::ToolsMessageBase<
        cc_tools_qt_plugin::Message::cc_ublox::Message,
        ::cc_ublox::message::RxmRawxPoll,
        RxmRawxPollImpl
    >
{
public:
    RxmRawxPollImpl() = default;
    RxmRawxPollImpl(const RxmRawxPollImpl&) = default;
    RxmRawxPollImpl(RxmRawxPollImpl&&) = default;
    virtual ~RxmRawxPollImpl() = default;
    RxmRawxPollImpl& operator=(const RxmRawxPollImpl&) = default;
    RxmRawxPollImpl& operator=(RxmRawxPollImpl&&) = default;
};

RxmRawxPoll::RxmRawxPoll() : m_pImpl(new RxmRawxPollImpl) {}
RxmRawxPoll::~RxmRawxPoll() = default;

RxmRawxPoll& RxmRawxPoll::operator=(const RxmRawxPoll& other)
{
    *m_pImpl = *other.m_pImpl;
    return *this;
}

RxmRawxPoll& RxmRawxPoll::operator=(RxmRawxPoll&& other)
{
    *m_pImpl = std::move(*other.m_pImpl);
    return *this;
}

const char* RxmRawxPoll::nameImpl() const
{
    return m_pImpl->name();
}

bool RxmRawxPoll::refreshMsgImpl()
{
    return m_pImpl->refreshMsg();
}

qlonglong RxmRawxPoll::numericIdImpl() const
{
    return m_pImpl->numericId();
}

QString RxmRawxPoll::idAsStringImpl() const
{
    return m_pImpl->idAsString();
}

void RxmRawxPoll::resetImpl()
{
    m_pImpl->reset();
}

bool RxmRawxPoll::assignImpl(const cc_tools_qt::ToolsMessage& other)
{
    auto* castedOther = dynamic_cast<const RxmRawxPoll*>(&other);
    if (castedOther == nullptr) {
        return false;
    }
    return m_pImpl->assign(*castedOther->m_pImpl);
}

bool RxmRawxPoll::isValidImpl() const
{
    return m_pImpl->isValid();
}

RxmRawxPoll::DataSeq RxmRawxPoll::encodeDataImpl() const
{
    return m_pImpl->encodeData();
}

bool RxmRawxPoll::decodeDataImpl(const DataSeq& data)
{
    return m_pImpl->decodeData(data);
}

RxmRawxPoll::Ptr RxmRawxPoll::cloneImpl() const
{
    ImplPtr impl(static_cast<RxmRawxPollImpl*>(m_pImpl->clone().release()));
    return Ptr(new RxmRawxPoll(std::move(impl)));
}

void RxmRawxPoll::assignProtMessageImpl(void* protMsg)
{
    m_pImpl->assignProtMessage(protMsg);
}

RxmRawxPoll::DataSeq RxmRawxPoll::encodeFramedImpl(cc_tools_qt::ToolsFrame& frame) const
{
    return m_pImpl->encodeFramed(frame);
}

RxmRawxPoll::FieldsList RxmRawxPoll::transportFieldsImpl()
{
    return m_pImpl->transportFields();
}

RxmRawxPoll::FieldsList RxmRawxPoll::payloadFieldsImpl()
{
    return m_pImpl->payloadFields();
}

RxmRawxPoll::RxmRawxPoll(ImplPtr&& impl) :
    m_pImpl(std::move(impl))
{
}

} // namespace message

} // namespace cc_ublox

} // namespace Message

} // namespace cc_tools_qt_plugin
