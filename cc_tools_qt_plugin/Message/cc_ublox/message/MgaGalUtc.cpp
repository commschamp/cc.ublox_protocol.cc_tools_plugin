// Generated by commsdsl2tools_qt v7.0.3

#include "MgaGalUtc.h"

#include "cc_tools_qt/ToolsMessageBase.h"
#include "cc_tools_qt_plugin/Message/cc_ublox/Message.h"
#include "cc_ublox/message/MgaGalUtc.h"

namespace cc_tools_qt_plugin
{

namespace Message
{

namespace cc_ublox
{

namespace message
{

class MgaGalUtcImpl : public
    cc_tools_qt::ToolsMessageBase<
        cc_tools_qt_plugin::Message::cc_ublox::Message,
        ::cc_ublox::message::MgaGalUtc,
        MgaGalUtcImpl
    >
{
public:
    MgaGalUtcImpl() = default;
    MgaGalUtcImpl(const MgaGalUtcImpl&) = default;
    MgaGalUtcImpl(MgaGalUtcImpl&&) = default;
    virtual ~MgaGalUtcImpl() = default;
    MgaGalUtcImpl& operator=(const MgaGalUtcImpl&) = default;
    MgaGalUtcImpl& operator=(MgaGalUtcImpl&&) = default;
};

MgaGalUtc::MgaGalUtc() : m_pImpl(new MgaGalUtcImpl) {}
MgaGalUtc::~MgaGalUtc() = default;

MgaGalUtc& MgaGalUtc::operator=(const MgaGalUtc& other)
{
    *m_pImpl = *other.m_pImpl;
    return *this;
}

MgaGalUtc& MgaGalUtc::operator=(MgaGalUtc&& other)
{
    *m_pImpl = std::move(*other.m_pImpl);
    return *this;
}

const char* MgaGalUtc::nameImpl() const
{
    return m_pImpl->name();
}

bool MgaGalUtc::refreshMsgImpl()
{
    return m_pImpl->refreshMsg();
}

qlonglong MgaGalUtc::numericIdImpl() const
{
    return m_pImpl->numericId();
}

QString MgaGalUtc::idAsStringImpl() const
{
    return m_pImpl->idAsString();
}

void MgaGalUtc::resetImpl()
{
    m_pImpl->reset();
}

bool MgaGalUtc::assignImpl(const cc_tools_qt::ToolsMessage& other)
{
    auto* castedOther = dynamic_cast<const MgaGalUtc*>(&other);
    if (castedOther == nullptr) {
        return false;
    }
    return m_pImpl->assign(*castedOther->m_pImpl);
}

bool MgaGalUtc::isValidImpl() const
{
    return m_pImpl->isValid();
}

MgaGalUtc::DataSeq MgaGalUtc::encodeDataImpl() const
{
    return m_pImpl->encodeData();
}

bool MgaGalUtc::decodeDataImpl(const DataSeq& data)
{
    return m_pImpl->decodeData(data);
}

MgaGalUtc::Ptr MgaGalUtc::cloneImpl() const
{
    ImplPtr impl(static_cast<MgaGalUtcImpl*>(m_pImpl->clone().release()));
    return Ptr(new MgaGalUtc(std::move(impl)));
}

void MgaGalUtc::assignProtMessageImpl(void* protMsg)
{
    m_pImpl->assignProtMessage(protMsg);
}

MgaGalUtc::DataSeq MgaGalUtc::encodeFramedImpl(cc_tools_qt::ToolsFrame& frame) const
{
    return m_pImpl->encodeFramed(frame);
}

MgaGalUtc::FieldsList MgaGalUtc::transportFieldsImpl()
{
    return m_pImpl->transportFields();
}

MgaGalUtc::FieldsList MgaGalUtc::payloadFieldsImpl()
{
    return m_pImpl->payloadFields();
}

MgaGalUtc::MgaGalUtc(ImplPtr&& impl) :
    m_pImpl(std::move(impl))
{
}

} // namespace message

} // namespace cc_ublox

} // namespace Message

} // namespace cc_tools_qt_plugin
