// Generated by commsdsl2tools_qt v7.1.0

#include "NavRelposned_v1.h"

#include "cc_tools_qt/ToolsMessageBase.h"
#include "cc_tools_qt_plugin/Message/cc_ublox/Message.h"
#include "cc_ublox/message/NavRelposned_v1.h"

namespace cc_tools_qt_plugin
{

namespace Message
{

namespace cc_ublox
{

namespace message
{

class NavRelposned_v1Impl : public
    cc_tools_qt::ToolsMessageBase<
        cc_tools_qt_plugin::Message::cc_ublox::Message,
        ::cc_ublox::message::NavRelposned_v1,
        NavRelposned_v1Impl
    >
{
public:
    NavRelposned_v1Impl() = default;
    NavRelposned_v1Impl(const NavRelposned_v1Impl&) = default;
    NavRelposned_v1Impl(NavRelposned_v1Impl&&) = default;
    virtual ~NavRelposned_v1Impl() = default;
    NavRelposned_v1Impl& operator=(const NavRelposned_v1Impl&) = default;
    NavRelposned_v1Impl& operator=(NavRelposned_v1Impl&&) = default;
};

NavRelposned_v1::NavRelposned_v1() : m_pImpl(new NavRelposned_v1Impl) {}
NavRelposned_v1::~NavRelposned_v1() = default;

NavRelposned_v1& NavRelposned_v1::operator=(const NavRelposned_v1& other)
{
    *m_pImpl = *other.m_pImpl;
    return *this;
}

NavRelposned_v1& NavRelposned_v1::operator=(NavRelposned_v1&& other)
{
    *m_pImpl = std::move(*other.m_pImpl);
    return *this;
}

const char* NavRelposned_v1::nameImpl() const
{
    return m_pImpl->name();
}

bool NavRelposned_v1::refreshMsgImpl()
{
    return m_pImpl->refreshMsg();
}

qlonglong NavRelposned_v1::numericIdImpl() const
{
    return m_pImpl->numericId();
}

QString NavRelposned_v1::idAsStringImpl() const
{
    return m_pImpl->idAsString();
}

void NavRelposned_v1::resetImpl()
{
    m_pImpl->reset();
}

bool NavRelposned_v1::assignImpl(const cc_tools_qt::ToolsMessage& other)
{
    auto* castedOther = dynamic_cast<const NavRelposned_v1*>(&other);
    if (castedOther == nullptr) {
        return false;
    }
    return m_pImpl->assign(*castedOther->m_pImpl);
}

bool NavRelposned_v1::isValidImpl() const
{
    return m_pImpl->isValid();
}

NavRelposned_v1::DataSeq NavRelposned_v1::encodeDataImpl() const
{
    return m_pImpl->encodeData();
}

bool NavRelposned_v1::decodeDataImpl(const DataSeq& data)
{
    return m_pImpl->decodeData(data);
}

NavRelposned_v1::Ptr NavRelposned_v1::cloneImpl() const
{
    ImplPtr impl(static_cast<NavRelposned_v1Impl*>(m_pImpl->clone().release()));
    return Ptr(new NavRelposned_v1(std::move(impl)));
}

void NavRelposned_v1::assignProtMessageImpl(void* protMsg)
{
    m_pImpl->assignProtMessage(protMsg);
}

NavRelposned_v1::DataSeq NavRelposned_v1::encodeFramedImpl(cc_tools_qt::ToolsFrame& frame) const
{
    return m_pImpl->encodeFramed(frame);
}

NavRelposned_v1::FieldsList NavRelposned_v1::transportFieldsImpl()
{
    return m_pImpl->transportFields();
}

NavRelposned_v1::FieldsList NavRelposned_v1::payloadFieldsImpl()
{
    return m_pImpl->payloadFields();
}

NavRelposned_v1::NavRelposned_v1(ImplPtr&& impl) :
    m_pImpl(std::move(impl))
{
}

} // namespace message

} // namespace cc_ublox

} // namespace Message

} // namespace cc_tools_qt_plugin
