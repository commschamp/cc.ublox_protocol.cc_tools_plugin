// Generated by commsdsl2tools_qt v7.0.3

#include "CfgOdoPoll.h"

#include "cc_tools_qt/ToolsMessageBase.h"
#include "cc_tools_qt_plugin/Message/cc_ublox/Message.h"
#include "cc_ublox/message/CfgOdoPoll.h"

namespace cc_tools_qt_plugin
{

namespace Message
{

namespace cc_ublox
{

namespace message
{

class CfgOdoPollImpl : public
    cc_tools_qt::ToolsMessageBase<
        cc_tools_qt_plugin::Message::cc_ublox::Message,
        ::cc_ublox::message::CfgOdoPoll,
        CfgOdoPollImpl
    >
{
public:
    CfgOdoPollImpl() = default;
    CfgOdoPollImpl(const CfgOdoPollImpl&) = default;
    CfgOdoPollImpl(CfgOdoPollImpl&&) = default;
    virtual ~CfgOdoPollImpl() = default;
    CfgOdoPollImpl& operator=(const CfgOdoPollImpl&) = default;
    CfgOdoPollImpl& operator=(CfgOdoPollImpl&&) = default;
};

CfgOdoPoll::CfgOdoPoll() : m_pImpl(new CfgOdoPollImpl) {}
CfgOdoPoll::~CfgOdoPoll() = default;

CfgOdoPoll& CfgOdoPoll::operator=(const CfgOdoPoll& other)
{
    *m_pImpl = *other.m_pImpl;
    return *this;
}

CfgOdoPoll& CfgOdoPoll::operator=(CfgOdoPoll&& other)
{
    *m_pImpl = std::move(*other.m_pImpl);
    return *this;
}

const char* CfgOdoPoll::nameImpl() const
{
    return m_pImpl->name();
}

bool CfgOdoPoll::refreshMsgImpl()
{
    return m_pImpl->refreshMsg();
}

qlonglong CfgOdoPoll::numericIdImpl() const
{
    return m_pImpl->numericId();
}

QString CfgOdoPoll::idAsStringImpl() const
{
    return m_pImpl->idAsString();
}

void CfgOdoPoll::resetImpl()
{
    m_pImpl->reset();
}

bool CfgOdoPoll::assignImpl(const cc_tools_qt::ToolsMessage& other)
{
    auto* castedOther = dynamic_cast<const CfgOdoPoll*>(&other);
    if (castedOther == nullptr) {
        return false;
    }
    return m_pImpl->assign(*castedOther->m_pImpl);
}

bool CfgOdoPoll::isValidImpl() const
{
    return m_pImpl->isValid();
}

CfgOdoPoll::DataSeq CfgOdoPoll::encodeDataImpl() const
{
    return m_pImpl->encodeData();
}

bool CfgOdoPoll::decodeDataImpl(const DataSeq& data)
{
    return m_pImpl->decodeData(data);
}

CfgOdoPoll::Ptr CfgOdoPoll::cloneImpl() const
{
    ImplPtr impl(static_cast<CfgOdoPollImpl*>(m_pImpl->clone().release()));
    return Ptr(new CfgOdoPoll(std::move(impl)));
}

void CfgOdoPoll::assignProtMessageImpl(void* protMsg)
{
    m_pImpl->assignProtMessage(protMsg);
}

CfgOdoPoll::DataSeq CfgOdoPoll::encodeFramedImpl(cc_tools_qt::ToolsFrame& frame) const
{
    return m_pImpl->encodeFramed(frame);
}

CfgOdoPoll::FieldsList CfgOdoPoll::transportFieldsImpl()
{
    return m_pImpl->transportFields();
}

CfgOdoPoll::FieldsList CfgOdoPoll::payloadFieldsImpl()
{
    return m_pImpl->payloadFields();
}

CfgOdoPoll::CfgOdoPoll(ImplPtr&& impl) :
    m_pImpl(std::move(impl))
{
}

} // namespace message

} // namespace cc_ublox

} // namespace Message

} // namespace cc_tools_qt_plugin
