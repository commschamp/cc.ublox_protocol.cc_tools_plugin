// Generated by commsdsl2tools_qt v7.0.3

#include "CfgUsb.h"

#include "cc_tools_qt/ToolsMessageBase.h"
#include "cc_tools_qt_plugin/Message/cc_ublox/Message.h"
#include "cc_ublox/message/CfgUsb.h"

namespace cc_tools_qt_plugin
{

namespace Message
{

namespace cc_ublox
{

namespace message
{

class CfgUsbImpl : public
    cc_tools_qt::ToolsMessageBase<
        cc_tools_qt_plugin::Message::cc_ublox::Message,
        ::cc_ublox::message::CfgUsb,
        CfgUsbImpl
    >
{
public:
    CfgUsbImpl() = default;
    CfgUsbImpl(const CfgUsbImpl&) = default;
    CfgUsbImpl(CfgUsbImpl&&) = default;
    virtual ~CfgUsbImpl() = default;
    CfgUsbImpl& operator=(const CfgUsbImpl&) = default;
    CfgUsbImpl& operator=(CfgUsbImpl&&) = default;
};

CfgUsb::CfgUsb() : m_pImpl(new CfgUsbImpl) {}
CfgUsb::~CfgUsb() = default;

CfgUsb& CfgUsb::operator=(const CfgUsb& other)
{
    *m_pImpl = *other.m_pImpl;
    return *this;
}

CfgUsb& CfgUsb::operator=(CfgUsb&& other)
{
    *m_pImpl = std::move(*other.m_pImpl);
    return *this;
}

const char* CfgUsb::nameImpl() const
{
    return m_pImpl->name();
}

bool CfgUsb::refreshMsgImpl()
{
    return m_pImpl->refreshMsg();
}

qlonglong CfgUsb::numericIdImpl() const
{
    return m_pImpl->numericId();
}

QString CfgUsb::idAsStringImpl() const
{
    return m_pImpl->idAsString();
}

void CfgUsb::resetImpl()
{
    m_pImpl->reset();
}

bool CfgUsb::assignImpl(const cc_tools_qt::ToolsMessage& other)
{
    auto* castedOther = dynamic_cast<const CfgUsb*>(&other);
    if (castedOther == nullptr) {
        return false;
    }
    return m_pImpl->assign(*castedOther->m_pImpl);
}

bool CfgUsb::isValidImpl() const
{
    return m_pImpl->isValid();
}

CfgUsb::DataSeq CfgUsb::encodeDataImpl() const
{
    return m_pImpl->encodeData();
}

bool CfgUsb::decodeDataImpl(const DataSeq& data)
{
    return m_pImpl->decodeData(data);
}

CfgUsb::Ptr CfgUsb::cloneImpl() const
{
    ImplPtr impl(static_cast<CfgUsbImpl*>(m_pImpl->clone().release()));
    return Ptr(new CfgUsb(std::move(impl)));
}

void CfgUsb::assignProtMessageImpl(void* protMsg)
{
    m_pImpl->assignProtMessage(protMsg);
}

CfgUsb::DataSeq CfgUsb::encodeFramedImpl(cc_tools_qt::ToolsFrame& frame) const
{
    return m_pImpl->encodeFramed(frame);
}

CfgUsb::FieldsList CfgUsb::transportFieldsImpl()
{
    return m_pImpl->transportFields();
}

CfgUsb::FieldsList CfgUsb::payloadFieldsImpl()
{
    return m_pImpl->payloadFields();
}

CfgUsb::CfgUsb(ImplPtr&& impl) :
    m_pImpl(std::move(impl))
{
}

} // namespace message

} // namespace cc_ublox

} // namespace Message

} // namespace cc_tools_qt_plugin
