// Generated by commsdsl2tools_qt v7.0.3

#include "NavAtt.h"

#include "cc_tools_qt/ToolsMessageBase.h"
#include "cc_tools_qt_plugin/Message/cc_ublox/Message.h"
#include "cc_ublox/message/NavAtt.h"

namespace cc_tools_qt_plugin
{

namespace Message
{

namespace cc_ublox
{

namespace message
{

class NavAttImpl : public
    cc_tools_qt::ToolsMessageBase<
        cc_tools_qt_plugin::Message::cc_ublox::Message,
        ::cc_ublox::message::NavAtt,
        NavAttImpl
    >
{
public:
    NavAttImpl() = default;
    NavAttImpl(const NavAttImpl&) = default;
    NavAttImpl(NavAttImpl&&) = default;
    virtual ~NavAttImpl() = default;
    NavAttImpl& operator=(const NavAttImpl&) = default;
    NavAttImpl& operator=(NavAttImpl&&) = default;
};

NavAtt::NavAtt() : m_pImpl(new NavAttImpl) {}
NavAtt::~NavAtt() = default;

NavAtt& NavAtt::operator=(const NavAtt& other)
{
    *m_pImpl = *other.m_pImpl;
    return *this;
}

NavAtt& NavAtt::operator=(NavAtt&& other)
{
    *m_pImpl = std::move(*other.m_pImpl);
    return *this;
}

const char* NavAtt::nameImpl() const
{
    return m_pImpl->name();
}

bool NavAtt::refreshMsgImpl()
{
    return m_pImpl->refreshMsg();
}

qlonglong NavAtt::numericIdImpl() const
{
    return m_pImpl->numericId();
}

QString NavAtt::idAsStringImpl() const
{
    return m_pImpl->idAsString();
}

void NavAtt::resetImpl()
{
    m_pImpl->reset();
}

bool NavAtt::assignImpl(const cc_tools_qt::ToolsMessage& other)
{
    auto* castedOther = dynamic_cast<const NavAtt*>(&other);
    if (castedOther == nullptr) {
        return false;
    }
    return m_pImpl->assign(*castedOther->m_pImpl);
}

bool NavAtt::isValidImpl() const
{
    return m_pImpl->isValid();
}

NavAtt::DataSeq NavAtt::encodeDataImpl() const
{
    return m_pImpl->encodeData();
}

bool NavAtt::decodeDataImpl(const DataSeq& data)
{
    return m_pImpl->decodeData(data);
}

NavAtt::Ptr NavAtt::cloneImpl() const
{
    ImplPtr impl(static_cast<NavAttImpl*>(m_pImpl->clone().release()));
    return Ptr(new NavAtt(std::move(impl)));
}

void NavAtt::assignProtMessageImpl(void* protMsg)
{
    m_pImpl->assignProtMessage(protMsg);
}

NavAtt::DataSeq NavAtt::encodeFramedImpl(cc_tools_qt::ToolsFrame& frame) const
{
    return m_pImpl->encodeFramed(frame);
}

NavAtt::FieldsList NavAtt::transportFieldsImpl()
{
    return m_pImpl->transportFields();
}

NavAtt::FieldsList NavAtt::payloadFieldsImpl()
{
    return m_pImpl->payloadFields();
}

NavAtt::NavAtt(ImplPtr&& impl) :
    m_pImpl(std::move(impl))
{
}

} // namespace message

} // namespace cc_ublox

} // namespace Message

} // namespace cc_tools_qt_plugin
