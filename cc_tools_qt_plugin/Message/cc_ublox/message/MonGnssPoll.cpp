// Generated by commsdsl2tools_qt v7.1.0

#include "MonGnssPoll.h"

#include "cc_tools_qt/ToolsMessageBase.h"
#include "cc_tools_qt_plugin/Message/cc_ublox/Message.h"
#include "cc_ublox/message/MonGnssPoll.h"

namespace cc_tools_qt_plugin
{

namespace Message
{

namespace cc_ublox
{

namespace message
{

class MonGnssPollImpl : public
    cc_tools_qt::ToolsMessageBase<
        cc_tools_qt_plugin::Message::cc_ublox::Message,
        ::cc_ublox::message::MonGnssPoll,
        MonGnssPollImpl
    >
{
public:
    MonGnssPollImpl() = default;
    MonGnssPollImpl(const MonGnssPollImpl&) = default;
    MonGnssPollImpl(MonGnssPollImpl&&) = default;
    virtual ~MonGnssPollImpl() = default;
    MonGnssPollImpl& operator=(const MonGnssPollImpl&) = default;
    MonGnssPollImpl& operator=(MonGnssPollImpl&&) = default;
};

MonGnssPoll::MonGnssPoll() : m_pImpl(new MonGnssPollImpl) {}
MonGnssPoll::~MonGnssPoll() = default;

MonGnssPoll& MonGnssPoll::operator=(const MonGnssPoll& other)
{
    *m_pImpl = *other.m_pImpl;
    return *this;
}

MonGnssPoll& MonGnssPoll::operator=(MonGnssPoll&& other)
{
    *m_pImpl = std::move(*other.m_pImpl);
    return *this;
}

const char* MonGnssPoll::nameImpl() const
{
    return m_pImpl->name();
}

bool MonGnssPoll::refreshMsgImpl()
{
    return m_pImpl->refreshMsg();
}

qlonglong MonGnssPoll::numericIdImpl() const
{
    return m_pImpl->numericId();
}

QString MonGnssPoll::idAsStringImpl() const
{
    return m_pImpl->idAsString();
}

void MonGnssPoll::resetImpl()
{
    m_pImpl->reset();
}

bool MonGnssPoll::assignImpl(const cc_tools_qt::ToolsMessage& other)
{
    auto* castedOther = dynamic_cast<const MonGnssPoll*>(&other);
    if (castedOther == nullptr) {
        return false;
    }
    return m_pImpl->assign(*castedOther->m_pImpl);
}

bool MonGnssPoll::isValidImpl() const
{
    return m_pImpl->isValid();
}

MonGnssPoll::DataSeq MonGnssPoll::encodeDataImpl() const
{
    return m_pImpl->encodeData();
}

bool MonGnssPoll::decodeDataImpl(const DataSeq& data)
{
    return m_pImpl->decodeData(data);
}

MonGnssPoll::Ptr MonGnssPoll::cloneImpl() const
{
    ImplPtr impl(static_cast<MonGnssPollImpl*>(m_pImpl->clone().release()));
    return Ptr(new MonGnssPoll(std::move(impl)));
}

void MonGnssPoll::assignProtMessageImpl(void* protMsg)
{
    m_pImpl->assignProtMessage(protMsg);
}

MonGnssPoll::DataSeq MonGnssPoll::encodeFramedImpl(cc_tools_qt::ToolsFrame& frame) const
{
    return m_pImpl->encodeFramed(frame);
}

MonGnssPoll::FieldsList MonGnssPoll::transportFieldsImpl()
{
    return m_pImpl->transportFields();
}

MonGnssPoll::FieldsList MonGnssPoll::payloadFieldsImpl()
{
    return m_pImpl->payloadFields();
}

MonGnssPoll::MonGnssPoll(ImplPtr&& impl) :
    m_pImpl(std::move(impl))
{
}

} // namespace message

} // namespace cc_ublox

} // namespace Message

} // namespace cc_tools_qt_plugin
