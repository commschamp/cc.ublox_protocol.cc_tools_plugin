// Generated by commsdsl2tools_qt v7.0.2

#include "AidAopPollSv.h"

#include "cc_tools_qt/ToolsMessageBase.h"
#include "cc_tools_qt_plugin/Message/cc_ublox/Message.h"
#include "cc_ublox/message/AidAopPollSv.h"

namespace cc_tools_qt_plugin
{

namespace Message
{

namespace cc_ublox
{

namespace message
{

class AidAopPollSvImpl : public
    cc_tools_qt::ToolsMessageBase<
        cc_tools_qt_plugin::Message::cc_ublox::Message,
        ::cc_ublox::message::AidAopPollSv,
        AidAopPollSvImpl
    >
{
public:
    AidAopPollSvImpl() = default;
    AidAopPollSvImpl(const AidAopPollSvImpl&) = default;
    AidAopPollSvImpl(AidAopPollSvImpl&&) = default;
    virtual ~AidAopPollSvImpl() = default;
    AidAopPollSvImpl& operator=(const AidAopPollSvImpl&) = default;
    AidAopPollSvImpl& operator=(AidAopPollSvImpl&&) = default;
};

AidAopPollSv::AidAopPollSv() : m_pImpl(new AidAopPollSvImpl) {}
AidAopPollSv::~AidAopPollSv() = default;

AidAopPollSv& AidAopPollSv::operator=(const AidAopPollSv& other)
{
    *m_pImpl = *other.m_pImpl;
    return *this;
}

AidAopPollSv& AidAopPollSv::operator=(AidAopPollSv&& other)
{
    *m_pImpl = std::move(*other.m_pImpl);
    return *this;
}

const char* AidAopPollSv::nameImpl() const
{
    return m_pImpl->name();
}

bool AidAopPollSv::refreshMsgImpl()
{
    return m_pImpl->refreshMsg();
}

qlonglong AidAopPollSv::numericIdImpl() const
{
    return m_pImpl->numericId();
}

QString AidAopPollSv::idAsStringImpl() const
{
    return m_pImpl->idAsString();
}

void AidAopPollSv::resetImpl()
{
    m_pImpl->reset();
}

bool AidAopPollSv::assignImpl(const cc_tools_qt::ToolsMessage& other)
{
    auto* castedOther = dynamic_cast<const AidAopPollSv*>(&other);
    if (castedOther == nullptr) {
        return false;
    }
    return m_pImpl->assign(*castedOther->m_pImpl);
}

bool AidAopPollSv::isValidImpl() const
{
    return m_pImpl->isValid();
}

AidAopPollSv::DataSeq AidAopPollSv::encodeDataImpl() const
{
    return m_pImpl->encodeData();
}

bool AidAopPollSv::decodeDataImpl(const DataSeq& data)
{
    return m_pImpl->decodeData(data);
}

AidAopPollSv::Ptr AidAopPollSv::cloneImpl() const
{
    ImplPtr impl(static_cast<AidAopPollSvImpl*>(m_pImpl->clone().release()));
    return Ptr(new AidAopPollSv(std::move(impl)));
}

void AidAopPollSv::assignProtMessageImpl(void* protMsg)
{
    m_pImpl->assignProtMessage(protMsg);
}

AidAopPollSv::DataSeq AidAopPollSv::encodeFramedImpl(cc_tools_qt::ToolsFrame& frame) const
{
    return m_pImpl->encodeFramed(frame);
}

AidAopPollSv::FieldsList AidAopPollSv::transportFieldsImpl()
{
    return m_pImpl->transportFields();
}

AidAopPollSv::FieldsList AidAopPollSv::payloadFieldsImpl()
{
    return m_pImpl->payloadFields();
}

AidAopPollSv::AidAopPollSv(ImplPtr&& impl) :
    m_pImpl(std::move(impl))
{
}

} // namespace message

} // namespace cc_ublox

} // namespace Message

} // namespace cc_tools_qt_plugin
