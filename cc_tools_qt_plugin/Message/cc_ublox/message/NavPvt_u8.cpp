// Generated by commsdsl2tools_qt v7.0.2

#include "NavPvt_u8.h"

#include "cc_tools_qt/ToolsMessageBase.h"
#include "cc_tools_qt_plugin/Message/cc_ublox/Message.h"
#include "cc_ublox/message/NavPvt_u8.h"

namespace cc_tools_qt_plugin
{

namespace Message
{

namespace cc_ublox
{

namespace message
{

class NavPvt_u8Impl : public
    cc_tools_qt::ToolsMessageBase<
        cc_tools_qt_plugin::Message::cc_ublox::Message,
        ::cc_ublox::message::NavPvt_u8,
        NavPvt_u8Impl
    >
{
public:
    NavPvt_u8Impl() = default;
    NavPvt_u8Impl(const NavPvt_u8Impl&) = default;
    NavPvt_u8Impl(NavPvt_u8Impl&&) = default;
    virtual ~NavPvt_u8Impl() = default;
    NavPvt_u8Impl& operator=(const NavPvt_u8Impl&) = default;
    NavPvt_u8Impl& operator=(NavPvt_u8Impl&&) = default;
};

NavPvt_u8::NavPvt_u8() : m_pImpl(new NavPvt_u8Impl) {}
NavPvt_u8::~NavPvt_u8() = default;

NavPvt_u8& NavPvt_u8::operator=(const NavPvt_u8& other)
{
    *m_pImpl = *other.m_pImpl;
    return *this;
}

NavPvt_u8& NavPvt_u8::operator=(NavPvt_u8&& other)
{
    *m_pImpl = std::move(*other.m_pImpl);
    return *this;
}

const char* NavPvt_u8::nameImpl() const
{
    return m_pImpl->name();
}

bool NavPvt_u8::refreshMsgImpl()
{
    return m_pImpl->refreshMsg();
}

qlonglong NavPvt_u8::numericIdImpl() const
{
    return m_pImpl->numericId();
}

QString NavPvt_u8::idAsStringImpl() const
{
    return m_pImpl->idAsString();
}

void NavPvt_u8::resetImpl()
{
    m_pImpl->reset();
}

bool NavPvt_u8::assignImpl(const cc_tools_qt::ToolsMessage& other)
{
    auto* castedOther = dynamic_cast<const NavPvt_u8*>(&other);
    if (castedOther == nullptr) {
        return false;
    }
    return m_pImpl->assign(*castedOther->m_pImpl);
}

bool NavPvt_u8::isValidImpl() const
{
    return m_pImpl->isValid();
}

NavPvt_u8::DataSeq NavPvt_u8::encodeDataImpl() const
{
    return m_pImpl->encodeData();
}

bool NavPvt_u8::decodeDataImpl(const DataSeq& data)
{
    return m_pImpl->decodeData(data);
}

NavPvt_u8::Ptr NavPvt_u8::cloneImpl() const
{
    ImplPtr impl(static_cast<NavPvt_u8Impl*>(m_pImpl->clone().release()));
    return Ptr(new NavPvt_u8(std::move(impl)));
}

void NavPvt_u8::assignProtMessageImpl(void* protMsg)
{
    m_pImpl->assignProtMessage(protMsg);
}

NavPvt_u8::DataSeq NavPvt_u8::encodeFramedImpl(cc_tools_qt::ToolsFrame& frame) const
{
    return m_pImpl->encodeFramed(frame);
}

NavPvt_u8::FieldsList NavPvt_u8::transportFieldsImpl()
{
    return m_pImpl->transportFields();
}

NavPvt_u8::FieldsList NavPvt_u8::payloadFieldsImpl()
{
    return m_pImpl->payloadFields();
}

NavPvt_u8::NavPvt_u8(ImplPtr&& impl) :
    m_pImpl(std::move(impl))
{
}

} // namespace message

} // namespace cc_ublox

} // namespace Message

} // namespace cc_tools_qt_plugin
