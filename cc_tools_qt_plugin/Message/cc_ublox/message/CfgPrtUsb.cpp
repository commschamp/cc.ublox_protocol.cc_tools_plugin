// Generated by commsdsl2tools_qt v7.0.2

#include "CfgPrtUsb.h"

#include "cc_tools_qt/ToolsMessageBase.h"
#include "cc_tools_qt_plugin/Message/cc_ublox/Message.h"
#include "cc_ublox/message/CfgPrtUsb.h"

namespace cc_tools_qt_plugin
{

namespace Message
{

namespace cc_ublox
{

namespace message
{

class CfgPrtUsbImpl : public
    cc_tools_qt::ToolsMessageBase<
        cc_tools_qt_plugin::Message::cc_ublox::Message,
        ::cc_ublox::message::CfgPrtUsb,
        CfgPrtUsbImpl
    >
{
public:
    CfgPrtUsbImpl() = default;
    CfgPrtUsbImpl(const CfgPrtUsbImpl&) = default;
    CfgPrtUsbImpl(CfgPrtUsbImpl&&) = default;
    virtual ~CfgPrtUsbImpl() = default;
    CfgPrtUsbImpl& operator=(const CfgPrtUsbImpl&) = default;
    CfgPrtUsbImpl& operator=(CfgPrtUsbImpl&&) = default;
};

CfgPrtUsb::CfgPrtUsb() : m_pImpl(new CfgPrtUsbImpl) {}
CfgPrtUsb::~CfgPrtUsb() = default;

CfgPrtUsb& CfgPrtUsb::operator=(const CfgPrtUsb& other)
{
    *m_pImpl = *other.m_pImpl;
    return *this;
}

CfgPrtUsb& CfgPrtUsb::operator=(CfgPrtUsb&& other)
{
    *m_pImpl = std::move(*other.m_pImpl);
    return *this;
}

const char* CfgPrtUsb::nameImpl() const
{
    return m_pImpl->name();
}

bool CfgPrtUsb::refreshMsgImpl()
{
    return m_pImpl->refreshMsg();
}

qlonglong CfgPrtUsb::numericIdImpl() const
{
    return m_pImpl->numericId();
}

QString CfgPrtUsb::idAsStringImpl() const
{
    return m_pImpl->idAsString();
}

void CfgPrtUsb::resetImpl()
{
    m_pImpl->reset();
}

bool CfgPrtUsb::assignImpl(const cc_tools_qt::ToolsMessage& other)
{
    auto* castedOther = dynamic_cast<const CfgPrtUsb*>(&other);
    if (castedOther == nullptr) {
        return false;
    }
    return m_pImpl->assign(*castedOther->m_pImpl);
}

bool CfgPrtUsb::isValidImpl() const
{
    return m_pImpl->isValid();
}

CfgPrtUsb::DataSeq CfgPrtUsb::encodeDataImpl() const
{
    return m_pImpl->encodeData();
}

bool CfgPrtUsb::decodeDataImpl(const DataSeq& data)
{
    return m_pImpl->decodeData(data);
}

CfgPrtUsb::Ptr CfgPrtUsb::cloneImpl() const
{
    ImplPtr impl(static_cast<CfgPrtUsbImpl*>(m_pImpl->clone().release()));
    return Ptr(new CfgPrtUsb(std::move(impl)));
}

void CfgPrtUsb::assignProtMessageImpl(void* protMsg)
{
    m_pImpl->assignProtMessage(protMsg);
}

CfgPrtUsb::DataSeq CfgPrtUsb::encodeFramedImpl(cc_tools_qt::ToolsFrame& frame) const
{
    return m_pImpl->encodeFramed(frame);
}

CfgPrtUsb::FieldsList CfgPrtUsb::transportFieldsImpl()
{
    return m_pImpl->transportFields();
}

CfgPrtUsb::FieldsList CfgPrtUsb::payloadFieldsImpl()
{
    return m_pImpl->payloadFields();
}

CfgPrtUsb::CfgPrtUsb(ImplPtr&& impl) :
    m_pImpl(std::move(impl))
{
}

} // namespace message

} // namespace cc_ublox

} // namespace Message

} // namespace cc_tools_qt_plugin
